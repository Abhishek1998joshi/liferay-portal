import com.bmuschko.gradle.docker.tasks.container.DockerLogsContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

import java.net.InetAddress

buildscript {
	dependencies {
		classpath fileTree(dir: pluginClasspathDir, include: "*.jar")
	}
}

apply plugin: "com.liferay.workspace"

gradle.liferayWorkspace {
	String hostName = InetAddress.localHost.canonicalHostName.toLowerCase()

	dockerContainerId = hostName + "startdockercontainerwithpatch"
	dockerImageId = hostName + "startdockercontainerwithpatch"
}

gradle.projectsEvaluated {
	Project rootProject = gradle.rootProject

	rootProject.tasks.register("assertLog", DockerLogsContainer) {
		dependsOn rootProject.tasks.startDockerContainer
		finalizedBy rootProject.tasks.cleanDockerImage

		follow = false
		tailAll = true

		targetContainerId {
			gradle.liferayWorkspace.dockerContainerId
		}

		String expectedLine = "[LIFERAY] Patch applied successfully."
		boolean expectedLineDetected = false

		sink new PrintWriter(new StringWriter()) {
			public void write(String line) {
				if (line.contains(expectedLine)) {
					expectedLineDetected = true
				}

				rootProject.print line
			}
		}

		doLast {
			int retries = 0

			while (!expectedLineDetected && (retries < 30)) {
				Thread.sleep(100)

				retries++

				start()
			}

			if (!expectedLineDetected) {
				throw new GradleException("The expected line " + expectedLine + " was not found in the log.")
			}
		}
	}

	rootProject.tasks.register("removeContainer", DockerRemoveContainer) {
		targetContainerId {
			gradle.liferayWorkspace.dockerContainerId
		}
	}

	rootProject.tasks.register("stopContainer", DockerStopContainer) {
		finalizedBy "removeContainer"

		targetContainerId {
			gradle.liferayWorkspace.dockerContainerId
		}
	}
}