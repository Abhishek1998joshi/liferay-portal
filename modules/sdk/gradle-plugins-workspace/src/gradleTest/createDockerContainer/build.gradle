task runGradleTest
task untarStartupScript(type: Copy)

runGradleTest {
	dependsOn createDockerContainer, "copyStartupScript", "untarStartupScript"

	doLast {
		File startupScript = new File(buildDir, "startup_script.sh");

		String startupScriptContent = startupScript.text;

		assert startupScriptContent.contains("local");

		File inputDir = new File(buildDir, "docker")

		String[] inputDirFileNames = inputDir.list()

		assert inputDirFileNames.length == 6

		assert inputDirFileNames.contains("100_liferay_image_setup.sh")
		assert inputDirFileNames.contains("Dockerfile")
		assert inputDirFileNames.contains("configs")
		assert inputDirFileNames.contains("deploy")
		assert inputDirFileNames.contains("scripts")
		assert inputDirFileNames.contains("work")

		File configsDir = new File(inputDir, "configs")

		String[] configsDirFileNames = configsDir.list()

		assert configsDirFileNames.length == 1

		assert configsDirFileNames.contains("local")

		File localDir = new File(configsDir, "local")

		String[] localDirFileNames = localDir.list()

		assert localDirFileNames.length == 3

		assert localDirFileNames.contains("local_file")
		assert localDirFileNames.contains("portal-ext.properties")
		assert localDirFileNames.contains("scripts")

		File deployDir = new File(inputDir, "deploy")

		String[] deployDirFileNames = deployDir.list()

		assert deployDirFileNames.contains("com.liferay.foo.web-1.0.0.jar")
	}

	finalizedBy removeDockerContainer
}

untarStartupScript {
	dependsOn "copyStartupScript"

	from tarTree(rootProject.getBuildDir().path + "/startup_script.sh.tar")
	into "${buildDir}"
}