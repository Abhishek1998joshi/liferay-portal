{namespace com.liferay.layout.content.page.editor.web.SidebarStructurePanel}

/**
 * SidebarStructurePanel
 */
{template .render}
	{@param? _handleElementClick: any}
	{@param? _handleElementMouseEnter: any}
	{@param? _handleElementMouseLeave: any}
	{@param? _handleElementRemoveButtonClick: any}
	{@param? activeItemId: string}
	{@param? hoveredItemId: string}
	{@param? layoutData: ?}
	{@param? structure: [
		active: bool,
		children: list<?>,
		elementId: string,
		elementType: string,
		expanded: bool,
		hovered: bool,
		key: string,
		label: string
	]}
	{@param? spritemap: string}

	<div
		class="fragments-editor-sidebar-section__structure-panel"
		data-active-item-id="{$activeItemId}"
		data-hovered-item-id="{$hoveredItemId}"
		data-layout-data="{$layoutData}"
	>
		<nav class="menubar menubar-transparent menubar-vertical-expand-lg">
			<div class="collapse menubar-collapse">
				{if $spritemap and $structure}
					{call .treeNode}
						{param handleElementClick: $_handleElementClick /}
						{param handleElementMouseEnter: $_handleElementMouseEnter /}
						{param handleElementMouseLeave: $_handleElementMouseLeave /}
						{param handleElementRemoveButtonClick: $_handleElementRemoveButtonClick /}
						{param node: $structure /}
						{param spritemap: $spritemap /}
					{/call}
				{/if}
			</div>
		</nav>
	</div>
{/template}

/**
 * Tree root
 */
{template .treeNode}
	{@param? handleElementClick: any}
	{@param? handleElementMouseEnter: any}
	{@param? handleElementMouseLeave: any}
	{@param? handleElementRemoveButtonClick: any}
	{@param node: [
		active: bool,
		children: list<?>,
		elementId: string,
		elementType: string,
		expanded: bool,
		hovered: bool,
		key: string,
		label: string
	]}
	{@param spritemap: string}

	<ul class="nav nav-stacked" key="{$node.key}">
		<li class="nav-item">
			{let $itemClasses kind="text"}
				fragments-editor-sidebar-section__structure-panel__item

				{if $node.active}
					{sp}active
				{/if}

				{if $node.hovered}
					{sp}hovered
				{/if}
			{/let}

			<div class="{$itemClasses}">
				{let $itemNameAttributes kind="attributes"}
					class="fragments-editor-sidebar-section__structure-panel__item-name text-truncate"

					{if $node.elementId and $node.elementType}
						data-element-id="{$node.elementId}"
						data-element-type="{$node.elementType}"
						data-onclick="{$handleElementClick}"
						data-onmouseenter="{$handleElementMouseEnter}"
						data-onmouseleave="{$handleElementMouseLeave}"
					{/if}
				{/let}

				<div {$itemNameAttributes}>
					{$node.label}
				</div>

				{if length($node.children) > 0}
					{call .collapseIcon}
						{param node: $node /}
						{param spritemap: $spritemap /}
					{/call}
				{/if}

				{if $node.elementId and $node.elementType}
					{call .removeIcon}
						{param handleClick: $handleElementRemoveButtonClick /}
						{param node: $node /}
						{param spritemap: $spritemap /}
					{/call}
				{/if}
			</div>

			{if length($node.children) > 0}
				{let $childrenClasses kind="text"}
					collapse

					{if $node.expanded}
						{sp}show
					{/if}
				{/let}

				<div class="{$childrenClasses}" id="{$node.key}">
					{foreach $nodeChild in $node.children}
						{call .treeNode}
							{param handleElementClick: $handleElementClick /}
							{param handleElementMouseEnter: $handleElementMouseEnter /}
							{param handleElementMouseLeave: $handleElementMouseLeave /}
							{param handleElementRemoveButtonClick: $handleElementRemoveButtonClick /}
							{param key: $nodeChild.key /}
							{param node: $nodeChild /}
							{param spritemap: $spritemap /}
						{/call}
					{/foreach}
				</div>
			{/if}
		</li>
	</ul>
{/template}

/**
 * Collapse Icon
 */
{template .collapseIcon}
	{@param node: [
		expanded: bool,
		key: string
	]}
	{@param spritemap: string}

	{let $collapseIconWrapperClasses kind="text"}
		collapse-icon
		{sp}fragments-editor-sidebar-section__structure-panel__item-icon

		{if not $node.expanded}
			{sp}collapsed
		{/if}
	{/let}

	{let $collapseIconAttributes kind="attributes"}
		aria-controls="{$node.key}"
		data-toggle="collapse"
		href="#{$node.key}"
		role="button"

		{if $node.expanded}
			aria-expanded="true"
			class="collapse-icon-closed"
		{else}
			aria-expanded="false"
			class="collapse-icon-open"
		{/if}
	{/let}

	<span class="{$collapseIconWrapperClasses}">
		<a {$collapseIconAttributes}>
			{let $angleDirection kind="text"}
				{if $node.expanded}
					down
				{else}
					right
				{/if}
			{/let}

			<svg class="lexicon-icon lexicon-icon-angle-{$angleDirection}">
				<use xlink:href="{$spritemap}#angle-{$angleDirection}"></use>
			</svg>
		</a>
	</span>
{/template}

/**
 * Remove icon
 */
{template .removeIcon}
	{@param handleClick: any}
	{@param node: [
		elementId: string,
		elementType: string
	]}
	{@param spritemap: string}

	{let $removeButtonClasses kind="text"}
		btn
		{sp}btn-unstyled
		{sp}btn-monospaced
		{sp}btn-sm
		{sp}fragments-editor-sidebar-section__structure-panel__item-remove-btn
	{/let}

	<button
		class="{$removeButtonClasses}"
		data-onclick="{$handleClick}"
		data-element-id="{$node.elementId}"
		data-element-type="{$node.elementType}"
		type="button"
	>
		<svg class="lexicon-icon lexicon-icon-times-circle">
			<use xlink:href="{$spritemap}#times-circle"></use>
		</svg>
	</button>
{/template}