@component-name = "portal-collaboration"
definition {

	property osgi.module.configuration.file.names = "com.liferay.layout.seo.web.internal.configuration.FFSEOInlineFieldMapping.config";
	property osgi.module.configurations = "enabled=B&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "SEO";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This test ensures that user can map the blogs with SEO meta tags for display pages."
	@priority = "5"
	@refactorneeded
	test CanMapBlogsToDisplayPage {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Blogs Entry",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Test Site Name");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		OpenGraph.viewDefaultMappedField(portlet = "SEO");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

		Blogs.addWithCustomAbstract(
			entryAbstractDescription = "Custom Abstract",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

		BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

		WebContent.editDisplayPage(pageName = "Display Page Template Name");

		PortletEntry.publish();

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/b/blogs-entry-title");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''Blogs Entry Title - Test Site Name - ${siteName},content="Custom Abstract"''');
	}

	@description = "This test ensures that user can map the document with SEO meta tags for display pages."
	@priority = "5"
	@refactorneeded
	test CanMapDocumentToDisplayPage {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Document",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Test Site Name",
			subType = "Basic Document");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		OpenGraph.viewDefaultMappedField(portlet = "SEO");

		OpenGraph.mapEditableTextToField(
			field = "File Name,Author Name",
			mappedField = "HTML Title",
			mappedFieldName = "HTML Title",
			mappedFieldText = "HTML Title is ",
			textTpye = "TextInput");

		OpenGraph.mapEditableTextToField(
			field = "MIME Type,Version",
			mappedField = "description",
			mappedFieldName = "Description",
			mappedFieldText = "Description is ",
			textTpye = "TextArea");

		Button.clickSave();

		OpenGraph.viewMappedField(
			mappedField = "title",
			mappedFieldValue = "HTML Title is File Name: ${fileName} Author Name: ${authorName}");

		OpenGraph.viewMappedField(
			mappedField = "description",
			mappedFieldValue = "Description is MIME Type: ${mimeType} Version: ${version}",
			textTpye = "TextArea");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		var dmFileEntryID = DMDocument.getFileEntryID(dmDocumentTitle = "Document_1.jpg");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Document_1.jpg");

		WebContent.editDisplayPage(pageName = "Display Page Template Name");

		PortletEntry.publish();

		var siteID = Site.getSiteId();

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/d/${dmFileEntryID}");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''HTML Title is File Name: Document_1.jpg Author Name: Test Test - Test Site Name - ${siteName}''');

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''Description is MIME Type: image/jpeg Version: 1.0''');
	}

	@description = "This test ensures that user can map the web content with SEO meta tags for display pages."
	@priority = "5"
	@refactorneeded
	test CanMapWebContentToDisplayPage {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Test Site Name",
			subType = "Basic Web Content");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		OpenGraph.viewDefaultMappedField(portlet = "SEO");

		OpenGraph.mapEditableTextToField(
			field = "Author Name",
			mappedField = "HTML Title",
			mappedFieldName = "HTML Title",
			mappedFieldText = "HTML Title is ",
			textTpye = "TextInput");

		OpenGraph.mapEditableTextToField(
			field = "Content",
			mappedField = "description",
			mappedFieldName = "Description",
			mappedFieldText = "Description is ",
			textTpye = "TextArea");

		Button.clickSave();

		OpenGraph.viewMappedField(
			mappedField = "title",
			mappedFieldValue = "HTML Title is Author Name: ${authorName}");

		OpenGraph.viewMappedField(
			mappedField = "description",
			mappedFieldValue = "Description is Content: ${Content}",
			textTpye = "TextArea");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Test Site Name",
			title = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.editDisplayPage(pageName = "Display Page Template Name");

		PortletEntry.publish();

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/web-content-title");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''HTML Title is Author Name: Test Test - Test Site Name - ${siteName}''');

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''Description is Content: Web Content Content''');
	}

}