// Buttons colors

$custom-properties-button-colors: ();
$custom-properties-button-colors: map-merge(
	(
		primary: $btn-primary,
		outline-primary: $btn-outline-primary,
		secondary: $btn-secondary,
		outline-secondary: $btn-outline-secondary,
		link: $btn-link,
	),
	$custom-properties-button-colors
);
$custom-properties-button-maps: ();
$custom-properties-button-not-classes: ':not(.alert-btn):not(.dropdown-item)';

// Container max widths

$custom-properties-container-max-widths: ();
$custom-properties-container-max-widths: map-merge(
	(
		sm: var(--container-max-sm),
		md: var(--container-max-md),
		lg: var(--container-max-lg),
		xl: var(--container-max-xl),
	),
	$custom-properties-container-max-widths
);

// Theme colors

$custom-properties-theme-colors: ();
$custom-properties-theme-colors: map-merge(
	(
		danger: var(--danger),
		dark: var(--dark),
		gray-dark: var(--gray-800),
		info: var(--info),
		light: var(--light),
		lighter: var(--gray-100),
		primary: var(--primary),
		secondary: var(--secondary),
		success: var(--success),
		warning: var(--warning),
	),
	$custom-properties-theme-colors
);

// Buttons

@each $key, $map in $custom-properties-button-colors {
	$normal: ();
	$hover: ();

	:root {
		@each $status in (normal, hover) {
			$prefix: $status + '-';

			@if ($status == normal) {
				$prefix: '';
			}

			@each $prop in (background-color, border-color, color) {
				$alias: $prefix + $prop;
				$btn-variable: '';

				@if ($prop == background-color) {
					$alias: $prefix + 'bg';
				}

				@if (map-has-key($map, #{$alias})) {
					$btn-variable: map-get($map, #{$alias});
				} @else if($status == normal) {
					$btn-variable: map-get($map, #{$prop});
				} @else {
					$btn-variable: map-get(map-get($map, #{$status}), #{$prop});
				}

				@if ($btn-variable != null) {
					--btn-#{$key}-#{$prefix}#{$prop}: #{$btn-variable};

					@if ($status == normal) {
						$normal: map-merge(
							(#{$prop}: var(--btn-#{$key}-#{$prop})),
							$normal
						);
					} @else {
						$hover: map-merge(
							(#{$prop}: var(--btn-#{$key}-#{$prefix}#{$prop})),
							$hover
						);
					}
				}
			}
		}
	}

	$normal: map-merge(
		(
			hover: $hover,
			focus: $hover,
			active: $hover,
			disabled: $hover,
		),
		$normal
	);

	$custom-properties-button-maps: map-merge(
		(#{$key}: $normal),
		$custom-properties-button-maps
	);
}

:root {
	// Aspect ratios

	--aspect-ratio-4-to-3: 75%;
	--aspect-ratio-8-to-3: 37.5%;
	--aspect-ratio-16-to-9: 56.25%;
	--aspect-ratio: 100%;

	// Blockquotes

	--blockquote-font-size: #{getDefault($blockquote-font-size)};
	--blockquote-small-color: #{getDefault($gray-600)};
	--blockquote-small-font-size: #{getDefault($small-font-size)};

	// Body

	--body-bg: #{getDefault($body-bg)};
	--body-color: #{getDefault($body-color)};

	// Border radius

	--border-radius-circle: 50%;
	--border-radius-lg: #{getDefault($border-radius-lg)};
	--border-radius-sm: #{getDefault($border-radius-sm)};
	--border-radius: #{getDefault($border-radius)};
	--rounded-pill: #{getDefault($rounded-pill)};

	// Colors

	--brand-color-1: #{$primary};
	--brand-color-2: #{$secondary};
	--brand-color-3: #{$info};
	--brand-color-4: #{$dark-l1};

	--black: #{getDefault($black)};
	--gray-100: #{getDefault($gray-100)};
	--gray-200: #{getDefault($gray-200)};
	--gray-300: #{getDefault($gray-300)};
	--gray-400: #{getDefault($gray-400)};
	--gray-500: #{getDefault($gray-500)};
	--gray-600: #{getDefault($gray-600)};
	--gray-700: #{getDefault($gray-700)};
	--gray-800: #{getDefault($gray-800)};
	--gray-900: #{getDefault($gray-900)};
	--transparent: transparent;
	--white: #{getDefault($white)};

	@each $key, $value in $theme-colors {
		--#{$key}: #{getDefault($value)};
	}

	// Container max

	@each $key, $value in $container-max-widths {
		--container-max-#{$key}: #{getDefault($value)};
	}

	// Display

	--display1-size: #{getDefault($display1-size)};
	--display2-size: #{getDefault($display2-size)};
	--display3-size: #{getDefault($display3-size)};
	--display4-size: #{getDefault($display4-size)};

	--display1-weight: #{getDefault($display1-weight)};
	--display2-weight: #{getDefault($display2-weight)};
	--display3-weight: #{getDefault($display3-weight)};
	--display4-weight: #{getDefault($display4-weight)};

	--display-line-height: #{getDefault($display-line-height)};

	// Fonts

	--font-family-base: #{getDefault($font-family-base)};
	--font-family-monospace: #{getDefault($font-family-monospace)};
	--font-family-sans-serif: #{getDefault($font-family-sans-serif)};

	--font-size-base: #{getDefault($font-size-base)};
	--font-size-lg: #{getDefault($font-size-lg)};
	--font-size-sm: #{getDefault($font-size-sm)};

	--font-weight-bold: #{getDefault($font-weight-bold)};
	--font-weight-bolder: #{getDefault($font-weight-bolder)};
	--font-weight-light: #{getDefault($font-weight-light)};
	--font-weight-lighter: #{getDefault($font-weight-lighter)};
	--font-weight-normal: #{getDefault($font-weight-normal)};
	--font-weight-semi-bold: #{getDefault($font-weight-semi-bold)};

	--line-height-base: #{getDefault($line-height-base)};
	--line-height-sm: 1.15;

	// Headings

	--h1-font-size: #{getDefault($h1-font-size)};
	--h2-font-size: #{getDefault($h2-font-size)};
	--h3-font-size: #{getDefault($h3-font-size)};
	--h4-font-size: #{getDefault($h4-font-size)};
	--h5-font-size: #{getDefault($h5-font-size)};
	--h6-font-size: #{getDefault($h6-font-size)};

	// Lead

	--lead-font-size: #{getDefault($lead-font-size)};
	--lead-font-weight: #{getDefault($lead-font-weight)};

	// Portlet

	--portlet-bg: transparent;
	--portlet-content-border-radius: 0;
	--portlet-header-margin-bottom: calc(
		var(--spacer) * #{$portlet-header-margin-bottom}
	);

	--portlet-topper-bg: var(--primary);
	--portlet-topper-border: var(--portlet-topper-bg);
	--portlet-topper-border-radius: var(--border-radius-sm)
		var(--border-radius-sm) 0 0;
	--portlet-topper-color: var(--white);
	--portlet-topper-link-color: var(--portlet-topper-color);
	--portlet-topper-link-hover-color: var(--portlet-topper-link-color);

	// Separator

	--hr-border-color: #{getDefault($hr-border-color)};
	--hr-border-width: #{getDefault($hr-border-width)};
	--hr-margin-y: #{getDefault($hr-margin-y)};

	// Shadows

	--box-shadow-lg: #{getDefault($box-shadow-lg)};
	--box-shadow-sm: #{getDefault($box-shadow-sm)};
	--box-shadow: #{getDefault($box-shadow)};

	// Spacers

	--spacer: getDefault($spacer);
	@each $key, $value in $spacers {
		$multiplier: nth($value, 1) / $spacer;
		@if ($value == 0) {
			$multiplier: 0;
		}
		--spacer-#{$key}: calc(var(--spacer) * #{$multiplier});
	}

	// Text muted

	--text-muted: #{getDefault($text-muted)};

	// Transitions

	--transition-collapse: #{getDefault($transition-collapse)};
	--transition-fade: #{getDefault($transition-fade)};
}
