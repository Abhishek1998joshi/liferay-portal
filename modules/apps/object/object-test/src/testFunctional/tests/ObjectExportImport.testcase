@component-name = "portal-object"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-142175 - Verify it is possible to cancel importing an object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanCancelImport {

		// TODO LPS-146369 CanCancelImport pending implementation

	}

	@description = "LPS-142175 - Verify it is possible to clear the JSON file on the import dialog"
	@ignore = "Test Stub"
	@priority = "4"
	test CanClearJsonFile {

		// TODO LPS-146368 CanClearJsonFile pending implementation

	}

	@description = "LPS-142175 - Verify if it is possible to export the data structure from a custom objects"
	@priority = "5"
	test CanExportDataStructure {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 146357",
			objectName = "CustomObject146357",
			pluralLabelName = "Custom Objects 146357");

		ObjectAdmin.openObjectAdmin();

		ObjectExportImport.exportObject(
			objectName = "CustomObject146357",
			objectLabel = "Custom Object 146357");
	}

	@description = "LPS-142175 - Verify if it is possible to import the data structure to a custom objects"
	@priority = "5"
	test CanImportDataStructure {
		property portal.acceptance = "true";

		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146358");

		CreateObject.assertCustomObject(labelName = "Imported Simple Object");
	}

	@description = "LPS-142175 - Verify it is possible to maintain Fields after importing an Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanImportFields {

		// TODO LPS-146361 CanImportFields pending implementation

	}

	@description = "LPS-142175 - Verify it is possible to maintain Layouts after importing an Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanImportLayouts {

		// TODO LPS-146360 CanImportLayouts pending implementation

	}

	@description = "LPS-142175 - Verify it is possible to import the same object more then one time"
	@ignore = "Test Stub"
	@priority = "4"
	test CanImportSameObjectMoreThanOnce {

		// TODO LPS-146367 CanImportSameObjectMoreThanOnce pending implementation

	}

	@description = "LPS-142175 - Verify it's possible to maintain Scope after importing an Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanImportScope {

		// TODO LPS-146370 CanImportScope pending implementation

	}

	@description = "LPS-142175 - Verify it is not possible to maintain Relationships after importing an Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotImportRelationships {

		// TODO LPS-146359 CannotImportRelationships pending implementation

	}

	@description = "LPS-142175 - Verify it is possible to publish an imported custom object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanPublishImportedObject {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithField",
			objectName = "ImportedObjectWithField146365");

		CreateObject.assertCustomObject(labelName = "Imported Object With Field");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Field");

		Button.clickPublish();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Imported Object With Field",
			status = "Approved");
	}

	@description = "LPS-142175 - Verify that an imported custom object is created with Draft Status"
	@priority = "4"
	test ImportedObjectIsDraft {
		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146363");

		CreateObject.assertCustomObject(labelName = "Imported Simple Object");

		ObjectAdmin.assertObjectStatus(
			label = "Imported Simple Object",
			status = "Draft");
	}

}