@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-151552. This asserts saving edits in one permissions tab in Account Roles does not clear related permissions from the other tab."
	@priority = "4"
	test CanSavePermissionsWithoutDeletingOthers {
		task ("Given an account role is created") {
			Role.openRolesAdmin();

			Navigator.gotoNavTab(navTab = "Account Roles");

			Role.add(roleTitle = "New Account Role");
		}

		task ("When a permission is saved in 'Define Permissions' tab and another related permission is saved in 'Define Group Scope Permissions' tab") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_ENTRY",
				resourceName = "com.liferay.blogs",
				roleTitle = "New Account Role",
				roleType = "account");

			Role.openRolesAdmin();

			Navigator.gotoNavTab(navTab = "Account Roles");

			LexiconEntry.gotoEntry(rowEntry = "New Account Role");

			Navigator.gotoNavTab(navTab = "Define Group Scope Permissions");

			Type(
				locator1 = "RolesPermissionsNavigation#SEARCH_FIELD",
				value1 = "Blogs");

			AssertClick(
				locator1 = "RolesPermissionsNavigation#SITE_ADMIN_APPLICATIONS_BLOGS",
				value1 = "Blogs");

			Check(locator1 = "RolesPermissions#SITE_ADMIN_CONTENT_BLOGS_RESOURCE_PERMISSIONS_BLOGS_ENTRIES_SUBSCRIBE_CHECKBOX");

			PortletEntry.save();

			Alert.viewSuccessMessage();
		}

		task ("Then both tabs should assert the correct permissions") {
			Navigator.gotoNavTab(navTab = "Define Permissions");

			Role.viewPermissionCP(
				permissionDefinitionValue = "Add Entry",
				permissionNavigationValue = "Blogs > Blog Entries:");

			Navigator.gotoNavTab(navTab = "Define Group Scope Permissions");

			Role.viewPermissionCP(
				permissionDefinitionValue = "Subscribe",
				permissionNavigationValue = "Blogs > Blog Entries:");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with View Account Roles permissions for an account can only view and cannot do other actions to those roles. It also asserts that a user only has this permissions to the account he has the role in."
	@priority = "4"
	test CanViewAccountRolesWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given add a user with permission of access CP") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Accounts.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");

			task ("And add two accounts") {
				for (var accountNum : list "1,2") {
					JSONAccountEntry.addAccountEntry(
						accountEntryName = "Account Name ${accountNum}",
						accountEntryType = "Business");
				}
			}
		}

		task ("When add owned account role with UPDATE, VIEW ACCOUNT ROLE permission to account1 userfn1") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 1");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role1");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.account.model.AccountEntry",
				roleTitle = "Account Specific Role1",
				roleType = "account");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_ACCOUNT_ROLES",
				resourceName = "com.liferay.account.model.AccountEntry",
				roleTitle = "Account Specific Role1",
				roleType = "account");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 1");

			Accounts.assignUsers(
				accountName = "Account Name 1",
				assigneeName = "userfn1");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role1",
				accountUserName = "userfn1 userln1");

			task ("And add owned account role with UPDATE permission to account2 userfn1") {
				Accounts.openAccountsAdmin();

				LexiconEntry.gotoEntry(rowEntry = "Account Name 2");

				Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role2");

				Permissions.definePermissionViaJSONAPI(
					resourceAction = "UPDATE",
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Account Specific Role2",
					roleType = "account");

				Accounts.openAccountsAdmin();

				LexiconEntry.gotoEntry(rowEntry = "Account Name 2");

				Accounts.assignUsers(
					accountName = "Account Name 2",
					assigneeName = "userfn1");

				Accounts.addAssigneeToRoleViaUsersTab(
					accountRoleTitle = "Account Specific Role2",
					accountUserName = "userfn1 userln1");
			}
		}

		task ("Then a user with only view account roles permissions for an account can only view account roles, can't add role, can't delete the role.") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 1");

			Accounts.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.viewEntryName(rowEntry = "Account Specific Role1");

			AssertElementNotPresent(locator1 = "Button#PLUS");

			LexiconEntry.viewNoEntryMenu(rowEntry = "Account Specific Role1");

			task ("And a user with only view account roles permissions only can view for accont1") {
				Accounts.openAccountsAdmin();

				LexiconEntry.gotoEntry(rowEntry = "Account Name 2");

				AssertElementNotPresent(
					key_tab = "Roles",
					locator1 = "NavTab#ACTIVE_TAB_LINK");
			}
		}
	}

}