@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "2B Account Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "2B Account Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "2B Account Page",
			widgetName = "Account Management");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		JSONAccountEntryUser.addAccountEntryUser(
			accountEntryName = "Account Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.addAssigneeToRoleViaRolesTab(
			accountRoleTitle = "Account Administrator",
			assigneeName = "userfn");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.setUserPassword(
			accountUser = "userfn",
			accountUserPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@description = "This test asserts that a newly created site will have default account type settings even after changing settings on original site."
	@priority = "5"
	test AllowedAccountTypeIsSiteWide {
		task ("Log in as Super User to give permissions for account adding to Account Administrator User") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");

			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Only allow for Person accounts to be created or visible") {
			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Person");
		}

		task ("Create a Person account as the Account Administrator user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.addPersonAccount(accountName = "Person Account");
		}

		task ("Assert that the Account Administrator can only see the Person account and not the Business account made in the setup") {
			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.viewNoEntry(rowEntry = "Account Name");

			LexiconEntry.viewEntryName(rowEntry = "Person Account");
		}

		task ("Log back in as Super User to create a new site and add a new page with the Account Management Widget") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			Site.addBlankCP(siteName = "Site Name");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			PagesAdmin.addPage(
				pageName = "2B New Site",
				sitePageType = "Widget Page");

			Navigator.gotoSitePage(
				pageName = "2B New Site",
				siteName = "Site Name");

			Portlet.addPG(portletName = "Account Management");
		}

		task ("As the Account Administrator, go to new site and assert that both account types are now visible due to default allowed account type settings") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoSitePage(
				pageName = "2B New Site",
				siteName = "Site Name");

			LexiconEntry.viewEntryName(rowEntry = "Account Name");

			LexiconEntry.viewEntryName(rowEntry = "Person Account");
		}
	}

	@description = "This test asserts that only business accounts can be added when the allowed account type is business"
	@priority = "5"
	test CanOnlyAddBusinessAccountsWhenAllowedAccountTypeIsBusiness {
		property portal.acceptance = "true";

		task ("Add account entry permission to Account Admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Set allowed account type to business") {
			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Business");
		}

		task ("Assert Account Admin can only add business accounts") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.gotoAdd();

			PortletEntry.inputName(name = "Business Account Only");

			AssertElementNotPresent(
				key_fieldLabel = "Type",
				key_value = "Person",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			SelectField.select(
				selectFieldLabel = "Type",
				selectFieldValue = "Business");

			Button.clickSave();

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.viewEntryName(rowEntry = "Business Account Only");
		}
	}

	@description = "This test asserts that only person accounts can be added when the allowed account type is person"
	@priority = "5"
	test CanOnlyAddPersonAccountsWhenAllowedAccountTypeIsPerson {
		property portal.acceptance = "true";

		task ("Add account entry permission to Account Admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Set allowed account type to person") {
			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Person");
		}

		task ("Assert Account Admin can only add person accounts") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.gotoAdd();

			PortletEntry.inputName(name = "Person Account Only");

			AssertElementNotPresent(
				key_fieldLabel = "Type",
				key_value = "Business",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			SelectField.select(
				selectFieldLabel = "Type",
				selectFieldValue = "Person");

			Button.clickSave();

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.viewEntryName(rowEntry = "Person Account Only");
		}
	}

	@description = "This test sets the Allowed Account Type to only Business and assert that only Business Accounts display in Account Management Widget."
	@priority = "4"
	test CanOnlyViewBusinessAccountsWhenAllowedAccountTypeIsBusiness {
		property test.name.skip.portal.instance = "2BAccount#CanOnlyViewBusinessAccountsWhenAllowedAccountTypeIsBusiness";

		task ("Login as Super User to create a Person type account and assign Account Admin to it") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Person Account",
				accountEntryType = "Person");

			Accounts.openAccountsAdmin();

			Accounts.gotoEdit(accountName = "Person Account");

			Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn");
		}

		task ("View that all accounts are listed") {
			Accounts.openAccountsAdmin();

			for (var accounts : list "Account Name,Person Account") {
				LexiconEntry.viewEntryName(rowEntry = "${accounts}");
			}
		}

		task ("Change account type settings to only allow the viewing of Business Type accounts") {
			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			ApplicationsMenu.gotoSite(site = "${siteName}");

			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Business");
		}

		task ("Log back in as Account Administrator and assert that only the Business account is listed and the Person account is not") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			AssertElementPresent(
				key_rowEntry = "Account Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			AssertElementNotPresent(
				key_rowEntry = "Person Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
		}
	}

	@description = "This test sets the Allowed Account Type to only Person and assert that only Person Accounts display in Account Management Widget."
	@priority = "4"
	test CanOnlyViewPersonAccountsWhenAllowedAccountTypeIsPerson {
		property test.name.skip.portal.instance = "2BAccount#CanOnlyViewPersonAccountsWhenAllowedAccountTypeIsPerson";

		task ("Login as Super User to create a Person type account and assign Account Admin to it") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Person Account",
				accountEntryType = "Person");

			Accounts.openAccountsAdmin();

			Accounts.gotoEdit(accountName = "Person Account");

			Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn");
		}

		task ("View that all accounts are listed") {
			Accounts.openAccountsAdmin();

			for (var accounts : list "Account Name,Person Account") {
				LexiconEntry.viewEntryName(rowEntry = "${accounts}");
			}
		}

		task ("Change account type settings to only allow the viewing of Person Type accounts") {
			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			ApplicationsMenu.gotoSite(site = "${siteName}");

			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Person");
		}

		task ("Log back in as Account Administrator and assert that the Business account is not visible and only Person Account is listed") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			AssertElementNotPresent(
				key_rowEntry = "Account Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			AssertElementPresent(
				key_rowEntry = "Person Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
		}
	}

	@description = "This test asserts that a user can select an account from the list as the active account. Backend tests are covering functionality for account selection."
	@priority = "4"
	test CanSetActiveAccount {
		property portal.acceptance = "true";

		task ("Sign in as Super User to give permissions to add accounts to the Account Administrator user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as Account Administrator and create a new account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.addBusinessAccount(
				accountDescription = "New Active Account Selection",
				accountName = "New Selection for Test");
		}

		task ("Select new account to be main active account, denoted by a checkmark, and assert that previous account is no longer selected") {
			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Select Account",
				rowEntry = "New Selection for Test");

			Accounts.viewSelectedAccount(entryName = "New Selection for Test");

			AssertElementNotPresent(
				key_entryName = "Account Name",
				locator1 = "Account#SELECT_ACCOUNT_ENTRY_CHECKMARK");
		}
	}

}