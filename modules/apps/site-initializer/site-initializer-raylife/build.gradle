import aQute.bnd.version.Version

import com.liferay.gradle.util.OSDetector
import com.liferay.gradle.util.StringUtil

import java.text.DateFormat
import java.text.SimpleDateFormat

import java.util.Date
import java.util.TimeZone

import org.gradle.util.GUtil

apply plugin: "com.liferay.node"

configurations {
	extra
}

task buildExtra
task forceDeploy
task zipExtra(type: Zip)

Version extraVersion = Version.parseVersion("00000000.0000")

DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd.HHmm")

dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))

String dateString = dateFormat.format(new Date())

artifacts {
	extra zipExtra
}

dependencies {
	extra ext: "zip", group: "com.liferay", name: "com.liferay.site.initializer.raylife.extra", version: extraVersion
}

forceDeploy {
	finalizedBy deploy
}

node {
	global = false
	nodeVersion = "14.17.6"
	useNpm = false
}

processResources {
	ResolvedConfiguration extraResolvedConfiguration = configurations.extra.getResolvedConfiguration()

	if (gradle.startParameter.taskNames.contains("forceDeploy") || extraResolvedConfiguration.hasError()) {
		dependsOn buildExtra

		into("site-initializer/documents/extra") {
			from new File(buildDir, "extra")
		}
	}
	else {
		into("site-initializer/documents/extra") {
			from zipTree(configurations.extra.singleFile)
		}
	}
}

uploadExtra {
	doLast {
		File buildGradleFile = file("build.gradle")

		String content = buildGradleFile.getText("UTF-8")

		content = content.replaceFirst(~/Version extraVersion = Version.parseVersion\("(\w+\.\w+)"\)/) {
			String all, String versionString ->

			all.replace versionString, dateString
		}

		buildGradleFile.setText content, "UTF-8"
	}

	repositories {
		mavenDeployer {
			pom {
				artifactId = GUtil.loadProperties(file("bnd.bnd"))["Bundle-SymbolicName"] + ".extra"
				groupId = "com.liferay"
				version = dateString
			}
		}
	}
}

zipExtra {
	dependsOn buildExtra

	archiveName "extra.zip"
	destinationDir new File(buildDir, "dist")
	from new File(buildDir, "extra")
}

_createExtraTasks()

private void _createExtraTasks() {
	File extraDir = new File(projectDir, "extra")

	extraDir.eachDir {
		File dir ->

		String suffix = dir.name.replaceAll(/[\.-](\w)/) {
			return it[1].toUpperCase()
		}

		Task yarnInstallTask = tasks.create(name: "yarnInstall" + StringUtil.capitalize(suffix), type: Exec) {
			if (OSDetector.windows) {
				executable "cmd.exe"

				args "/c"
				args new File(node.nodeDir, "node.exe")
				args new File(node.nodeDir, "node_modules/yarn/yarn-" + node.yarnVersion + ".js")
			}
			else {
				executable new File(node.nodeDir, "bin/node")

				args new File(node.nodeDir, "lib/node_modules/yarn/yarn-" + node.yarnVersion + ".js")
			}

			args "install"
			dependsOn downloadNode
			workingDir dir
		}

		Task yarnBuildTask = tasks.create(name: "yarnBuild" + StringUtil.capitalize(suffix), type: Exec) {
			if (OSDetector.windows) {
				executable "cmd.exe"

				args "/c"
				args new File(node.nodeDir, "node.exe")
				args new File(node.nodeDir, "node_modules/yarn/yarn-" + node.yarnVersion + ".js")
			}
			else {
				executable new File(node.nodeDir, "bin/node")

				args new File(node.nodeDir, "lib/node_modules/yarn/yarn-" + node.yarnVersion + ".js")
			}

			args "build"
			dependsOn yarnInstallTask
			workingDir dir

			doLast {
				copy {
					from new File(dir, "build/static")
					include "js/*.js"
					into new File(buildDir, "extra/" + dir.name)
				}
			}
		}

		buildExtra.finalizedBy yarnBuildTask
	}
}