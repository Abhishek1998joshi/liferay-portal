#!/bin/bash

function check_usage {
	export CUSTOM_ELEMENT_NAME="hello-world"
}

function create_files {
	remove_unnecessary_files
	write_index_js
	write_routes_files
	write_common_files
}

function create_folders_structure {
	cd src

	#
	# Create all needed folders to write .js files
	#

	mkdir -p routes/hello-world/components routes/hello-world/pages
	mkdir -p common/services/liferay common/styles
}

function create_react_app {
	yarn create react-app ${1}
}

function date {
	export LC_ALL=en_US.UTF-8
	export TZ=America/Los_Angeles

	if [ -z ${1+x} ] || [ -z ${2+x} ]
	then
		if [ "$(uname)" == "Darwin" ]
		then
			echo $(/bin/date)
		elif [ -e /bin/date ]
		then
			echo $(/bin/date --iso-8601=seconds)
		else
			echo $(/usr/bin/date --iso-8601=seconds)
		fi
	else
		if [ "$(uname)" == "Darwin" ]
		then
			echo $(/bin/date -juf "%a %b %e %T %Z %Y" "${1}" "${2}")
		elif [ -e /bin/date ]
		then
			echo $(/bin/date -d "${1}" "${2}")
		else
			echo $(/usr/bin/date -d "${1}" "${2}")
		fi
	fi
}

function get_temp_dir {
	# local current_date=$(date)
	# local timestamp=$(date "${current_date}" "+%Y%m%d%H%M%S")

	# echo temp-$(date +%s)
	echo hello-world-v1
}

function main {
	check_usage

	local temp_dir=$(get_temp_dir)

	create_react_app ${temp_dir}

	cp react-bundle-rename.sh ${temp_dir}
	
	cd ${temp_dir}
	
	create_folders_structure ${temp_dir}

	create_files

	cd ..

	yarn remove @testing-library/jest-dom @testing-library/react @testing-library/user-event web-vitals

	sed -i -e "s|<div id=\"root\"></div>|<$CUSTOM_ELEMENT_NAME></$CUSTOM_ELEMENT_NAME>|g" public/index.html

	#
	# Remove temp files created by SED
	# Brian, for some reason, without that flag -e this sed command don't work for me

	#
	# Set up Yarn.
	#

	echo "SKIP_PREFLIGHT_CHECK=true" > ".env"

	# overlay_react_app ${temp_dir}
}

function overlay_react_app {
	if [ ! -e "remote-app" ]
	then
		mv ${temp_dir} remote-app

		return
	fi

	#
	# Copy custom files and merge package-ext.json.
	#
}

function write_gitignore {
	cat <<EOF > .gitignore
EOF
}

function write_index_js {
cat <<EOF > index.js
import React from 'react';
import ReactDOM from 'react-dom';

import HelloWorld from './routes/hello-world/pages/HelloWorld';
import './common/styles/index.scss';

class WebComponent extends HTMLElement {
	connectedCallback() {
		ReactDOM.render(
			<HelloWorld />,
			this
		);
	}
}

const ELEMENT_ID = '${CUSTOM_ELEMENT_NAME}';

if (!customElements.get(ELEMENT_ID)) {
	customElements.define(ELEMENT_ID, WebComponent);
}
EOF
}


function remove_unnecessary_files {

	#
	# All the files deleted here, are generated by Create React App
	#

	rm -f App* index* setupTests.js logo.svg reportWebVitals.js
	rm -f ../public/logo* ../public/manifest.json ../public/favicon.ico ../public/robots.txt
}

function write_common_files {
	#
	# Generating Liferay API
	#

	cat <<EOF > common/services/liferay/api.js
const {REACT_APP_LIFERAY_API = window.location.origin} = process.env;

export const getLiferayAuthenticationToken = () => {
	try {
		// eslint-disable-next-line no-undef
		const token = Liferay.authToken;

		return token;
	} catch (error) {
		console.warn('Not able to find Liferay auth token\n', error);

		return '';
	}
};

const baseFetch = async (url, {body, method = 'GET'} = {}) => {
	const response = await fetch(REACT_APP_LIFERAY_API + '/' + url, {
		...(body && {body: JSON.stringify(body)}),
		headers: {
			'Content-Type': 'application/json',
			'x-csrf-token': getLiferayAuthenticationToken(),
		},
		method,
	});

	const data = await response.json();

	return {data};
};

export {REACT_APP_LIFERAY_API};

export default baseFetch;

EOF
	
	#
	# Generating Styles
	#

	cat <<EOF > common/styles/variables.scss
\$primary-color: #295ccc;
EOF

	cat <<EOF > common/styles/index.scss
${CUSTOM_ELEMENT_NAME} {
	@import 'variables';
	@import 'hello-world.scss';
}
EOF


	cat <<EOF > common/styles/hello-world.scss
.hello-world {
	h1 {
		color: \$primary-color;
		font-weight: bold;
	}
}
EOF

}

function write_routes_files {
	cat <<EOF > routes/hello-world/pages/HelloWorld.js
import React from 'react';

const HelloWorld = () => (
	<div className="hello-world">
		<h1>Hello World</h1>
	</div>
);

export default HelloWorld;
EOF
}

main