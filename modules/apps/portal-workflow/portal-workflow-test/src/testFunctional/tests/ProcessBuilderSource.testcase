@component-name = "portal-workflow"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Workflow";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Workflow.tearDownPortalWorkflow();

			Workflow.tearDownWorkflowDefinitions();
		}
	}

	@description = "Verify that the user can delete a Not Published process"
	@ignore = "Test Stub"
	@priority = "3"
	test CanDeleteUnpublishedWorkflow {

		// TODO LRQA-68341 CanDeleteUnpublishedWorkflow pending implementation

	}

	@description = "Verify that, when duplicating a process, the user is able to edit its title"
	@ignore = "Test Stub"
	@priority = "4"
	test CanEditDuplicatedWorkflowTitle {

		// TODO LRQA-68336 CanEditDuplicatedWorkflowTitle pending implementation

	}

	@description = "Verify that, when importing a non XML file, an error message is displayed and the Workflow is not published"
	@priority = "4"
	test CanImportNonXMLFile {
		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "Document_1.doc");

		if (IsElementPresent(locator1 = "KaleoDesignerEditWorkflow#SOURCE_KALEO_XML_TAB")) {
			KaleoDesigner.viewSourceXMLTab();
		}

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "Document_1.doc");

		Alert.viewSuccessMessageText(successMessage = "Definition imported successfully.");

		PortletEntry.publish();

		Alert.viewErrorMessage(errorMessage = "Please enter valid content.");

		Navigator.gotoBack();

		AssertElementNotPresent(
			key_workflowResourceValue = "Document_1",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");
	}

	@description = "Verify that the user is able to import a XML file"
	@ignore = "Test Stub"
	@priority = "4"
	test CanImportXMLFile {
		property test.name.skip.portal.instance = "ProcessBuilderSource#CanImportXMLFile";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.uploadDefinition(
			workflowDefinitionFile = "workflow_definition_1.xml",
			workflowDefinitionTitle = "New Uploaded Definition");

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.viewDefinitionPublished(workflowDefinitionTitle = "New Uploaded Definition");
	}

	@description = "Verify that, when the definition is published, the Delete option is not present in kebab menu"
	@ignore = "Test Stub"
	@priority = "4"
	test CanNotDeletePublishedWorkflow {

		// TODO LRQA-68340 CanNotDeletePublishedWorkflow pending implementation

	}

	@description = "Verify that the Workflow is not published without title"
	@priority = "4"
	test CanNotPublishWithoutTitle {
		property test.name.skip.portal.instance = "ProcessBuilderSource#CanNotPublishWithoutTitle";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Click(locator1 = "Button#PLUS");

		KaleoDesigner.viewSourceXMLTab();

		Button.clickPublish();

		Alert.viewErrorMessage(errorMessage = "Please name your workflow before publishing.");

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		AssertVisible(
			key_workflowDefinitionTitle = "Single Approver",
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_TITLE_PUBLISHED");
	}

	@description = "Verify that the user can not unpublish a Workflow in use and system displays an error message"
	@ignore = "Test Stub"
	@priority = "4"
	test CanNotUnpublishWorkflowInUse {

		// TODO LRQA-68339 CanNotUnpublishWorkflowInUse pending implementation

	}

	@description = "Verify that, when entering valid content, the Workflow is published"
	@priority = "5"
	test CanPublishWorkflow {
		property test.name.skip.portal.instance = "ProcessBuilderSource#CanPublishWorkflow";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.uploadDefinition(
			workflowDefinitionFile = "workflow_definition_2.xml",
			workflowDefinitionTitle = "Manuel Task");

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.viewDefinitionPublished(workflowDefinitionTitle = "Manuel Task");
	}

	@description = "Verify that the user is able to restore a previous version of definition by clicking on Restore option, on kebab menu"
	@ignore = "Test Stub"
	@priority = "4"
	test CanRestorePreviousVersionOnMenu {

		// TODO LRQA-68333 CanRestorePreviousVersionOnMenu pending implementation

	}

	@description = "Verify that the user is able to restore a previous version of definition by clicking on Restore button, on Preview modal"
	@ignore = "Test Stub"
	@priority = "4"
	test CanRestorePreviousVersionOnModal {

		// TODO LRQA-68332 CanRestorePreviousVersionOnModal pending implementation

	}

	@description = "Verify that the user is able to save a untitled Workflow"
	@ignore = "Test Stub"
	@priority = "2"
	test CanSaveUntitledWorkflow {

		// TODO LRQA-68344 CanSaveUntitledWorkflow pending implementation

	}

	@description = "Verify that the user is able to save a Workflow without publishing it"
	@priority = "3"
	test CanSaveWorkflow {
		property test.name.skip.portal.instance = "ProcessBuilderSource#CanSaveWorkflow ";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow");

		Workflow.saveDefinition();

		Alert.viewSuccessMessageText(successMessage = "Workflow saved.");

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.viewDefinitionUnpublished(workflowDefinitionTitle = "New Workflow");
	}

	@description = "Verify that the user can select Duplicate option in the kebab for a particular definition"
	@ignore = "Test Stub"
	@priority = "3"
	test CanSelectDuplicate {

		// TODO LRQA-68335 CanSelectDuplicate pending implementation

	}

	@description = "Verify that the user can select Permissions option in the kebab for a particular definition"
	@ignore = "Test Stub"
	@priority = "3"
	test CanSelectPermissions {

		// TODO LRQA-68334 CanSelectPermissions pending implementation

	}

	@description = "Verify that the user can select Unpublish option in the kebab menu for a particular definition"
	@ignore = "Test Stub"
	@priority = "3"
	test CanSelectUnpublish {

		// TODO LRQA-68338 CanSelectUnpublish pending implementation

	}

	@description = "Verify that when clicking the info icon, the process details and revision history are displayed"
	@priority = "3"
	test CanViewDetailsAndHistory {
		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Click(
			key_workflowResourceValue = "Single Approver",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");

		Click.clickAt(locator1 = "Icon#INFO");

		AssertVisible(locator1 = "Sidebar#SIDEBAR");

		AssertElementPresent(
			key_tab = "Details",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Navigator.gotoNavTab(navTab = "Revision History");

		AssertElementPresent(
			key_tab = "Revision History",
			locator1 = "NavTab#ACTIVE_TAB_LINK");
	}

	@description = "Verify that the user is able to view a previous version of definition by clicking on Preview option, on kebab menu"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewPreviousVersion {

		// TODO LRQA-68331 CanViewPreviousVersion pending implementation

	}

	@description = "Verify that the Details tab displays the Created date, Last Modified date and Total Modifications"
	@priority = "3"
	test DisplaysCreatedDateLastModifiedTotalModifications {
		property test.name.skip.portal.instance = "ProcessBuilderSource#DisplaysCreatedDateLastModifiedTotalModifications";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow");

		Workflow.saveDefinition();

		Alert.viewSuccessMessageText(successMessage = "Workflow saved.");

		Click(locator1 = "Icon#INFO");

		AssertElementPresent(locator1 = "AssetWorkflow#DETAILS_WORKFLOW_CREATED_DATE");

		AssertElementPresent(locator1 = "AssetWorkflow#DETAILS_WORKFLOW_LAST_MODIFIED");

		AssertElementPresent(locator1 = "AssetWorkflow#DETAILS_WORKFLOW_TOTAL_MODIFICATIONS");
	}

	@description = "Verify that the Revision History tab displays the list of modification dates"
	@ignore = "Test Stub"
	@priority = "3"
	test DisplaysModificationDates {

		// TODO LRQA-68329 DisplaysModificationDates pending implementation

	}

	@description = "Verify that revision history is not copied to the duplicated definition"
	@ignore = "Test Stub"
	@priority = "4"
	test RevisionHistoryIsNotCopied {

		// TODO LRQA-68337 RevisionHistoryIsNotCopied pending implementation

	}

	@description = "Verify that the time format in Details tab is following the system language"
	@priority = "3"
	test TimeFormatFollowsSystemLanguageInDetails {
		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Click(
			key_workflowResourceValue = "Single Approver",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");

		Click.clickAt(locator1 = "Icon#INFO");

		AssertElementPresent(
			key_infoValue = "PM",
			key_titleValue = "Created",
			locator1 = "ProcessBuilderSource#PROCESS_DETAILS");

		AssertElementPresent(
			key_infoValue = "PM",
			key_titleValue = "Last Modified",
			locator1 = "ProcessBuilderSource#PROCESS_DETAILS");

		UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

		MyAccount.changeUserLanguage(
			languageName = "português (Brasil)",
			saveButton = "Save");

		ApplicationsMenu.gotoPortlet(
			category = "Fluxo de trabalho",
			panel = "Aplicativos",
			portlet = "Construtor de Processo");

		Click(
			key_workflowDefinitionTitle = "Aprovador Único",
			locator1 = "WorkflowDefinition#DEFINITION_TABLE_SPECIFIC_DEFINITION_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Editar");

		Click(locator1 = "Icon#INFO");

		AssertElementNotPresent(
			key_infoValue = "PM",
			key_titleValue = "Criado",
			locator1 = "ProcessBuilderSource#PROCESS_DETAILS");

		AssertElementNotPresent(
			key_infoValue = "PM",
			key_titleValue = "Última Modificação",
			locator1 = "ProcessBuilderSource#PROCESS_DETAILS");
	}

	@description = "Verify that the time format in Revision History tab is following the system language"
	@ignore = "Test Stub"
	@priority = "4"
	test TimeFormatFollowsSystemLanguageInRevision {

		// TODO LRQA-68330 TimeFormatFollowsSystemLanguageInRevision pending implementation

	}

}