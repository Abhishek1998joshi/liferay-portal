@component-name = "data-engine"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Data Engine";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "DM Document Type");

		DataEngine.addField(
			fieldFieldLabel = "Rich Text",
			fieldName = "Rich Text");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			User.logoutPG();
		}
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "5"
	test InsertTextOnRichTextOnUpload {
		property portal.acceptance = "false";

		PortletEntry.save();

		Navigator.gotoNavTab(navTab = "Documents and Media");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type");

		DMDocument.editCmd(dmDocumentTitleEdit = "DM Document Type Name");

		CKEditor.addContentInWebContent(
			content = "Inserting a new Text",
			fieldLabel = "Rich Text");

		Button.clickPublish();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type");

		SelectFrame.selectFrameNoLoading(
			key_fieldLabel = "Rich Text",
			locator1 = "CKEditor#BODY_FIELD_IFRAME");

		AssertTextEquals(
			locator1 = "CKEditor#BODY",
			value1 = "Inserting a new Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test LocalizationOfRichTextPersists {
		property portal.acceptance = "false";

		DataEngine.editFieldTip(
			fieldFieldLabel = "Rich Text",
			fieldHelp = "Help Text");

		PortletEntry.changeLocale(locale = "pt_BR");

		PortletEntry.inputName(name = "DM Tipo de Documento");

		FormViewBuilder.editFieldLabel(
			fieldLabel = "Rich Text",
			label = "Texto Rico");

		DataEngine.editFieldTip(
			fieldFieldLabel = "Texto Rico",
			fieldHelp = "Texto Ajuda");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		PortletEntry.changeLocale(locale = "pt_BR");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "DM Tipo de Documento");

		DataEngine.viewField(
			fieldFieldLabel = "Texto Rico",
			fieldName = "Rich Text",
			fieldHelp = "Texto Ajuda");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "5"
	test RepeatRichTextOnUpload {
		property portal.acceptance = "false";

		DataEngine.editFieldRepeatable(fieldFieldLabel = "Rich Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentsAndMedia();

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type");

		PortletEntry.inputTitle(title = "DM Document Type");

		DataEngine.addRepeatableField(fieldName = "Rich Text");

		PortletEntry.publish();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type");

		DataEngine.assertFieldRepeated(
			fieldName = "RichText",
			index = "2");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test SetFieldReferenceOfRichTextWithValidAndInvalidCharacters {
		property portal.acceptance = "false";

		DataEngine.editFieldReference(
			assertFieldReference = "TestValidReference",
			fieldFieldLabel = "Rich Text",
			fieldReference = "TestValidReference");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DataEngine.viewFieldReference(
			fieldFieldLabel = "Rich Text",
			fieldName = "Rich Text",
<<<<<<< HEAD
			fieldReference = "ReferenceText");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "3"
	test SetFieldReferenceOfRichTextWithInvalidCharacters {
		var richTextValue = "Rich Text";
		var dmDocumentTitle = "New Document Type";
		var fieldReferenceWithInvalidChars = "Myreference@#$%Â¨&*";

		DataEngine.addField(
			fieldFieldLabel = "${richTextValue}",
			fieldName = "${richTextValue}");

		Button.clickSave();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

		DataEngine.editFieldReference(
			assertFieldReference = "Myreference",
			fieldFieldLabel = "${richTextValue}",
			fieldName = "${richTextValue}",
			fieldReference = "${fieldReferenceWithInvalidChars}");

		Button.clickSave();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

		DataEngine.viewFieldReference(
			fieldFieldLabel = "${richTextValue}",
			fieldName = "${richTextValue}",
			fieldReference = "Myreference");
=======
			fieldReference = "TestValidReference");
		
		DataEngine.editFieldReferenceWithInvalidCharacters(
			assertFieldReference = "TestInvalidReference",
			fieldFieldLabel = "Rich Text",
			fieldReference = "Test!Invalid@#Reference");
		
		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DataEngine.viewFieldReference(
			fieldFieldLabel = "Rich Text",
			fieldName = "Rich Text",
			fieldReference = "TestInvalidReference");
>>>>>>> d06f404 (LRQA-64865 Merge SetFieldReferenceOfRichText and SetFieldReferenceOfRichTextWithInvalidCharacters test into SetFieldReferenceOfRichTextWithValidAndInvalidCharacters)
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "5"
	test SetLabelTextOfRichTextAndHelpText {
		property portal.acceptance = "false";

		DataEngine.editFieldTip(
			fieldFieldLabel = "Rich Text",
			fieldHelp = "Help Text");

		PortletEntry.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DataEngine.viewField(
			fieldFieldLabel = "Rich Text",
			fieldHelp = "Help Text",
			fieldName = "Rich Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test SetRichTextSearchableByTextAndDisable {

		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Disable");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DataEngine.viewFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Disable");

		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		DataEngine.viewFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "3"
	test ShowAndHideRichTextLabel {

		DataEngine.editShowOrHideLabel(
			fieldFieldLabel = "Rich Text",
			showLabel = "false");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		AssertElementNotPresent(
			key_fieldFieldLabel = "Rich Text",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		DataEngine.editShowOrHideLabel(
			fieldLabelHidden = "true",
			showLabel = "true");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type");

		AssertVisible(
			key_fieldFieldLabel = "Rich Text",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test UploadWithRequiredRichText {
		property portal.acceptance = "false";
		
		DataEngine.editFieldRequired(fieldFieldLabel = "Rich Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentsAndMedia();

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type");

		PortletEntry.inputTitle(title = "DM Document Type Name");

		Button.clickPublish();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "This field is required.");
		
		CKEditor.addContentInWebContent(
			content = "Hello",
			fieldLabel = "Rich Text");

		Button.clickPublish();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test VerifyRichFieldHelpTextOnUpload {
		property portal.upstream = "quarantine";

		DataEngine.editFieldTip(
			fieldFieldLabel = "Rich Text",
			fieldHelp = "Help Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentsAndMedia();

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type");

		AssertTextEquals(
			locator1 = "FormFields#HELP_TEXT",
			value1 = "Help Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test VerifyRichTextIsSetAsRequiredOnUploading {
		property portal.acceptance = "false";

		DataEngine.editFieldRequired(fieldFieldLabel = "Rich Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentsAndMedia();

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type");

		AssertElementPresent(
			fieldLabel = "Rich Text",
			locator1 = "FormViewBuilder#FIELD_LABEL_REQUIRED");
	}

}