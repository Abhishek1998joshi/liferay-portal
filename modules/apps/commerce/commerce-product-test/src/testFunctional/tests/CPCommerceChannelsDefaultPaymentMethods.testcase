@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		CommerceEntry.addAccountEntryUser(
			accountName = "Commerce Account",
			accountType = "Business",
			agreeToTermsAndAnswerReminderQuery = "true",
			createNewAccount = "true",
			requireReset = "false",
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userRole = "Buyer",
			userScreenName = "buyeruser",
			userSiteMembership = "Minium");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Verify users can add and remove a new default payment method linked to an account"
	@priority = "3"
	test AddAndRemoveANewDefaultPaymentMethod {
		property portal.acceptance = "false";

		task ("When the user goes into the Order Defaults tab for an account in Minium account Management") {
			CommerceNavigator.gotoMiniumAccountOrderDefaults(accountName = "Test Account");
		}

		task ("And clicks on the Set Default Account Payment Methods button") {
			Button.click(button = "Set Default Commerce Payment Method");
		}

		task ("Then a dropdown appears with all the payment methods entries created by default using Minium") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			for (var paymentMethod : list "Money Order,Mercanet,Authorize.Net,PayPal") {
				AssertElementPresent(
					key_radioOption = "${paymentMethod}",
					locator1 = "CommerceEntry#RADIO_BUTTON");
			}
		}

		task ("When the user selects a payment method and clicks save") {
			Click.clickAtNotVisible(
				key_radioOption = "Money Order",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			IFrame.selectTopFrame();

			Button.clickSave();
		}

		task ("Then the Default Account Commerce Payment Method should be saved") {
			AssertTextEquals(
				key_defaultOption = "Default Account Commerce Payment Methods",
				locator1 = "CommerceEntry#ACCOUNT_ORDER_DEFAULTS_ENTRY",
				value1 = "Money Order");
		}

		task ("When the user clicks on the Remove button next to the Payment Method") {
			Button.clickRemove();
		}

		task ("Then the Default Account Commerce Payment Method should be 'Use Priority Settings'") {
			AssertTextEquals(
				key_defaultOption = "Default Account Commerce Payment Methods",
				locator1 = "CommerceEntry#ACCOUNT_ORDER_DEFAULTS_ENTRY",
				value1 = "Use Priority Settings");
		}
	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWhereDefaultPaymentMethodIsDisabledIntoChannel {
		property portal.acceptance = "false";

		// TODO COMMERCE-8539 CompleteCheckoutWhereDefaultPaymentMethodIsDisabledIntoChannel pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWhereDefaultPaymentMethodIsNotPresentIntoOrderType {
		property portal.acceptance = "false";

		// TODO COMMERCE-8536 CompleteCheckoutWhereDefaultPaymentMethodIsNotPresentIntoOrderType pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWhereDefaultPaymentMethodIsPresentIntoOrderType {
		property portal.acceptance = "false";

		// TODO COMMERCE-8537 CompleteCheckoutWhereDefaultPaymentMethodIsPresentIntoOrderType pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWhereDefaultPaymentMethodIsPresentIntoOrderTypeButDisabledIntoChannel {
		property portal.acceptance = "false";

		// TODO COMMERCE-8538 CompleteCheckoutWhereDefaultPaymentMethodIsPresentIntoOrderTypeButDisabledIntoChannel pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test CompleteCheckoutWithDefaultPaymentMethod {
		property portal.acceptance = "false";

		// TODO COMMERCE-8535 CompleteCheckoutWithDefaultPaymentMethod pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test DeactivatePaymentMethodLinkedToAnAccount {
		property portal.acceptance = "false";

		// TODO COMMERCE-8545 DeactivatePaymentMethodLinkedToAnAccount pending implementation

	}

	@description = "[Please Update]"
	@ignore = "Test Stub"
	@priority = "4"
	test RemoveOfflinePaymentLinkedAsDefaultPaymentMethod {
		property portal.acceptance = "false";

		// TODO COMMERCE-8542 RemoveOfflinePaymentLinkedAsDefaultPaymentMethod pending implementation

	}

}