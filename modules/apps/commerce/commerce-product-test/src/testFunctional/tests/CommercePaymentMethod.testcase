@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		Navigator.openURL();

		if (IsElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE")) {
			User.logoutPG();
		}

		User.firstLoginPG();

		CommerceConfiguration.commerceAdminTearDown();

		CommerceConfiguration.commerceInitializersTearDown();
	}

	@description = "Verify once created, users can navigate to the Payment Methods page where new Offline Payment Methods can be Edited and Activated."
	@priority = "3"
	test ActivateOfflinePaymentMethodsAndAddDescription {
		property portal.acceptance = "false";

		task ("Given a Channel") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("And given a new offline payment method") {
			CommercePaymentMethods.addOfflinePaymentMethod(key = "Test Offline Payment Method");
		}

		task ("And given the System Integrator navigates to the channel details") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Channel");
		}

		task ("When the offline payment method is activated and a description is set") {
			CommerceChannels.activatePaymentMethod(paymentMethod = "Test Offline Payment Method");
		}

		task ("Then the status for the payment method should be active and the description should be set") {
			AssertElementPresent(
				key_entryDescription = "Pay with Test Offline Payment Method.",
				key_entryName = "Test Offline Payment Method",
				key_table = "Payment Methods",
				locator1 = "CommerceEntry#TABLE_ENTRY_DESCRIPTION");

			AssertElementPresent(
				key_entryName = "Test Offline Payment Method",
				key_entryStatus = "Active",
				key_table = "Payment Methods",
				locator1 = "CommerceEntry#TABLE_ENTRY_STATUS");
		}
	}

	@description = "Verify an offline payment method can be added, edited, and deleted from system settings"
	@priority = "3"
	test AddEditAndDeleteOfflinePaymentMethod {
		property portal.acceptance = "false";

		task ("Given the System Integrator navigates to the Offline Payment Method Keys configuration under the Payment category in System Settings") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Payment",
				configurationName = "Offline Payment Method Keys",
				configurationScope = "System Scope");
		}

		task ("When the the System Integrator clicks add") {
			Button.clickAdd();
		}

		task ("And a key is provided for the offline payment method") {
			Type(
				locator1 = "SystemSettings#KEY",
				value1 = "Test Offline Payment Method");
		}

		task ("And the save button is clicked") {
			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("Then the new entry is listed") {
			AssertElementPresent(
				key_configurationEntry = "Test Offline Payment Method",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}

		task ("When the the System Integrator edits the offline payment method and clicks update") {
			SystemSettings.gotoConfigurationEntry(configurationEntry = "Test Offline Payment Method");

			Type(
				locator1 = "SystemSettings#KEY",
				value1 = "Test Offline Payment Method 2");

			Button.clickUpdate();
		}

		task ("Then the updated entry is listed") {
			AssertElementPresent(
				key_configurationEntry = "Test Offline Payment Method 2",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}

		task ("When the the System Integrator deletes the offline payment method") {
			SystemSettings.deleteConfigurationEntry(configurationEntry = "Test Offline Payment Method 2");
		}

		task ("Then the entry should no longer be listed") {
			AssertElementNotPresent(
				key_configurationEntry = "Test Offline Payment Method 2",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}
	}

}