@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Add a Minium page with an Organization Management widget") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Organization Management Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Organization Management Widget Page",
				widgetName = "Organization Management");
		}

		task ("Setup: Add an organization") {
			JSONOrganization.addOrganization(
				organizationName = "Organization 1",
				organizationSite = "false");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-9402. Verify the store admin can associate existing accounts to an organization by using the Organization Management widget."
	@priority = "3"
	test CanAssociateExistingAccountUsingWidget {
		task ("Given an account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");
		}

		task ("When the Organization Management Widget Page is reached") {
			Navigator.openSitePage(
				pageName = "Organization Management Widget Page",
				siteName = "Minium");

			Click(locator1 = "Button#EXPAND");
		}

		task ("And the organization svg node is clicked") {
			Click(
				key_nodeName = "Organization 1",
				locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");
		}

		task ("And the plus button is clicked") {
			Click(locator1 = "CommerceOrganizationManagementWidget#PLUS_BUTTON");
		}

		task ("And the account svg node is clicked") {
			WaitForVisible(
				key_orgType = "account",
				locator1 = "CommerceOrganizationManagementWidget#NODE_ACTION");

			Click(
				key_orgType = "account",
				locator1 = "CommerceOrganizationManagementWidget#NODE_ACTION");
		}

		task ("Then the admin is able to select an existing account to be associated with the organization") {
			Click.clickAtNotVisible(
				key_radioOption = "Select Accounts",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_ACCOUNT_INPUT",
				value1 = "Commerce Account");

			KeyPress(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_ACCOUNT_INPUT",
				value1 = "\ENTER");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("And the account is present in the admin console") {
			AssertElementPresent(
				key_nodeName = "Commerce Account",
				locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");
		}
	}

	@description = "COMMERCE-9401. Verify new accounts can be created using the Organization Management widget."
	@priority = "3"
	test CanCreateAccountUsingWidget {
		task ("When the Organization Management Widget Page is reached") {
			Navigator.openSitePage(
				pageName = "Organization Management Widget Page",
				siteName = "Minium");

			Click(locator1 = "Button#EXPAND");
		}

		task ("And the organization svg node is clicked") {
			Click(
				key_nodeName = "Organization 1",
				locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");
		}

		task ("And the plus button is clicked") {
			Click(locator1 = "CommerceOrganizationManagementWidget#PLUS_BUTTON");
		}

		task ("And the account svg node is clicked") {
			WaitForVisible(
				key_orgType = "account",
				locator1 = "CommerceOrganizationManagementWidget#NODE_ACTION");

			Click(
				key_orgType = "account",
				locator1 = "CommerceOrganizationManagementWidget#NODE_ACTION");
		}

		task ("Then the admin is able to create a new account") {
			Click.clickAtNotVisible(
				key_radioOption = "Create New Account",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Type(
				locator1 = "TextInput#NAME",
				value1 = "Account 1");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("And the new account is present in the admin console") {
			AssertElementPresent(
				key_nodeName = "Account 1",
				locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");
		}
	}

	@description = "COMMERCE-9400. Verify new child organizations can be created using the Organization Management widget."
	@priority = "3"
	test CanCreateOrganizationUsingWidget {
		task ("When the Organization Management Widget Page is reached") {
			Navigator.openSitePage(
				pageName = "Organization Management Widget Page",
				siteName = "Minium");

			Click(locator1 = "Button#EXPAND");
		}

		task ("And the organization svg node is clicked") {
			Click(
				key_nodeName = "Organization 1",
				locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");
		}

		task ("And the plus button is clicked") {
			Click(locator1 = "CommerceOrganizationManagementWidget#PLUS_BUTTON");
		}

		task ("And the organization icon is clicked") {
			WaitForVisible(
				key_orgType = "organization",
				locator1 = "CommerceOrganizationManagementWidget#NODE_ACTION");

			Click(
				key_orgType = "organization",
				locator1 = "CommerceOrganizationManagementWidget#NODE_ACTION");
		}

		task ("Then the admin is able to create a new child organization") {
			Type(
				locator1 = "TextInput#NAME",
				value1 = "Child Org 1");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("And then the new child organization is present in the admin console") {
			AssertElementPresent(
				key_nodeName = "Child Org 1",
				locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");
		}
	}

	@description = "COMMERCE-9399. Verify organizations can be viewed in the Organization Management widget."
	@priority = "3"
	test CanViewOrganizationInWidget {
		task ("When the Organization Management Widget Page is reached") {
			Navigator.openSitePage(
				pageName = "Organization Management Widget Page",
				siteName = "Minium");

			Click(locator1 = "Button#EXPAND");
		}

		task ("Then the organization is shown within the widget") {
			AssertElementPresent(
				key_nodeName = "Organization 1",
				locator1 = "CommerceOrganizationManagementWidget#NODE_TITLE");
		}
	}

}