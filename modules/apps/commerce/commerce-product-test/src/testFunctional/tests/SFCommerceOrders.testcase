@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Commerce Account",
			accountEntryType = "Business");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Verify the order time is shown in the order date when the Show Order Creation Time toggle is checked in the Placed Orders widget."
	@priority = "3"
	test AssertDateAndTimeAreDisplayedAsOrderDate {
		property portal.acceptance = "false";

		task ("Given the Show Order Creation Time toggle is checked in the Placed Orders widget by default") {
			Navigator.openWithAppendToBaseURL(urlAppend = "group/minium/placed-orders");

			Portlet.gotoPortletOptions(
				portletName = "Placed Orders",
				portletOption = "Configuration");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Show Order Create Time",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		task ("And given a placed order") {
			Navigator.openWithAppendToBaseURL(urlAppend = "group/minium/catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When the user views the order from the Placed Orders page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "group/minium/placed-orders");
		}

		task ("Then the order date and time is shown") {
			var currentDate = DateUtil.getFormattedCurrentDate("MMM d, yyyy K", "UTC");

			AssertTextEquals.assertPartialText(
				key_orderId = "",
				locator1 = "CommerceOrders#PLACED_ORDERS_LIST_DATE",
				value1 = "${currentDate}");
		}

		task ("When the user views the order from the placed orders details page") {
			Button.click(button = "View");
		}

		task ("Then the order date and time is shown") {
			AssertTextEquals.assertPartialText(
				locator1 = "CommerceOrders#ORDER_DETAILS_DATE",
				value1 = "${currentDate}");
		}
	}

	@description = "Verify the order time isn't shown in the order date when the Show Order Creation Time toggle is unchecked in the Placed Orders widget."
	@priority = "3"
	test AssertDateIsDisplayedAsOrderDate {
		property portal.acceptance = "false";

		task ("Given the Show Order Creation Time toggle is unchecked in the Placed Orders widget") {
			Navigator.openWithAppendToBaseURL(urlAppend = "group/minium/placed-orders");

			Portlet.gotoPortletOptions(
				portletName = "Placed Orders",
				portletOption = "Configuration");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Order Create Time",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("And given a placed order") {
			Navigator.openWithAppendToBaseURL(urlAppend = "group/minium/catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When the user views the order from the Placed Orders page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "group/minium/placed-orders");
		}

		task ("Then the order date is shown without the time") {
			var currentDate = DateUtil.getFormattedCurrentDate("MMM d, yyyy");

			AssertTextEquals(
				key_orderId = "",
				locator1 = "CommerceOrders#PLACED_ORDERS_LIST_DATE",
				value1 = "${currentDate}");
		}

		task ("When the user views the order from the placed orders details page") {
			Button.click(button = "View");
		}

		task ("Then the order date is shown without the time") {
			AssertTextEquals(
				locator1 = "CommerceOrders#ORDER_DETAILS_DATE",
				value1 = "${currentDate}");
		}
	}

	@description = "Verify the Order Date Display configuration section is displayed in the Placed Orders widget."
	@priority = "3"
	test AssertOrderDateDisplayIsPresent {
		property portal.acceptance = "false";

		task ("When the user goes to the Placed Orders Page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "group/minium/placed-orders");
		}

		task ("And goes to the configuration segment of the Placed Orders widget") {
			Portlet.gotoPortletOptions(
				portletName = "Placed Orders",
				portletOption = "Configuration");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then the Order Date Display section is present with a checkbox named Show Order Creation Time") {
			AssertElementPresent(
				key_panel = "Order Date Display",
				locator1 = "CommerceEntry#CONFIGURATION_PANEL_EXPANDED");

			AssertElementPresent(
				key_toggleSwitchLabel = "Show Order Create Time",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "COMMERCE-6374. As a buyer, I want to be able to create a new order by clicking on 'Add Order' button"
	@priority = "3"
	test CreateNewOrderFromPendingOrdersPage {
		property portal.acceptance = "false";

		// TODO Review

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Click.mouseDownMouseUp(
			key_text = "Add Order",
			locator1 = "Button#ANY");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		AssertElementPresent(
			key_errorMessage = "Approved",
			locator1 = "WorkflowMetricsSLA#SLA_ERROR_MESSAGE");
	}

	@description = "COMMERCE-6380. As a buyer, I want to be able to delete an Order in Pending Order details page"
	@priority = "3"
	test DeleteOrderFromPendingOrderDetailsPage {
		property portal.acceptance = "Intern Test";

		// TODO Review

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Click(
			key_orderAuthor = "Commerce Account",
			locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

		ClickNoError(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Delete");

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		AssertElementNotPresent(
			key_orderAuthor = "Commerce Account",
			locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");
	}

	@description = "COMMERCE-6379. As a buyer, I want to be able to edit the order in Pending Order details page and I want to view the changes I made applied to order"
	@priority = "3"
	test EditOrderFromPendingOrderDetailsPage {
		property portal.acceptance = "false";

		Accounts.openAccountsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Commerce Account");

		CommerceEntry.gotoMenuTab(menuTab = "Addresses");

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "Test");

		SelectField.select(
			selectFieldLabel = "Type",
			selectFieldValue = "Billing and Shipping");

		Type(
			locator1 = "TextInput#STREET_1",
			value1 = "Test Street");

		Select(
			locator1 = "Select#COUNTRY",
			value1 = "Italy");

		Type(
			locator1 = "TextInput#CITY",
			value1 = "Roma");

		Select(
			locator1 = "Select#REGION",
			value1 = "Roma");

		Type(
			locator1 = "TextInput#POSTAL_CODE",
			value1 = "00100");

		Type(
			locator1 = "TextInput#NUMBER",
			value1 = "1234");

		Button.clickSave();

		Alert.viewSuccessMessage();

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Click(
			key_orderAuthor = "Commerce Account",
			locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

		Click(
			key_text = "billing-address-id",
			locator1 = "CommerceOrders#PENDING_ORDERS_BILLING_ADDRESS_DROPDOWN");

		Select(
			locator1 = "CommerceOrders#PENDING_ORDERS_BILLING_ADDRESS_DROPDOWN",
			value1 = "Test");

		Click(
			key_text = "shipping-address-id",
			locator1 = "CommerceOrders#PENDING_ORDERS_SHIPPING_ADDRESS_DROPDOWN");

		Select(
			locator1 = "CommerceOrders#PENDING_ORDERS_SHIPPING_ADDRESS_DROPDOWN",
			value1 = "Test");

		Button.clickSave();

		Refresh();

		ApplicationsMenu.gotoPortlet(
			category = "Order Management",
			panel = "Commerce",
			portlet = "Orders");

		Click(
			key_orderStatus = "Open",
			locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");

		CommerceEntry.clickNoError(menuItem = "View");

		var street = "Test Street";
		var city = "Roma, Roma, 00100";

		for (var address : list "${street},${city}") {
			AssertTextEquals.assertPartialText(
				key_titleName = "Billing Address",
				locator1 = "CommerceOrders#ORDER_GENERAL_DETAILS_DESCRIPTION",
				value1 = "${address}");
		}

		for (var address : list "${street},${city}") {
			AssertTextEquals.assertPartialText(
				key_titleName = "Shipping Address",
				locator1 = "CommerceOrders#ORDER_GENERAL_DETAILS_DESCRIPTION",
				value1 = "${address}");
		}
	}

	@description = "COMMERCE-6383. As a buyer, I want to be able to Reorder the Placed Order by clicking on 'Reorder' button"
	@priority = "3"
	test ReorderFromPlacedOrdersDetailsPage {
		property portal.acceptance = "true";

		// TODO Review

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		CommerceCheckout.gotoCheckout();

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		Click(
			key_text = "Go to Order Details",
			locator1 = "Button#ANY");

		Click(
			key_text = "Reorder",
			locator1 = "Button#ANY");

		for (var iterator : list "1,2,3,4,5") {
			if ("${iterator}" == "2") {
				Click(
					key_radioOption = "Standard",
					locator1 = "CommerceEntry#RADIO_BUTTON");
			}
			else {
				Click(locator1 = "Button#CONTINUE");
			}
		}

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

		AssertTextEquals(
			locator1 = "CommerceEntry#PAGINATION_RESULTS",
			value1 = "Showing 1 to 2 of 2");
	}

	@description = "COMMERCE-6375. As a buyer, I want to be able to search for one pending order using the search bar"
	@priority = "3"
	test SearchOrderInPendingOrdersPage {
		property portal.acceptance = "false";

		// TODO Review

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Click.mouseDownMouseUp(
			key_text = "Add Order",
			locator1 = "Button#ANY");

		SelectFrameTop();

		var firstOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		Click.mouseDownMouseUp(
			key_text = "Add Order",
			locator1 = "Button#ANY");

		SelectFrameTop();

		var secondOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		CommerceNavigator.searchEntry(entryName = "${firstOrderId}");

		AssertElementPresent(
			key_errorMessage = "${firstOrderId}",
			locator1 = "WorkflowMetricsSLA#SLA_ERROR_MESSAGE");

		AssertElementNotPresent(
			key_errorMessage = "${secondOrderId}",
			locator1 = "WorkflowMetricsSLA#SLA_ERROR_MESSAGE");
	}

	@description = "COMMERCE-6381. As a buyer, I want to be able to search for one placed order using the search bar"
	@priority = "3"
	test SearchOrderInPlacedOrdersPage {
		property portal.acceptance = "false";

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();

		SelectFrameTop();

		var firstOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		CommerceCheckout.gotoCheckout();

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();

		SelectFrameTop();

		var secondOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "Transmission Cooler Line Assembly",
			productQuantity = "2");

		CommerceCheckout.gotoCheckout();

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "Transmission Cooler Line Assembly",
			productQuantity = "2",
			productUnitPrice = "15",
			shippingMethod = "Standard");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

		CommerceNavigator.searchEntry(entryName = "${firstOrderId}");

		AssertElementPresent(
			key_entryName = "${firstOrderId}",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		AssertElementNotPresent(
			key_entryName = "${secondOrderId}",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");
	}

	@description = "COMMERCE-6665. I want to be able to select a Display Template in Pending Orders widget and see it applied to the widget"
	@priority = "3"
	test UseADTInPendingOrdersWidget {
		property portal.acceptance = "false";

		ApplicationsMenu.gotoSite(site = "Minium");

		ProductMenu.gotoPortlet(
			category = "Design",
			portlet = "Templates");

		Navigator.gotoNavTab(navTab = "Widget Templates");

		CommerceAcceleratorsInitializer.addADT(
			adtType = "Open Carts",
			fieldNameList = "Commerce Orders*");

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		var orderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

		ApplicationDisplayTemplates.selectPortletADT(
			portletName = "Open Carts",
			templateName = "Open Carts Test ADT");

		AssertTextEquals.assertPartialText(
			key_portletName = "Open Carts",
			locator1 = "Portlet#BODY",
			value1 = "${orderId}");
	}

	@description = "COMMERCE-6666. I want to be able to select a Display Template in Placed Orders widget and see it applied to the widget"
	@priority = "3"
	test UseADTInPlacedOrdersWidget {
		property portal.acceptance = "false";

		ApplicationsMenu.gotoSite(site = "Minium");

		ProductMenu.gotoPortlet(
			category = "Design",
			portlet = "Templates");

		Navigator.gotoNavTab(navTab = "Widget Templates");

		CommerceAcceleratorsInitializer.addADT(
			adtType = "Placed Orders",
			fieldNameList = "Commerce Orders*");

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		var orderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

		CommerceCheckout.gotoCheckout();

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

		ApplicationDisplayTemplates.selectPortletADT(
			portletName = "Placed Orders",
			templateName = "Placed Orders Test ADT");

		AssertTextEquals.assertPartialText(
			key_portletName = "Placed Orders",
			locator1 = "Portlet#BODY",
			value1 = "${orderId}");
	}

	@description = "COMMERCE-6382. As a buyer, I want to be able to see the list of shipments for an order item by clicking on 'Shipments'"
	@priority = "3"
	test ViewListOfShipmentsInPlacedOrdersDetailsPage {
		property portal.acceptance = "true";

		// TODO Review

		ApplicationsMenu.gotoSite(site = "Minium");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");

		CommerceCheckout.gotoCheckout();

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		Click(
			key_text = "Accept Order",
			locator1 = "Button#ANY");

		CommerceOrders.createShipment(
			carrierDetail = "Test Carrier",
			complement = "Deliver",
			productSkuList = "MIN55861",
			warehouseName = "Italy");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

		Click(
			key_orderAuthor = "Commerce Account",
			locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

		ClickNoError(
			key_entryName = "U-Joint",
			locator1 = "CommerceEntry#ENTRY_NAME_BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Shipments");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertVisible(
			key_title = "Shipments",
			locator1 = "Header#H2_TITLE");

		for (var currentRow : list "status;Delivered,carrier;Test Carrier,tracking-number;Test Tracking Number") {
			var currentColumn = StringUtil.extractFirst("${currentRow}", ";");
			var currentValue = StringUtil.extractLast("${currentRow}", ";");

			AssertTextEquals(
				key_columnName = "${currentColumn}",
				key_tableEntry = "",
				locator1 = "LexiconTable#TABLE_ENTRY_INFO",
				value1 = "${currentValue}");
		}
	}

}