@component-name = "portal-commerce"
definition {

    property osgi.module.configuration.file.names = "com.liferay.commerce.product.configuration.CProductVersionConfiguration.config";
    property osgi.module.configurations = "enabled=B&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

    @description = "This is a test for the story COMMERCE-9376, with the testplan COMMERCE-9534 and test ticket COMMERCE-9535"
	@priority = "3"
	test CanCheckVersionableProductSaveAsDraftButton {
        property portal.acceptance = "false";

        task ("When the Admin goes into the Commerce -> Products and create a new simple product") {
            CommerceNavigator.gotoPortlet(
			    category = "Product Management",
			    portlet = "Products");

		    CPCommerceCatalog.newProductsEntry(
			    productCatalog = "Master",
			    productName = "Simple T-Shirt",
			    productType = "Simple");
        }

        task ("Then the admin now will see two buttons 'Save as Draft' and 'Publish'") {
            AssertElementPresent(
			    key_text = "Publish",
			    locator1 = "Button#ANY");

            AssertElementPresent(
			    key_text = "Save as Draft",
			    locator1 = "Button#ANY");       
        }
    }

    @description = "This is a test for the story COMMERCE-9376, with the testplan COMMERCE-9534 and test ticket COMMERCE-9537"
	@priority = "3"
	test CanCreateNewVersionableProductDraftVersion { 
        property portal.acceptance = "false";

        task ("Given the admin has already created a new simple product") {
           CommerceNavigator.gotoPortlet(
			    category = "Product Management",
			    portlet = "Products");

		    CPCommerceCatalog.newProductsEntry(
			    productCatalog = "Master",
			    productName = "Simple T-Shirt",
			    productType = "Simple");

            var approvedProductId = selenium.getText("CommerceEntry#PRODUCT_ID");
        }

        task ("And click on 'Save as Draft'") {
            Click(
			    key_text = "Save as Draft",
			    locator1 = "Button#ANY");        
        }

        task ("Then the admin will be redirected to the new page of the version of the product (see IDs difference) ") {
            AssertElementPresent(
			    key_status = "Draft",
			    locator1 = "CommerceEntry#WORKFLOW_STATUS");  

            var draftProductId = selenium.getText("CommerceEntry#PRODUCT_ID");

            CommerceProducts.checkProductIdsNotEqual(
                firstProductId = "${approvedProductId}",
                secondProductId = "${draftProductId}");         
        }

        task ("if the admin goes back, he will find two products with the same name where the first is approved, and the second is draft") {
            Navigator.gotoBack();

            CommerceProducts.checkProductsPresent(list = "Simple T-Shirt:Approved,Simple T-Shirt:Draft");

            CommerceProducts.checkProductId(list = "Simple T-Shirt:Approved:${approvedProductId},Simple T-Shirt:Draft:${draftProductId}");
        }

    }
}