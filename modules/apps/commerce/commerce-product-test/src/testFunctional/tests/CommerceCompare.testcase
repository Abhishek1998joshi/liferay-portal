@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-5912. Verify buyers can select a product for comparison from the product's details page."
	@priority = "3"
	test AddComparisonItemFromProductDetailsPage {
		property portal.acceptance = "false";

		// TODO Review

		task ("Given the buyer goes to a product's details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Transmission Fluid");
		}

		task ("When the buyer clicks on the comparison checkbox") {
			Click.clickAtNotVisible(
				checkboxName = "Compare",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Then the product is selected for comparison") {
			FrontStore.assertMiniCompareItems(products = "Transmission Fluid");
		}
	}

	@description = "COMMERCE-5911. Verify products selected for comparison are visible in the mini compare widget at the bottom of the page."
	@priority = "3"
	test AssertComparisonItemsAreVisibleOnMiniCompare {
		property portal.acceptance = "false";

		// TODO Review

		task ("When multiple products are selected for comparison") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.compareProducts(
				clickCompare = "false",
				products = "U-Joint,Transmission Fluid");
		}

		task ("Then those products are visible in the mini compare widget") {
			FrontStore.assertMiniCompareItems(products = "U-Joint,Transmission Fluid");
		}
	}

	@description = "COMMERCE-5915. As a buyer, I want to see max number of compare items allowed in Compare page"
	@ignore = "true"
	@priority = "3"
	test EditMaxNumberOfComparisonItemsInComparePage {
		property portal.acceptance = "false";

		// TODO COMMERCE-5915 EditMaxNumberOfComparisonItemsInComparePage pending implementation

	}

	@description = "COMMERCE-5916. As a buyer, I want to see max number of compare items allowed in MiniCompare widget"
	@ignore = "true"
	@priority = "3"
	test EditMaxNumberOfComparisonItemsInMiniCompare {
		property portal.acceptance = "false";

		// TODO COMMERCE-5916 EditMaxNumberOfComparisonItemsInMiniCompare pending implementation

	}

	@description = "COMMERCE-5918. As a buyer, I want to deselect a item in Product Compare page"
	@ignore = "true"
	@priority = "3"
	test RemoveComparisonItemFromComparePage {
		property portal.acceptance = "false";

		// TODO COMMERCE-5918 RemoveComparisonItemFromComparePage pending implementation

	}

	@description = "COMMERCE-5913. Verify buyers can deselect items that are being compared from the MiniCompare widget."
	@priority = "3"
	test RemoveComparisonItemFromMiniCompare {
		property portal.acceptance = "false";

		task ("Given multiple products are selected for comparison") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.compareProducts(
				clickCompare = "false",
				products = "U-Joint,Transmission Fluid");
		}

		task ("When the buyer clicks on the X button on a product in the mini compare widget") {
			var transmissionFluidImageId = CommerceJSONProductsAPI._getCommerceProductImageIds(productName = "Transmission Fluid");

			Click(
				key_productMediaId = "${transmissionFluidImageId}",
				locator1 = "CommerceFrontStore#MINI_COMPARE_ITEM_REMOVE_BUTTON");
		}

		task ("Then that product is removed from the comparison") {
			AssertElementNotPresent(
				key_productMediaId = "${transmissionFluidImageId}",
				locator1 = "CommerceFrontStore#MINI_COMPARE_ITEM_CUSTOM_IMAGE");

			Button.click(button = "Compare");

			AssertElementNotPresent(
				key_productName = "transmission-fluid",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");
		}
	}

	@description = "COMMERCE-5914. As a buyer, I want to deselect a item in Product Details for compare in Product Widget"
	@priority = "3"
	test RemoveComparisonItemFromProductDetailsPage {
		property portal.acceptance = "true";

		CommerceProducts.openProductsAdmin();

		CommerceNavigator.searchEntry(entryName = "U-Joint");

		CommerceNavigator.gotoEntry(entryName = "U-Joint");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceNavigator.gotoEntry(entryName = "Minium_ProductImage_64.png");

		var firstProductFileEntryId = CommerceProductImages.getProductMediaId();

		Click(locator1 = "Icon#BACK");

		CommerceNavigator.searchEntry(entryName = "Transmission Fluid");

		CommerceNavigator.gotoEntry(entryName = "Transmission Fluid");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceNavigator.gotoEntry(entryName = "Minium_ProductImage_103.png");

		var secondProductFileEntryId = CommerceProductImages.getProductMediaId();

		ApplicationsMenu.gotoSite(site = "Minium");

		Click.clickAtNotVisible(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_COMPARE_CHECKBOX");

		Click.clickAtNotVisible(
			key_productName = "Transmission Fluid",
			locator1 = "CommerceEntry#PRODUCT_CARD_COMPARE_CHECKBOX");

		CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");

		AssertElementPresent(
			key_productMediaId = "${firstProductFileEntryId}",
			locator1 = "CommerceFrontStore#MINI_COMPARE_ITEM_CUSTOM_IMAGE");

		AssertElementPresent(
			key_productMediaId = "${secondProductFileEntryId}",
			locator1 = "CommerceFrontStore#MINI_COMPARE_ITEM_CUSTOM_IMAGE");

		AssertChecked.assertCheckedNotVisible(
			checkboxName = "Compare",
			locator1 = "Checkbox#ANY_CHECKBOX_CHECKED");

		Click.clickAtNotVisible(
			checkboxName = "Compare",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertElementNotPresent(
			key_productMediaId = "${firstProductFileEntryId}",
			locator1 = "CommerceFrontStore#MINI_COMPARE_ITEM_CUSTOM_IMAGE");
	}

	@description = "COMMERCE-6662. I want to be able to use ADT to render Commerce Comparison Bar widget and I want to be able to select a Display Template and see it applied to the widget"
	@ignore = "true"
	@priority = "3"
	test UseADTInCommerceComparisonBarWidget {
		property portal.acceptance = "false";

		// TODO COMMERCE-6662 UseADTInCommerceComparisonBarWidget pending implementation

	}

	@description = "COMMERCE-6661. I want to be able to use ADT to render Commerce Comparison Table widget and I want to be able to select a Display Template and see it applied to the widget"
	@ignore = "true"
	@priority = "3"
	test UseADTInCommerceComparisonTableWidget {
		property portal.acceptance = "false";

		// TODO COMMERCE-6661 UseADTInCommerceComparisonTableWidget pending implementation

	}

	@description = "COMMERCE-5919. As a buyer, when comparing items in Compare page, I want to view product options and specifications, if set"
	@priority = "3"
	test ViewProductOptionsAndSpecificationsWhenComparingItemsInComparePage {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		Check.checkToggleSwitch(
			key_productName = "ABS Sensor",
			locator1 = "CommerceEntry#PRODUCT_CARD_COMPARE_CHECKBOX");

		Check.checkToggleSwitch(
			key_productName = "Brake Fluid",
			locator1 = "CommerceEntry#PRODUCT_CARD_COMPARE_CHECKBOX");

		Button.click(button = "Compare");

		AssertElementPresent(
			key_productName = "ABS Sensor",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");

		AssertElementPresent(
			key_productName = "Brake Fluid",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");
	}

}