definition {

    macro usePlusZoom {
        //Use "+" button

        CommerceDiagram.useResetZoom();

        CommerceDiagram.usePlusButton(key_list = "${key_list}");

	}

    macro useMinusZoom {
        //Use "-" button

        CommerceDiagram.useResetZoom();

		CommerceDiagram.useMinusButton(key_list = "${key_list}");
    }

    macro usePreDefinedZoom {
        //Use Pre-defined zoom values

        CommerceDiagram.useResetZoom();

        CommerceDiagram.usePreDefinedZoomValues(key_list = "${key_list}");
    }

    macro useResetZoom {

        var i = "0";

        Click(
            key_text = "Reset Zoom",
            locator1 = "Button#ANY");

        Pause(locator1 = "2000");
    
        var actual_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

        if("${actual_position}" == "translate(0,0) scale(1)" || "${actual_position}" == "translate(0, 0) scale(1,1)"){
            echo("The reset zoom position is correct");
        }
        else {
            fail("The reset zoom position is not correct: ${actual_position} expected position: translate(0,0) scale(1) OR translate(0, 0) scale(1,1))");
        }
    }

    macro usePlusButton {
        first_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

        for (var value : list "${key_list}") {
            Click(
                key_text = "+",
                locator1 = "Button#ANY");
        }

        second_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

        if("${first_position}" != "${second_position}") {
            echo("The position after click '+' button is correct");
        }
        else {
            fail("The position after click '+' button is not correct: ${second_position}, the expected position it must be different from ${first_position}");
        }
    }

    macro useMinusButton {
        first_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

		for (var value : list "${key_list}") {
			Click(
				key_text = "-",
				locator1 = "Button#ANY");		
		}

		second_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

		if("${first_position}" != "${second_position}") {
			echo("The position after click '-' button is correct");
		}
		else {
			fail("The position after click '-' button is not correct: ${second_position}, the expected position it must be different from ${first_position}");
		}
    }

    macro usePreDefinedZoomValues {
		for (var zoom : list "${key_list}") {

            first_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

			Select(
				locator1 = "CommerceEntry#DIAGRAM_ZOOM_SELECT",
				value1 = "${zoom}");

			second_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");
			
			if("${first_position}" != "${second_position}") {
				echo("The position is correct for ${zoom}");
			}
			else {
				fail("The position for the zoom: ${zoom} is not correct: ${second_position}, the expected position it must be different from ${first_position}");
			}
		}
    }

    macro useDragOnBackground {
        //Verify the postion after mouse drag

        CommerceDiagram.useResetZoom();

        first_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

        DragAndDrop.dragAndDropReorganizeObjects(
			key_image = "${image_name}",
			position = "${position}",
			locator1 = "CommerceEntry#VERIFY_IMAGE",
			locator2 = "CommerceEntry#VERIFY_IMAGE");

		second_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

		if("${first_position}" != "${second_position}") {
			echo("The position after the drag is correct");
		}
		else {
			fail("The position after the drag is not correct: ${second_position}, the expected position it must be different from ${first_position}");
		}
    }

    macro useDragOnBackgroundByDirectionController {
        //Verify the postion after mouse drag using the direction controller

        CommerceDiagram.useResetZoom();

        first_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

        for (var value : list "${key_list}") {
			Click(
				key_direction = "${direction}",
				locator1 = "CommerceEntry#DIAGRAM_MOVE_CONTROLLER");
		}

		second_position = selenium.getAttribute("//div[contains(@class,'diagram-pins-container')]//*[name()='svg']//*[name()='g']@transform");

		if("${first_position}" != "${second_position}") {
			echo("The position after the using the direction controller is different from the previous one");
		}
		else {
			fail("The position after the drag by using the direction controller is not correct: ${second_position}, the expected position it must be different from ${first_position}");
		}
    }

}