/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.document.library.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.document.library.model.DLFileEntryPreview;
import com.liferay.document.library.model.DLFileEntryPreviewModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DLFileEntryPreview service. Represents a row in the &quot;DLFileEntryPreview&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DLFileEntryPreviewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DLFileEntryPreviewImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DLFileEntryPreviewImpl
 * @see DLFileEntryPreview
 * @see DLFileEntryPreviewModel
 * @generated
 */
@ProviderType
public class DLFileEntryPreviewModelImpl extends BaseModelImpl<DLFileEntryPreview>
	implements DLFileEntryPreviewModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dl file entry preview model instance should use the {@link DLFileEntryPreview} interface instead.
	 */
	public static final String TABLE_NAME = "DLFileEntryPreview";
	public static final Object[][] TABLE_COLUMNS = {
			{ "fileEntryPreviewId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "fileEntryId", Types.BIGINT },
			{ "fileVersionId", Types.BIGINT },
			{ "previewType", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fileEntryPreviewId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("previewType", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table DLFileEntryPreview (fileEntryPreviewId LONG not null primary key,groupId LONG,fileEntryId LONG,fileVersionId LONG,previewType INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table DLFileEntryPreview";
	public static final String ORDER_BY_JPQL = " ORDER BY dlFileEntryPreview.fileEntryPreviewId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY DLFileEntryPreview.fileEntryPreviewId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.document.library.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.document.library.model.DLFileEntryPreview"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.document.library.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.document.library.model.DLFileEntryPreview"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.document.library.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.document.library.model.DLFileEntryPreview"),
			true);
	public static final long FILEENTRYID_COLUMN_BITMASK = 1L;
	public static final long FILEVERSIONID_COLUMN_BITMASK = 2L;
	public static final long PREVIEWTYPE_COLUMN_BITMASK = 4L;
	public static final long FILEENTRYPREVIEWID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.document.library.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.document.library.model.DLFileEntryPreview"));

	public DLFileEntryPreviewModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fileEntryPreviewId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFileEntryPreviewId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fileEntryPreviewId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DLFileEntryPreview.class;
	}

	@Override
	public String getModelClassName() {
		return DLFileEntryPreview.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fileEntryPreviewId", getFileEntryPreviewId());
		attributes.put("groupId", getGroupId());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("fileVersionId", getFileVersionId());
		attributes.put("previewType", getPreviewType());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long fileEntryPreviewId = (Long)attributes.get("fileEntryPreviewId");

		if (fileEntryPreviewId != null) {
			setFileEntryPreviewId(fileEntryPreviewId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		Long fileVersionId = (Long)attributes.get("fileVersionId");

		if (fileVersionId != null) {
			setFileVersionId(fileVersionId);
		}

		Integer previewType = (Integer)attributes.get("previewType");

		if (previewType != null) {
			setPreviewType(previewType);
		}
	}

	@Override
	public long getFileEntryPreviewId() {
		return _fileEntryPreviewId;
	}

	@Override
	public void setFileEntryPreviewId(long fileEntryPreviewId) {
		_columnBitmask = -1L;

		_fileEntryPreviewId = fileEntryPreviewId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_columnBitmask |= FILEENTRYID_COLUMN_BITMASK;

		if (!_setOriginalFileEntryId) {
			_setOriginalFileEntryId = true;

			_originalFileEntryId = _fileEntryId;
		}

		_fileEntryId = fileEntryId;
	}

	public long getOriginalFileEntryId() {
		return _originalFileEntryId;
	}

	@Override
	public long getFileVersionId() {
		return _fileVersionId;
	}

	@Override
	public void setFileVersionId(long fileVersionId) {
		_columnBitmask |= FILEVERSIONID_COLUMN_BITMASK;

		if (!_setOriginalFileVersionId) {
			_setOriginalFileVersionId = true;

			_originalFileVersionId = _fileVersionId;
		}

		_fileVersionId = fileVersionId;
	}

	public long getOriginalFileVersionId() {
		return _originalFileVersionId;
	}

	@Override
	public int getPreviewType() {
		return _previewType;
	}

	@Override
	public void setPreviewType(int previewType) {
		_columnBitmask |= PREVIEWTYPE_COLUMN_BITMASK;

		if (!_setOriginalPreviewType) {
			_setOriginalPreviewType = true;

			_originalPreviewType = _previewType;
		}

		_previewType = previewType;
	}

	public int getOriginalPreviewType() {
		return _originalPreviewType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DLFileEntryPreview.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DLFileEntryPreview toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DLFileEntryPreview)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DLFileEntryPreviewImpl dlFileEntryPreviewImpl = new DLFileEntryPreviewImpl();

		dlFileEntryPreviewImpl.setFileEntryPreviewId(getFileEntryPreviewId());
		dlFileEntryPreviewImpl.setGroupId(getGroupId());
		dlFileEntryPreviewImpl.setFileEntryId(getFileEntryId());
		dlFileEntryPreviewImpl.setFileVersionId(getFileVersionId());
		dlFileEntryPreviewImpl.setPreviewType(getPreviewType());

		dlFileEntryPreviewImpl.resetOriginalValues();

		return dlFileEntryPreviewImpl;
	}

	@Override
	public int compareTo(DLFileEntryPreview dlFileEntryPreview) {
		int value = 0;

		if (getFileEntryPreviewId() < dlFileEntryPreview.getFileEntryPreviewId()) {
			value = -1;
		}
		else if (getFileEntryPreviewId() > dlFileEntryPreview.getFileEntryPreviewId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DLFileEntryPreview)) {
			return false;
		}

		DLFileEntryPreview dlFileEntryPreview = (DLFileEntryPreview)obj;

		long primaryKey = dlFileEntryPreview.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DLFileEntryPreviewModelImpl dlFileEntryPreviewModelImpl = this;

		dlFileEntryPreviewModelImpl._originalFileEntryId = dlFileEntryPreviewModelImpl._fileEntryId;

		dlFileEntryPreviewModelImpl._setOriginalFileEntryId = false;

		dlFileEntryPreviewModelImpl._originalFileVersionId = dlFileEntryPreviewModelImpl._fileVersionId;

		dlFileEntryPreviewModelImpl._setOriginalFileVersionId = false;

		dlFileEntryPreviewModelImpl._originalPreviewType = dlFileEntryPreviewModelImpl._previewType;

		dlFileEntryPreviewModelImpl._setOriginalPreviewType = false;

		dlFileEntryPreviewModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DLFileEntryPreview> toCacheModel() {
		DLFileEntryPreviewCacheModel dlFileEntryPreviewCacheModel = new DLFileEntryPreviewCacheModel();

		dlFileEntryPreviewCacheModel.fileEntryPreviewId = getFileEntryPreviewId();

		dlFileEntryPreviewCacheModel.groupId = getGroupId();

		dlFileEntryPreviewCacheModel.fileEntryId = getFileEntryId();

		dlFileEntryPreviewCacheModel.fileVersionId = getFileVersionId();

		dlFileEntryPreviewCacheModel.previewType = getPreviewType();

		return dlFileEntryPreviewCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{fileEntryPreviewId=");
		sb.append(getFileEntryPreviewId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", fileVersionId=");
		sb.append(getFileVersionId());
		sb.append(", previewType=");
		sb.append(getPreviewType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.document.library.model.DLFileEntryPreview");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fileEntryPreviewId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryPreviewId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileVersionId</column-name><column-value><![CDATA[");
		sb.append(getFileVersionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previewType</column-name><column-value><![CDATA[");
		sb.append(getPreviewType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DLFileEntryPreview.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DLFileEntryPreview.class, ModelWrapper.class
		};
	private long _fileEntryPreviewId;
	private long _groupId;
	private long _fileEntryId;
	private long _originalFileEntryId;
	private boolean _setOriginalFileEntryId;
	private long _fileVersionId;
	private long _originalFileVersionId;
	private boolean _setOriginalFileVersionId;
	private int _previewType;
	private int _originalPreviewType;
	private boolean _setOriginalPreviewType;
	private long _columnBitmask;
	private DLFileEntryPreview _escapedModel;
}