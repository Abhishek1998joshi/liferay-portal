import com.liferay.gradle.util.Validator

import groovy.time.TimeCategory
import groovy.time.TimeDuration

import java.util.regex.Matcher

import org.gradle.util.GUtil
import org.gradle.util.VersionNumber

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

task buildChangelogs
task recordCommits

buildChangelogs {
	dependsOn recordCommits

	description = "Builds the changelogs for each published version in 'CHANGELOG.markdown'."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		String text = "# " + GUtil.loadProperties(new File("sdk/${projectName}/bnd.bnd"))["Bundle-Name"] + " Change Log"

		String commitRange = ""
		String version = ""

		File changelogCommitsFile = file("sdk/" + projectName + "/CHANGELOG.commits")

		File changelogDescriptionsFile = file("sdk/" + projectName + "/CHANGELOG.descriptions")

		changelogCommitsFile.getText("UTF-8").split("\n").reverse().each {
			String recordCommitLine ->

			Matcher matcher = recordCommitLine =~ /(\d+\.\d+\.\d+):([a-f0-9]+\.\.[a-f0-9]+)/

			if (matcher.find()) {
				commitRange = matcher.group(2)
				version = matcher.group(1)
			}

			ByteArrayOutputStream standardOutputByteArrayOutputStream = new ByteArrayOutputStream()

			exec {
				commandLine "git", "--no-pager", "log", "--follow", "--pretty=format:%H:%cd:%s", "--date=short", "-p", "${commitRange}", "--", "modules/sdk/${projectName}/build.gradle"
				standardOutput = standardOutputByteArrayOutputStream
				workingDir = projectDir.parentFile
			}

			String gitLogOutput = standardOutputByteArrayOutputStream.toString()

			String commits = ""
			String dependencies = ""
			String descriptions = ""
			String publishDate = ""
			String ticket = ""

			gitLogOutput.eachLine {
				String gitLogLine ->

				matcher = gitLogLine =~ /([a-f0-9]+):(.+):([A-Z]+-\d+)(.*)/

				if (matcher.find()) {
					publishDate = matcher.group(2)
					ticket = matcher.group(3)

					if (matcher.group(4) ==~ /(?!.*([Pp]rep next|[Uu]se (\d+\.\d+\.\d+|latest))).*/) {
						commits = commits + """\
							|
							|- [${ticket}]: ${matcher.group(4).trim()} (${matcher.group(1).substring(0, 10)})""".stripMargin()
					}
				}

				matcher = gitLogLine =~ /\+\s*.+ group: .*, name: \"(.+)", version: \"(\d+\.\d+\.\d+)\"/

				if (matcher.find()) {
					String dependencyName = matcher.group(1)
					String dependencyVersion = matcher.group(2)

					dependencies = dependencies + """\
						|
						|- [${ticket}]: Update the ${dependencyName} dependency to version ${dependencyVersion}.""".stripMargin()
				}
			}

			if (changelogDescriptionsFile.exists()) {
				matcher = changelogDescriptionsFile.text =~ /(?s)${version}:description(.+?)(?:(?=\d+\.\d+\.\d+:description)|$)/

				if (matcher.find()) {
					descriptions = "\n" + matcher.group(1).trim()

					if (Validator.isNull(publishDate)) {
						String endRange = commitRange.split("\\.\\.")[1]

						exec {
							commandLine "git", "log", "-1", "--pretty=format:%H:%cd:%s", "--date=short", "${endRange}"
							standardOutput = standardOutputByteArrayOutputStream
							workingDir = projectDir.parentFile
						}

						publishDate = standardOutputByteArrayOutputStream.toString().split(":")[1]
					}

				}
			}

			if ((commits.length() > 0) || (dependencies.length() > 0) || (descriptions.length() > 0)) {
				text += """\
					|
					|
					|## ${version} - ${publishDate}""".stripMargin()
			}

			if (commits.length() > 0) {
				text += """\
					|
					|
					|### Commits""".stripMargin()

				text += commits
			}

			if (dependencies.length() > 0) {
				text += """\
					|
					|
					|### Dependencies""".stripMargin()

				text += dependencies
			}

			if (descriptions.length() > 0) {
				text += """\
					|
					|
					|### Description""".stripMargin()

				text += descriptions
			}
		}

		File changelogMarkdownFile = file("sdk/" + projectName + "/CHANGELOG.markdown")

		changelogMarkdownFile.text = text.replaceAll(/(\n(?=.{80,}).{1,80})[ \t]+(.*)/) {
			String all, String s1, String s2 ->

			"${s1}\n${s2}"
		}

		logger.lifecycle "Updated '{}'", changelogMarkdownFile
	}
}

recordCommits {
	description = "Records the commit ID for each published version in 'CHANGELOG.commits'."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		ByteArrayOutputStream standardOutputByteArrayOutputStream = new ByteArrayOutputStream()

		exec {
			commandLine "git", "--no-pager", "log", "--date=rfc2822", "--follow", "--format=fuller", "-p", "--", "modules/sdk/" + projectName + "/"
			standardOutput = standardOutputByteArrayOutputStream
			workingDir = projectDir.parentFile
		}

		String gitLogOutput = standardOutputByteArrayOutputStream.toString()

		List<String> commits = gitLogOutput.split("\ncommit ")

		String lastVersionCommitId = null
		VersionNumber lastVersionNumber = null
		Map<VersionNumber, String> recordCommitIDs = [:]

		Closure<Void> getPublishedVersionNumberClosure = {
			String diff, String projectName ->

			int x = diff.indexOf("/" + projectName + "/bnd.bnd");
			int y = diff.indexOf("-Bundle-Version: ", x)

			if ((x != -1) && (y != -1)) {
				return VersionNumber.parse(diff.substring(y + 17, diff.indexOf("\n", y)))
			}

			return null
		}

		for (int i = 0; i < (commits.size() - 1); i++) {
			String commit = commits.get(i)

			String[] lines = commit.split("\n", 8)

			VersionNumber publishedVersionNumber = getPublishedVersionNumberClosure(lines[7], projectName)

			if ((publishedVersionNumber != null) && !recordCommitIDs.containsKey(publishedVersionNumber) && (publishedVersionNumber.major > 0) && ((lastVersionNumber == null) || (publishedVersionNumber.compareTo(lastVersionNumber) < 0))) {
				String commitDateString = lines[4]
				String commitId = lines[0]

				Date commitDate = Date.parse("E, d MMM yyyy H:m:s Z", commitDateString.substring(12))

				for (int j = i - 1; j >= 0; j--) {
					String previousCommit = commits.get(j)

					lines = previousCommit.split("\n", 8)

					String previousCommitMessage = lines[6]

					if (!previousCommitMessage.contains("prep next") || (getPublishedVersionNumberClosure(lines[7], projectName) != null)) {
						break
					}

					String previousCommitDateString = lines[4]

					Date previousCommitDate = Date.parse("E, d MMM yyyy H:m:s Z", previousCommitDateString.substring(12))

					TimeDuration duration = TimeCategory.minus(previousCommitDate, commitDate)

					if (duration.toMilliseconds() > 1800000) {
						break
					}

					commitId = lines[0]
				}

				if (lastVersionNumber != null) {
					recordCommitIDs.put(lastVersionNumber, commitId + ".."  + lastVersionCommitId)
				}

				lastVersionCommitId = commitId
				lastVersionNumber = publishedVersionNumber
			}
		}

		File changelogCommitsFile = file("sdk/" + projectName + "/CHANGELOG.commits")

		changelogCommitsFile.text = recordCommitIDs.collect {
			VersionNumber versionNumber, String commitIds ->

			"${versionNumber}:${commitIds}"
		} join "\n"

		logger.lifecycle "Updated '{}'", changelogCommitsFile
	}
}