@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testSiteTamplate = "Liferay OSB Site Initializer Customer Portal";
	var testUser = "Test Test";
	var userFirstName = "Test";
	var testAccount = "Test Account DXP";
	var testProduct = "DXP";

    setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Login on OKTA") {
			CustomerPortal.loginOktaToUpdateCP();
		}

		task ("Go to Customer Portal Site") {
			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");

			CustomerPortal.waitCP20PageToLoad(userFirstName = "${userFirstName}");
		}

		task ("I go to the test account") {
			CustomerPortal.search(searchItem = "${testAccount}");

			CustomerPortal.enterOnProject(title = "${testAccount}");
		}

		task ("I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");
		}

		task ("I generate a new key") {
			CP2ActivationKeys.generateNewKey();
		}

		task ("I fulfill first phase form for Generate New License") {
			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Version",
				option = "7.4");

			CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
				field = "Key Type",
				option = "Production");

			CP2ActivationKeys.selectFistActiveSubscriptionInput();

			CustomerPortal.clickAtButton(text = "Next");
		}
    }

    tearDown {

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONGroup.deleteGroupByName(groupName = "${testSiteName}");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Automation ID: LPS-157445 | Test Summary: Verify if the fields (Environment Name - Host Name) are required"
	@priority = "5"
	test CanViewAMandatoryMessageForBothFields {
		task ("Given I go to next form at Genarate New Key") {
			CustomerPortal.clickAtButton(text = "Next");
		}

		task ("And The Generate button should be deactivated") {
			CustomerPortal.assertButtonIsDisabled(text = "Generate 1 Key");
		}

		task ("And I fulfill the Environment and Host name fields") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				field = "Environment Name",
				content = "Environment Test Name");

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				field = "Host Name",
				content = "localhost");
		}

		task ("Then The Generate button should be active") {
			CustomerPortal.assertButtonIsActive(text = "Generate 1 Key");
		}

		task ("When I erase the Environment Name field content") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				field = "Environment Name",
				content = "");
		}

		task ("Then I should see the alert with the text 'This field is required.'") {
			CustomerPortal.assertErrorMessageIsVisible(errorMessage = "This field is required.");
		}

		task ("And The Generate button should be deactivated") {
			CustomerPortal.assertButtonIsDisabled(text = "Generate 1 Key");
		}

		task ("When I erase the Host Name field content") {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				field = "Host Name",
				content = "");
		}

		task ("Then The Generate button should be deactivated") {
			CustomerPortal.assertButtonIsDisabled(text = "Generate 1 Key");
		}
	}
}