@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "Test Account DXP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		CustomerPortal.customerPortalApisTearDown();

		JSONGroup.deleteGroupByName(groupName = "${testSiteName}");

		PortalInstances.tearDownCP();
	}

	@description = "LPS-148064 - Verify if the option to 'Export all key details (csv)' successfully downloads keys and shows a success message"
	@priority = "3"
	test SuccessMessageWhenKeyIsDownloaded {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "Customer Portal Name");
		}

		task ("When a user selects a project in Customer Portal") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("Then the user is able to export activation keys and receives a success message") {
			CP2ActivationKeys.exportAllKeyDetails(fileName = "activation-keys.csv");
		}
	}

	@description = "Automation ID: LPS-150641 | Test Summary: Verify if when the user successfully downloads a key, shows the message Activation key details successfully exported"
	@priority = "3"
	test AssertTheActivationKeyDownloadMessage {

		// TODO LPS-150641 AssertTheActivationKeyDownloadMessage pending implementation

	}

	@description = "Automation ID: LPS-150643 | Test Summary: Verify if when the user try to downloads the keys and it fails shows the message Unable to export keys, please try again"
	@priority = "3"
	test AssertTheActivationKeyDownloadErrorMessage {

		// TODO LPS-150643 AssertTheActivationKeyDownloadErrorMessage pending implementation

	}

	@description = "Automation ID: LPS-150645 | Test Summary: Assert if the Export All Key Details option always download all the keys, no matter what filter is been used"
	@priority = "4"
	test AssertTheExportAllKeyDetailsDisplayInAnyFilter {
		
		// TODO LPS-150645 AssertTheExportAllKeyDetailsDisplayInAnyFilter pending implementation

	}

}