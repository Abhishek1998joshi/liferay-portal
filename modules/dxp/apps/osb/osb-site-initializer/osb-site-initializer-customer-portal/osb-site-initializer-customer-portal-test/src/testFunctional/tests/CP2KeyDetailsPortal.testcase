@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

    @description = "Automation ID: LPS-150670 | Test Summary: Verify if the elements of Environment group are present. (Product - Version - Environment Type - Subscription vs Complimentary)"
    @priority = "5"
    test CanViewElementsOfEnvironment {
        task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

            ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

        task ("When a user selects a project and an individual key") {
            CustomerPortal.enterOnProject(title = "NASA ICE");

            CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");

            CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
        }

        task ("Then the modal will show all elements of the Environment group") {
            CP2ActivationKeys.assertKeyDetailsEnvironmentElements(
				product = "Portal",
				version = "6.2 EE",
				environmentType = "Production",
				subscriptionType = "Subscription",
				instanceSize = "2");
        }
    }


    @description = "Automation ID: LPS-150672 | Test Summary: Verify if the elements of Server group are present. (Key Type: On Premise - Host Name - IP Address - MAC Address)"
    @priority = "5"
    test CanViewElementsOfServerGroup {
        task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project and an individual key") {
			CustomerPortal.enterOnProject(title = "NASA ICE");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");

			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
		}

		task ("Then the modal will show all elements of the Server group") {
			CP2ActivationKeys.assertKeyDetailsServerElements(
				keyType = "On-Premise",
				hostName = "Redacted",
				ipAddress = "Redacted",
				macAddress = "Redacted");
		}
    }

    @description = "Automation ID: LPS-150673 | Test Summary: Verify the elements of Status column. (Start Date - Expiration Date - Status)"
    @priority = "5"
    test CanViewElementsOfStatusColumn {
        task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project and an individual key") {
			CustomerPortal.enterOnProject(title = "NASA ICE");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "Portal");

			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
		}

		task ("Then the modal will show all elements of the Activation Status group") {
			CP2ActivationKeys.assertKeyDetailsStatusElements(
				status = "Activated",
				startDate = "Jun 7, 2022",
				expirationDate = "Jun 7, 2023");
		}
    }

    @description = "Automation ID: LPS-150676 | Test Summary: Verify the success message after downloading the activation key"
    @priority = "3"
    test CanViewSuccessMessage {
        // TODO LPS-150676 CanViewSuccessMessage pending implementation
    }

    @description = "Automation ID: LPS-150677 | Test Summary: Verify if the Close button works"
    @priority = "4"
    test TheCancelButtonWorks {
        // TODO LPS-150677 TheCancelButtonWorks pending implementation
    }

}