@component-name = "portal-solutions"
definition {

	property custom.properties = "javascript.single.page.application.enabled=false${line.separator}jsonws.web.service.paths.excludes=";
	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Name";
	var testSiteURL = "customer-portal-name";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		/*task ("Create a new Customer Portal Site") {
			Site.openSitesAdmin();

			TeamExtranet.addSiteTemplateCP(
				siteName = "${testSiteName}",
				siteTemplateName = "Liferay OSB Site Initializer Customer Portal");
		}*/
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");

			CustomerPortal.customerPortalApisTearDown();
		}
	}

	@description = "LPS-148079 - Verify that an activation key's details pop up appears when clicking on a key."
	@priority = "5"
	test PopUpShowsFromActivationKey {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");
		}

		task ("Then the user can click an individual key and a modal for the activation key's details will pop up") {
			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
		}
	}

	@description = "LPS-148083 - Verify that an activation key's details pop up has all necessary information of the Environment group."
	@priority = "5"
	test IfEnvironmentElementsArePresent {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project and an individual key") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
		}

		task ("Then the modal will show all elements of the Environment group") {
			CP2ActivationKeys.assertKeyDetailsEnvironmentElements(
				product = "DXP",
				version = "7.0",
				environmentType = "Backup",
				subscriptionType = "Subscription",
				instanceSize = "1");
		}
	}

	@description = "LPS-148084 - Verify that an activation key's details pop up has all necessary information of the Server group."
	@priority = "5"
	test IfServerElementsArePresent {
		property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

		task ("Given a user signs in on OKTA to update Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

		task ("When a user selects a project and an individual key") {
			CustomerPortal.enterOnProject(title = "2022 FIFA World Cup Qatar - FAN ID");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "DXP");

			CP2ActivationKeys.viewActivationKeyDetails(key_environmentName = "Redacted");
		}

		task ("Then the modal will show all elements of the Server group") {
			CP2ActivationKeys.assertKeyDetailsServerElements(
				keyType = "On-Premise",
				hostName = "Redacted",
				ipAddress = "Redacted",
				macAddress = "Redacted");
		}
	}

}