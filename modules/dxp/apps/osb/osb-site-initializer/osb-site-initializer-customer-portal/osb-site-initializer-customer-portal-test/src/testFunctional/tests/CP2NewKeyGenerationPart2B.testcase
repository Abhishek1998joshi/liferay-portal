@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testAccount = "2022 FIFA World Cup Qatar - FAN ID";
	var testProduct = "DXP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = "${testSiteName}");
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = "${testAccount}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		CustomerPortal.customerPortalApisTearDown();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "Automation ID: LPS-150803 | Test Summary: Verify if the Environment Name field is required"
	@priority = "4"
	test VerifyEnvironmentNameField {
        property portal.upstream = "quarantine";

		// Needs refactor since it depends on example FIFA account

        task ("Given a user signs in on OKTA to update the Customer Portal") {
			CustomerPortal.loginOktaToUpdateCP();

			Navigator.openURL();

			ApplicationsMenu.gotoSite(key_site = "${testSiteName}");
		}

        task ("When a user selects a project in Customer Portal and goes to 'Generate New' in Actions") {
			CustomerPortal.enterOnProject(title = "${testAccount}");

			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = "${testProduct}");

			CP2ActivationKeys.generateNewKey();
		}

        task ("Then the user can go through the first flow") {
			CP2ActivationKeys.selectKeyType(key_option = "Production");

            CP2ActivationKeys.selectSubscription(position = "1");

            Button.click(button = "Next");
		}

        task ("When the Environment Name field is not filled the message 'This field is required.' is displayed") {
            CP2ActivationKeys.environmentDetails(
                environmentDetails = "name",
                value = "Liferay Test");

            CP2ActivationKeys.environmentDetails(
                environmentDetails = "name",
                value = "");

            KeyPress(
				locator1 = "//body",
				value1 = "\ESCAPE");
	
			Alert.viewErrorMessage(errorMessage = "This field is required.");
        }
    }

    @description = "Automation ID: LPS-150804 | Test Summary: Verify if the Cluster Nodes field is required"
	@priority = "4"
	test VerifyClusterNodesField {

        // TODO LPS-150804 CP2NewKeyGenerationPart2B archive pending implementation
        
    }

    @description = "Automation ID: LPS-150805 | Test Summary: Verify if the user clicks the Cancel button the modal closes without saving anything"
	@priority = "3"
	test CanViewTheModalClosing {

        // TODO LPS-150805 CP2NewKeyGenerationPart2B archive pending implementation
        
    }

    @description = "Automation ID: LPS-150807 | Test Summary: Verify if the user goes back to the previous screen no changes have been made"
	@priority = "3"
	test UserGoesBackToThePreviousScreenAndNoChangesAreMade {

        // TODO LPS-150807 CP2NewKeyGenerationPart2B archive pending implementation
        
    }

    @description = "Automation ID: LPS-150809 | Test Summary: Verify that after filling out all required fields the Generate Cluster (Keys) button is enabled"
	@priority = "4"
	test CanViewTheGenerateClusterButtonEnabled {

        // TODO LPS-150809 CP2NewKeyGenerationPart2B archive pending implementation
        
    }

    @description = "Automation ID: LPS-150810 | Test Summary: Verify if the button name changes according to the number of keys generated by the user"
	@priority = "2"
	test CanViewTheNumberOfKeysInTheButtonText {

        // TODO LPS-150810 CP2NewKeyGenerationPart2B archive pending implementation
        
    }

    @description = "Automation ID: LPS-150811 | Test Summary: Verify if the right pane displays the following data (Product - Version - Environment Type - Subscription - Key Activations Available - Instance size)"
	@priority = "2"
	test CanViewTheDataInThePanel {

        // TODO LPS- CP2NewKeyGenerationPart2B archive pending implementation
        
    }

    @description = "Automation ID: LPS-150812 | Test Summary: Verify that when the user downloads the keys a success message appears"
	@priority = "3"
	test CanViewTheSuccessMessageAfterDownloadingTheNewKey {

        // TODO LPS-150812 CP2NewKeyGenerationPart2B archive pending implementation
        
    }

}