definition {

	macro _createNCommentsInBlogPosting {
		Variables.assertDefined(parameterList = "${blogPostingId},${numberOfCommentsToCreate},${createStrategy}");

		var size = ${numberOfCommentsToCreate} + 1;
		var i = "1";
		var body = '''
		[
				''';

		while ("${i}" != "${size}" && (maxIterations = "100")) {
			var commentBody = '''
					{
					"text": "commentText${i}"
					}
			''';
			var j = ${i} + 1;

			if ("${j}" == "${size}") {
				var body = StringUtil.replace("${body}", "${body}", "${body}${commentBody}]");
			}
			else {
				var commentBody = StringUtil.replace("${commentBody}", "${commentBody}", "${commentBody},");

				var body = StringUtil.replace("${body}", "${body}", "${body}${commentBody}");
			}

			var i = ${i} + 1;
		}

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/o/headless-delivery/v1.0/blog-postings/${blogPostingId}/comments/batch?createStrategy=${createStrategy} \
			-u test@liferay.com:test \
			-H Content-Type: application/json \
            -d ${body}
		''';

		var curl = JSONCurlUtil.post("${curl}");

		return "${curl}";
	}

	macro _getCommentsOfBlogPosting {
		Variables.assertDefined(parameterList = "${blogPostingId}");

		var portalURL = JSONCompany.getPortalURL();
		var siteId = JSONGroupAPI._getGroupIdByNameNoSelenium(
			groupName = "Guest",
			site = "true");
		var curl = '''
			${portalURL}/o/headless-delivery/v1.0/blog-postings/${blogPostingId}/comments \
			-u test@liferay.com:test \
			-H Content-Type: application/json
	}
	''';

		var curl = JSONCurlUtil.get("${curl}");

		return "${curl}";
	}

	macro _postBlogPostingComment {
		Variables.assertDefined(parameterList = "${blogPostingId},${textComment}");

		var portalURL = JSONCompany.getPortalURL();

		if (!(isSet(commentExternalReferenceCode))) {
			var externalReferenceCode = "";
		}

		if (!(isSet(parentCommentId))) {
			var parentCommentId = "0";
		}

		var curl = '''
			${portalURL}/o/headless-delivery/v1.0/blog-postings/${blogPostingId}/comments \
 			 	-u test@liferay.com:test \
				-H Content-Type: application/json
            	-d {
				"creator": {},
				"externalReferenceCode": "${commentExternalReferenceCode}",
				"parentCommentId": "${parentCommentId}",
				"text": "${textComment}"
				}
		''';

		var curl = JSONCurlUtil.post("${curl}");

		return "${curl}";
	}

	macro assertProperNumberOfItems {
		var actualTotalElement = JSONUtil.getWithJSONPath("${responseToParse}", "$..['totalCount']");

		TestUtils.assertEquals(
			actual = "${actualTotalElement}",
			expected = "${expectedTotalElement}");
	}

	macro createBlogPostingComment {
		Variables.assertDefined(parameterList = "${blogPostingId},${textComment}");

		if (!(isSet(commentExternalReferenceCode))) {
			var commentExternalReferenceCode = "";
		}

		if (!(isSet(parentCommentId))) {
			var parentCommentId = "0";
		}

		var response = CommentAPI._postBlogPostingComment(
			blogPostingId = "${blogPostingId}",
			commentExternalReferenceCode = "${commentExternalReferenceCode}",
			parentCommentId = "${parentCommentId}",
			textComment = "${textComment}");

		return "${response}";
	}

	macro getFieldValueOfAllExistingBlogPostingComments {
		Variables.assertDefined(parameterList = "${blogPostingId},${fieldName}");

		var response = CommentAPI._getCommentsOfBlogPosting(blogPostingId = "${blogPostingId}");

		var commentsFieldValue = JSONUtil.getWithJSONPath("${response}", "$..${fieldName}");

		return "${commentsFieldValue}";
	}

	macro getBlogPostingComments {
		Variables.assertDefined(parameterList = "${blogPostingId}");

		var commentsFromBlogPosting = CommentAPI._getCommentsOfBlogPosting(blogPostingId = "${blogPostingId}");

		return "${commentsFromBlogPosting}";
	}

	macro getFieldValueOfExistingBlogPostingComment {
		Variables.assertDefined(parameterList = "${response},${fieldName}");

		var fieldValue = JSONUtil.getWithJSONPath("${response}", "$..['items'][?(@.creator)].${fieldName}");

		return "${fieldValue}";
	}

	macro getIdOfCreateNCommentsInBlogPostingBatchEngineImportTask {
		var response = CommentAPI._createNCommentsInBlogPosting(
			blogPostingId = "${blogPostingId}",
			createStrategy = "${createStrategy}",
			numberOfCommentsToCreate = "${numberOfCommentsToCreate}");

		var importTaskId = JSONUtil.getWithJSONPath("${response}", "$.id");

		return "${importTaskId}";
	}

}