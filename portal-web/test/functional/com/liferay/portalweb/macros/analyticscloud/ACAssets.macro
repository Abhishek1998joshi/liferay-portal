definition {

	macro addCustomAssetReport {
		ACNavigation.openItem(itemName = "${assetName}");

		Button.click(button = "Add Report");

		Type(
			key_text = "Report Name",
			locator1 = "TextInput#ANY",
			value1 = "${reportName}");

		Select(
			key_fieldLabel = "Metric",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "${metric}");

		WaitForVisible(
			key_text = "Save",
			locator1 = "Button#ANY_ENABLED");

		Button.clickSave();
	}

	macro gotoViewsByTechnologyTab {
		Click(
			key_tabName = "${tabName}",
			locator1 = "ACAssets#VIEWS_BY_TECHNOLOGY_TAB");
	}

	macro removeCustomAssetReport {
		Click(
			key_cardTitle = "${reportName}",
			locator1 = "ACCards#TRASH_ICON");
	}

	macro viewAssets {
		var key_assetName = "${assetName}";

		AssertTextEquals(
			locator1 = "ACAssets#ASSETS_TABLE",
			value1 = "${assetName}");
	}

	macro viewAssetsInfo {
		AssertTextEquals(
			index = "${index}",
			key_assetName = "${assetName}",
			locator1 = "ACAssets#ASSETS_INFO",
			value1 = "${value}");
	}

	macro viewTechnologyBrowsersMetric {
		var key_cardTitle = "${cardTitle}";

		AssertTextEquals(
			locator1 = "ACAssets#BROWSERS_METRIC_VALUE",
			value1 = "${browserMetricValue}");

		AssertTextEquals(
			locator1 = "ACAssets#BROWSERS_PERCENTAGE_METRIC_VALUE",
			value1 = "${percentageMetricValue}");

		AssertCssValue(
			locator1 = "ACAssets#BROWSERS_PIE_CHART",
			locator2 = "fill",
			value1 = "${cssValue}");
	}

	macro viewViewsByTechnologyDeviceViewsAndPercentage {
		ScrollWebElementIntoView(locator1 = "ACAssets#VIEWS_BY_TECHNOLOGY_BAR_CHART");

		Pause(locator1 = "5000");

		MouseOver(locator1 = "ACAssets#VIEWS_BY_TECHNOLOGY_BAR_CHART");

		AssertTextEquals(
			locator1 = "ACAssets#VIEWS_BY_TECHNOLOGY_DEVICE_CHART_TOOLTIP_DEVICE_HEADER",
			value1 = "${deviceName}");

		AssertTextEquals(
			locator1 = "ACAssets#VIEWS_BY_TECHNOLOGY_DEVICE_CHART_TOOLTIP_VIEWS_HEADER",
			value1 = "${viewsValue} Views");

		AssertTextEquals(
			locator1 = "ACAssets#VIEWS_BY_TECHNOLOGY_DEVICE_CHART_TOOLTIP_PERCENTAGE_HEADER",
			value1 = "${percentageValue}");
	}

	macro viewViewsByTechnologyTabActive {
		AssertVisible(
			key_tabName = "${tabName}",
			locator1 = "ACAssets#VIEWS_BY_TECHNOLOGY_TAB_ACTIVE");
	}

	macro viewVisitorsBehaviorMetric {
		var key_metricTitle = "${metricTitle}";

		AssertTextEquals(
			locator1 = "ACAssets#METRIC_VALUE",
			value1 = "${metricValue}");
	}

}