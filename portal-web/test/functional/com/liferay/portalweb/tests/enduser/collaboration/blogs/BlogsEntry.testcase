@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Blogs";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-70143."
	@priority = "4"
	@refactorneeded
	test AddBlogsEntryWithDMLink {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		var dmDocument1URL = DMDocument.getDMLatestVersionURL(
			dmDocumentTitle = "Document_1.jpg",
			site = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		var dmDocument2URL = DMDocument.getDMLatestVersionURL(
			dmDocumentTitle = "Document_2.jpg",
			site = "Guest");

		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addEntryExternalLinkViaBrowseButton(
			imageFileName = "Document_1.jpg",
			navTab = "Documents and Media");

		BlogsEntry.viewEntryExternalURL(
			entryContent = "Blogs Entry Content",
			entryExternalURL = "${dmDocument1URL}",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addEntryExternalLinkViaBrowseButton(
			entryContent = "Blogs Entry Content",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");

		BlogsEntry.viewEntryExternalURL(
			entryContent = "Blogs Entry Content",
			entryExternalURL = "${dmDocument2URL}",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "5"
	@refactorneeded
	test AddBlogWithFormatting {
		property testray.component.names = "Training,WYSIWYG";

		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.uploadFile(
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		BlogsEntry.addEntryContent(
			entryContent = '''A World-Renowned Professor<br />It's no secret that Agricultural Science Department professor Dr. Wolfgang von Richter has built his entire career on solving the problem of sustainable living on other planets. For Dr. von Richter, the humble lima bean, which comes from the aptly-named phaseolus lunatus plant of the legume family, is the solution. For years, Dr. von Richter has cultivated variety after variety of lima bean. He's turned lima beans cobalt blue by adding the hardiness of a violet gene; he's grown lima beans the size of fists with his nutrient-rich, hyper-growth soil. But how realistic is his dream of getting lima beans to grow in the harsh, unpredictable, and, frankly, otherworldly conditions of different planets?''',
			entrySubtitle = "A conversation with Dr. Von Richter",
			entryTitle = "Is the Lima Bean Really the Answer to Our Life on Other Planets?");

		BlogsEntry.selectFormattingStyle(styleFormat = "Heading 2");

		Button.clickPublish();
	}

	@description = "This test covers LPS-108029. It ensures that a blog entry can be edited from the search result."
	@priority = "4"
	@refactorneeded
	test BlogEntryCanBeEditedFromSearchResult {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Blogs Entry Title");

		SearchPortlets.gotoResultDetails(searchAssetTitle = "Blogs Entry Title");

		Blogs.editEntryViaSearchResultDetails(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit",
			searchAssetTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title Edit");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");
	}

	@description = "This test covers LPS-126756. It ensures that a blog entry can be added with a static gif."
	@priority = "5"
	@refactorneeded
	test CanAddEntryWithStaticGif {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "static",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Blog Images",
			uploadFileName = "static.gif");

		Button.clickPublish();

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			uploadFileName = "static");
	}

	@description = "This is the same case as PGBlogs#CanAddTitleWithoutEscapingCharacters, but due to LPS-130537 we should ensure both contexts are covered."
	@priority = "4"
	@refactordone
	test CanAddTitleWithoutEscapingCharacters {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(entryTitle = '''&amp; &lt; &gt; &quot; > <''');

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');
	}

	@description = "This checks that a blog entry can be automatically saved as a draft."
	@priority = "5"
	@refactordone
	test CanAutomaticallySaveEntryAsDraft {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addDraftViaAutoSave(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(
			entryStatus = "Draft",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a blog entry can saved as a draft and then deleted."
	@priority = "4"
	@refactorneeded
	test CanDeleteDraft {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(
			entryStatus = "Draft",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		BlogsEntry.moveToRecycleBinDraftCP(
			assetType = "Blogs Entry",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsEntry.viewDefaultCP(entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that blog entries can be deleted through the UI."
	@priority = "5"
	@refactordone
	test CanDeleteMultipleEntriesSequentially {
		property portal.acceptance = "true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		for (var entryCount : list "1,2") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			BlogsNavigator.moveToRecycleBinCP(
				assetType = "Blogs Entry",
				entryTitle = "Blogs Entry${entryCount} Title");
		}

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		for (var entryCount : list "1,2") {
			BlogsEntry.viewNoCP(entryTitle = "Blogs Entry${entryCount} Title");
		}
	}

	@description = "This checks that a blog entry cannot be published if the custom abstracted is selected but empty."
	@priority = "4"
	@refactorneeded
	test CannotAddWhenCustomAbstractIsSelectedButEmpty {
		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsEntry.addTitle(entryTitle = "Blogs Title");

		Panel.expandPanel(panel = "Configuration");

		Click(locator1 = "Radio#CUSTOM_ABSTRACT");

		Button.clickPublish();

		Alert.viewRequiredField();
	}

	@description = "This checks that a blog entry without content cannot be added."
	@priority = "4"
	@refactordone
	test CannotAddWithEmptyContent {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithInvalidContent(
			entryInvalidContent = "",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsEntry.viewDefaultCP(entryTitle = "Blogs Entry Title");
	}

	@description = "This checks that a blog entry without a title cannot be added."
	@priority = "4"
	@refactordone
	test CannotAddWithEmptyTitle {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addWithInvalidTitle(
			entryContent = "Blogs Entry Content",
			entryInvalidTitle = "");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsEntry.viewDefaultCP(entryTitle = "");
	}

	@description = "This checks that a blog draft can be published."
	@priority = "4"
	@refactordone
	test CanPublishDraft {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.publishDraftCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

}