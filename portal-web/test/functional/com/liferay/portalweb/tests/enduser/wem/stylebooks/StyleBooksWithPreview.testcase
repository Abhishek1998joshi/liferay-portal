@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Style Books";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-116078. Can navigate to preview page via page preview info bar but not interact with preview page in style book editor."
	@priority = "4"
	test CanNavigateToPreviewPageViaPagePreviewInfoBarButNotAllowInteractWithPreviewPage {
		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}

		task ("Add a Banner Center to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");

			PageEditor.clickPublish();
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");
		}

		task ("Add a Blogs portlet to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Blogs");
		}

		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Assert the content page is shown in preview iframe") {
			SelectFrame.selectFrameNoLoading(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertVisible(
				key_pageName = "Test Content Page Name",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_content = "Banner Title Example",
				key_element = "h1",
				key_id = "element-text",
				key_type = "text",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT");
		}

		task ("Assert not allow interact with preview page") {
			AssertElementPresent(locator1 = "StyleBookEditor#CURSOR_NOT_ALLOWED");

			SelectFrameTop();
		}

		task ("Navigate to widget page via page preview info bar") {
			AssertTextEquals(
				locator1 = "StyleBookEditor#PAGE_PREVIEW_INFO_BAR_TOGGLE",
				value1 = "Test Content Page Name");

			StyleBooks.goToPageViaPagePreviewInfoBar(pageName = "Test Widget Page Name");

			Click(locator1 = "StyleBookEditor#PAGE_PREVIEW_INFO_BAR_TOGGLE");

			AssertTextEquals(
				locator1 = "StyleBookEditor#PAGE_PREVIEW_INFO_BAR_TOGGLE",
				value1 = "Test Widget Page Name");
		}

		task ("Assert the widget page is shown in preview iframe") {
			SelectFrame.selectFrameNoLoading(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertVisible(
				key_pageName = "Test Widget Page Name",
				locator1 = "Home#PAGE");

			Portlet.viewTitle(portletName = "Blogs");
		}

		task ("Assert not allow interact with preview page") {
			AssertElementPresent(locator1 = "StyleBookEditor#CURSOR_NOT_ALLOWED");

			SelectFrameTop();
		}
	}

	@description = "This is a test for LPS-116078. Can not preview style book when there are no pages in site."
	@priority = "4"
	test CannotPreviewStyleBookWhenSiteWithoutPage {
		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Assert can not preview style book") {
			AssertElementNotPresent(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertVisible(locator1 = "StyleBookEditor#NO_PAGE_MESSAGE");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY");
		}
	}

	@description = "This is a test for LPS-137065. The designer could preview the effects of styles on master page."
	@priority = "5"
	test PreviewStyleBookOnMasterPage {
		property osgi.module.configuration.file.names = "com.liferay.style.book.web.internal.configuration.FFStyleBookConfiguration.config";
		property osgi.module.configurations = "templatesPreviewEnabled=&quot;true&quot;";

		task ("Add a master with a Header Dark fragment then publish") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Navigation Bars",
				dropTarget = "Header",
				fragmentName = "Header Dark",
				scope = "Master");

			MastersPageTemplates.publishMaster();
		}

		task ("Add a style book") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");
		}

		task ("View the Masters is shown in preview type selector") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			StyleBooks.viewCurrentPreviewType(previewType = "Masters");
		}

		task ("View the master page is shown in preview item selector") {
			StyleBooks.viewCurrentPreviewItem(previewItem = "Custom Masters Page Template");
		}

		task ("View the help information") {
			Tooltip.viewHelpInformation(info = "Edit the style book using the sidebar form. You can preview the changes instantly.");
		}

		task ("Change Font Family Base to times in Typography form") {
			StyleBooks.selectForm(formName = "Typography");

			StyleBooks.expandSection(sectionName = "Font Family");

			Type(
				key_fieldLabel = "Font Family Base",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "times");

			StyleBooks.waitForAutoSave();
		}

		task ("Preview the effects on the master") {
			SelectFrame.selectFrameNoLoading(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertCssValue(
				locator1 = "//*[contains(@data-lfr-editable-id,'link')][normalize-space(text())='Sign In']",
				locator2 = "font-family",
				value1 = "times");

			SelectFrameTop();
		}
	}

	@description = "This is a test for LPS-116078 and LPS-119898. Can preview the effect on page when edit the style book."
	@priority = "5"
	test PreviewStyleBookWhenEditStyleBook {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Banner Center to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Change the background color of Container and publish the page") {
			PageEditor.editLayoutContainer(
				backgroundColor = "Danger",
				panel = "Styles");

			PageEditor.clickPublish();
		}

		task ("Add a style book") {
			ProductMenu.gotoPortlet(
				category = "Design",
				portlet = "Style Books");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Assert the content page is shown in preview iframe") {
			SelectFrame.selectFrameNoLoading(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertVisible(
				key_pageName = "Test Page Name",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_content = "Banner Title Example",
				key_element = "h1",
				key_id = "element-text",
				key_type = "text",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT");

			SelectFrameTop();
		}

		task ("Select Buttons in sidebar") {
			StyleBooks.selectForm(formName = "Buttons");
		}

		task ("Edit Background Color in Button Primary section") {
			StyleBooks.expandSection(sectionName = "Button Primary");

			Type(
				key_fieldLabel = "Background Color",
				key_groupLabel = "Button Primary",
				locator1 = "TextInput#GROUPED_TEXT_INPUT",
				value1 = "#FF0000");

			StyleBooks.waitForAutoSave();
		}

		task ("Select Typography in sidebar") {
			StyleBooks.selectForm(formName = "Typography");
		}

		task ("Edit Heading 1 Font Size in Headings section") {
			StyleBooks.expandSection(sectionName = "Headings");

			Type(
				key_fieldLabel = "Heading 1 Font Size",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "2rem");

			StyleBooks.waitForAutoSave();
		}

		task ("Select Color System in sidebar") {
			StyleBooks.selectForm(formName = "Color System");
		}

		task ("Edit the Danger in Theme Colors section") {
			StyleBooks.expandSection(sectionName = "Theme Colors");

			Type(
				key_fieldLabel = "Danger",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "#0b5fff");

			StyleBooks.waitForAutoSave();
		}

		task ("Preview the effect in page preivew iframe") {
			SelectFrame.selectFrameNoLoading(locator1 = "StyleBookEditor#PAGE_PREVIEW_IFRAME");

			AssertCssValue(
				key_content = "Go Somewhere",
				key_element = "a",
				key_id = "link",
				key_type = "link",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT",
				locator2 = "background-color",
				value1 = "rgba(255, 0, 0, 1)");

			AssertCssValue(
				key_content = "Banner Title Example",
				key_element = "h1",
				key_id = "element-text",
				key_type = "text",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT",
				locator2 = "font-size",
				value1 = "32px");

			AssertCssValue(
				locator1 = "//div[contains(@class,'bg-dangerColor')]",
				locator2 = "background-color",
				value1 = "rgba(11, 95, 255, 1)");

			SelectFrameTop();

			StyleBooks.clickPublish();
		}

		task ("Assert the new style book in Style Books admin") {
			StyleBooksAdmin.viewStyleBooksPresent(styleBookName = "Test Style Book Name");
		}
	}

}