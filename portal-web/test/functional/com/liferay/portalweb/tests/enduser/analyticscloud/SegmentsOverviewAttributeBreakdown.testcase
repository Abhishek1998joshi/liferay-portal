@component-name = "portal-analytics-cloud"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8504 | Test Summary: Segment Overview distribution filtered by boolean"
	@ignore = "true"
	@priority = "3"
	test SegmentOverviewDistributionFilteredByBoolean {

		// TODO LRAC-8504 SegmentOverviewDistributionFilteredByBoolean pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8505 | Test Summary: Segment Overview distribution filtered by date"
	@priority = "3"
	test SegmentOverviewDistributionFilteredByDate {
		var users = "ac1,ac2";

		task ("Create two new users") {
			JSONUser.addUser(
				birthdayDay = "15",
				birthdayMonth = "2",
				birthdayYear = "1972",
				userEmailAddress = "ac1@liferay.com",
				userFirstName = "ac1",
				userLastName = "ac1",
				userScreenName = "ac1");

			JSONUser.addUser(
				userEmailAddress = "ac2@liferay.com",
				userFirstName = "ac2",
				userLastName = "ac2",
				userScreenName = "ac2");
		}

		task ("Connect AC to DXP") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Login with the two new users and see page") {
			for (var name : list "${users}") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "${name}@liferay.com",
					userLoginFullName = "${name} ${name}");

				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");

				Pause(locator1 = "5000");
			}
		}

		task ("Close all sessions, lauch AC, change the property and go to segments") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSegments();
		}

		task ("Create a static segment, add two static members and save segment") {
			ACSegments.createStaticSegment();

			ACSegments.nameSegment(segmentName = "Static Segment Test");

			for (var name : list "${users}") {
				ACSegments.addStaticMember(tableMember = "${name} ${name}");
			}

			ACSegments.saveSegment();
		}

		task ("Go to segments, select a segment") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Static Segment Test");
		}

		task ("Switch to Distribution tab") {
			ACNavigation.switchTab(tabName = "Distribution");

			ACSegments.selectDistributionByAttribute(attribute = "birthDate");
		}

		task ("View chart entry") {
			ACSegments.viewBreakdownChartsEntry(key_entry = "1972-03-15T00:00:00.000Z - 50.0% 1986-05-31T00:00:00.000Z - 50.0%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8506 | Test Summary: Segment Overview distribution filtered by number"
	@ignore = "true"
	@priority = "3"
	test SegmentOverviewDistributionFilteredByNumber {

		// TODO LRAC-8506 SegmentOverviewDistributionFilteredByNumber pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8507 | Test Summary: Segment Overview distribution filtered by text"
	@priority = "3"
	test SegmentOverviewDistributionFilteredByText {
		property portal.upstream = "quarantine";

		// AC Bug ticket: LRAC-9250
		// Depends on the bug fix

		task ("Connect Analytics Cloud to DXP") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Create page") {
			ACUtils.addSiteAndPage(layoutName = "AC Page");
		}

		task ("Add two new users") {
			for (var name : list "ac,liferay") {
				JSONUser.addUser(
					jobTitle = "QA",
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");
			}

			ACDXPSettings.syncNewContactData();
		}

		task ("Login with the users and open the site") {
			for (var name : list "ac,liferay") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = "${name}@liferay.com",
					userLoginFullName = "${name} ${name}");

				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");

				Pause(locator1 = "5000");
			}
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("Type the segment name") {
			ACSegments.nameSegment(segmentName = "Static Segment Test");
		}

		task ("Add new user as member") {
			for (var name : list "ac,liferay" ) {
				ACSegments.addStaticMember(tableMember = "${name} ${name}");
			}

			ACSegments.saveSegment();
		}

		task ("Go to Segments") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Static Segment Test");
		}

		task ("Filter Attribute") {
			ACNavigation.switchTab(tabName = "Distribution");

			ACSegments.selectDistributionByAttribute(attribute = "jobTitle");
		}

		task ("View and click in Chart Entry") {
			ACSegments.viewBreakdownChartsEntry(key_entry = "QA - 100.0%");
		}

		task ("Sort the Names in ascending order") {
			ACInterests.viewIndividualInterestSpecificOrder(interestTopic = "ac ac,liferay liferay");
		}

		task ("Sort the Names in ascending order") {
			Click(
				labelOption = "Name",
				locator1 = "FormViewBuilder#FIELD_LABEL_OPTION");
		}

		task ("Assert order filtered by text") {

			// Sorting the names in ascending order to work correctly depends on the bug fix

			ACInterests.viewIndividualInterestSpecificOrder(interestTopic = "liferay liferay,ac ac");
		}
	}

}