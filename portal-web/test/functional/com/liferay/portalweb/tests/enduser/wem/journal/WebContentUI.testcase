@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Test that the UI for adding a WC folder works."
	@priority = "5"
	test AddFolder {
		property portal.acceptance = "true";
		property testray.component.names = "Training,Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");
	}

	@description = "Test that the UI for adding a WC works."
	@priority = "4"
	test AddWebContent {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

	@description = "Test that the UI for saving a WC as a draft works."
	@priority = "4"
	test AddWebContentDraft {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addDraft(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoViewStatus(
			webContentStatus = "DRAFT",
			webContentTitle = "WC WebContent Title");

		WebContent.viewStatus(
			webContentContent = "WC WebContent Content",
			webContentStatus = "Draft",
			webContentTitle = "WC WebContent Title");
	}

	@description = "Test that the UI for adding multiple WC works."
	@priority = "3"
	test AddWebContentMultiple {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 1",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 1");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 2",
			webContentTitle = "WC WebContent Title 2");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 2");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 3",
			webContentTitle = "WC WebContent Title 3");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 3");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 1");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content 1",
			webContentTitle = "WC WebContent Title 1");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 2");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content 2",
			webContentTitle = "WC WebContent Title 2");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 3");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content 3",
			webContentTitle = "WC WebContent Title 3");
	}

	@description = "Test that the UI for editing WC localization works."
	@priority = "4"
	test EditWCAddLocalization {
		property testray.component.names = "Localization,Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.addCP(
			webContentContent = "WC Contenido de la web Contenido",
			webContentTitle = "WC Contenido de la web Titulo");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.viewCP(
			webContentContent = "WC Contenido de la web Contenido",
			webContentTitle = "WC Contenido de la web Titulo");
	}

	@description = "This is a test for LPS-130607. Preview the web content displayed on display page template in web content editor."
	@priority = "4"
	test PreviewWebContentDisplayedOnDisplayPageTemplateInWebContentEditor {
		task ("Add a display page template") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Display Page Content fragment to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Preview the web content in web content editor") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.previewDisplayPageTemplate(webContentContent = "Web Content Content");
		}
	}

	@description = "Test for LPS-130922. This is a test for View the mapped visual style of editable field node in Selection panel of content page."
	@priority = "4"
	test ViewMappedVisualStyleEditableInSelectionContentPage {

		task ("Add WebContent with basic web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoWebContent();

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "WC WebContent LPS-130922");

			PortletEntry.publish();
		}

		task ("Add Public Page with Blank") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Page LPS-130922",
				type = "content");
		}

		task ("Edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Page LPS-130922",
				siteName = "Test Site Name");	
		}

		task ("Add button Fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Edit Field Mapping and select Content to Field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Button",
				id = "link");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WC WebContent LPS-130922",
				navItem = "Web Content");
			
			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Content");
		}

		task ("AssertElementPresent on Content and AssertCssValue") {
			AssertElementPresent(
				value1 = "Content",
				locator1 = "PageEditorEditableLink#FIELD");

			AssertCssValue(
				id = "link",
				key_fragmentName = "Button",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "boxShadow",
				value1 = "rgb(175, 120, 255) 0px 0px 0px 1px inset");
		}

		task ("Add Fragment Content Display") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				targetFragmentName = "Button");
		}

		task ("Edit Collection Display adding Highest Rated Assets") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets");
		}

		task ("Add Heading Fragment to Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "WC WebContent LPS-130922",
				fragmentName = "Heading");			
		}

		task ("Field edit Mapping and select Title to Field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");
		}

		task ("AssertElementPresent Field Title and AssertCssValue") {
			AssertElementPresent(
				value1 = "Title",
				locator1 = "PageEditorEditableLink#FIELD");

			AssertCssValue(
				id = "element-text",
				key_fragmentName = "Heading",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "boxShadow",
				value1 = "rgb(175, 120, 255) 0px 0px 0px 1px inset");
		}

	}

	@description = "Test for LPS-130922. This is a test for View the mapped visual style of editable field node in Selection panel of display page template."
	@priority = "4"
	test ViewMappedVisualStyleOfEditableInSelectionDisplayPageTemplate {

		task ("Add a display page") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Display Page LPS-130922",
				subType = "Basic Web Content");
		}

		task ("Add Fragment Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Field edit Mapping and select Title to Field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Content");
		}

		task ("AssertElementPresent Field Title and AssertCssValue") {
			AssertElementPresent(
				value1 = "Content",
				locator1 = "PageEditorEditableLink#FIELD");

			AssertCssValue(
				id = "element-text",
				key_fragmentName = "Heading",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "boxShadow",
				value1 = "rgb(175, 120, 255) 0px 0px 0px 1px inset");
		}

		task ("Add Fragment Content Display") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				targetFragmentName = "Heading");
		}

		task ("Edit Collection Display adding Most Viewed Assets") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Most Viewed Assets");
		}

		task ("Add Button Fragment to Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Title",
				fragmentName = "Button");			
		}

		task ("Edit Button Mapping Field and select Title to Field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Button",
				id = "link");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");
		}

		task ("AssertElementPresent Field Title and AssertCssValue") {
			AssertElementPresent(
				value1 = "Title",
				locator1 = "PageEditorEditableLink#FIELD");

			AssertCssValue(
				id = "link",
				key_fragmentName = "Button",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "boxShadow",
				value1 = "rgb(175, 120, 255) 0px 0px 0px 1px inset");
		}
	}		
}	