@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Enable the Collection Filter feature via gogo shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.fragment.renderer.collection.filter.internal.CollectionFilterFragmentRenderer");

			GogoShell.viewOutput(outputContent = "true");

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.fragment.renderer.collection.filter.internal.CollectionAppliedFiltersFragmentRenderer");

			GogoShell.viewOutput(outputContent = "true");
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:disable com.liferay.fragment.renderer.collection.filter.internal.CollectionFilterFragmentRenderer");

			GogoShell.viewOutput(outputContent = "true");

			GogoShell.executeCommand(commandName = "scr:disable com.liferay.fragment.renderer.collection.filter.internal.CollectionAppliedFiltersFragmentRenderer");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	@description = "This is a test for LPS-113929. The page creator could see the alert info in the General panel of Applied Filters fragment. The Applied Filters fragment could show applied category and keywords filters in Preview and View mode."
	@priority = "5"
	test ViewAppliedCategoryAndKeywordsFilters {
		property test.name.skip.portal.instance = "AppliedFilters#ViewAppliedCategoryAndKeywordsFilters";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Size");
		}

		task ("Add three categories in Size vocabulary") {
			var largeId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Large",
				vocabularyName = "Size");

			var mediumId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Medium",
				vocabularyName = "Size");

			var smallId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Small",
				vocabularyName = "Size");
		}

		task ("Add the first web content with Large") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${largeId}",
				content = "Levis 511",
				groupName = "Test Site Name",
				title = "Levis 511");
		}

		task ("Add the second web content with Medium") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${mediumId}",
				content = "Levis 501",
				groupName = "Test Site Name",
				title = "Levis 501");
		}

		task ("Add the third web content with Small") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${smallId}",
				content = "Levis 510",
				groupName = "Test Site Name",
				title = "Levis 510");
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add the first collection page based on dynamic collection") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPublicCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name 1",
				tabName = "Collections");
		}

		task ("Select the Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listStyle = "Bordered List",
				selectedName = "Dynamic Collection");
		}

		task ("Add an Applied Filters above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Applied Filters",
				targetFragmentName = "Container");
		}

		task ("View the No Active Filters is shown in Applied Filters fragment") {
			AssertTextEquals(
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_PLACEHOLDER",
				value1 = "No Active Filters");
		}

		task ("View the alert info shown in General panel of Applied Filters") {
			PageEditor.editAppliedFilters();

			AssertTextEquals(
				locator1 = "PageEditor#ITEM_CONFIGURATION_ALERT_INFO",
				value1 = "You will see this fragment on the page only after applying a filter.");
		}

		task ("Select the dynamic collection as Target Collection") {
			PageEditor.editAppliedFilters(targetCollection = "Dynamic Collection");
		}

		task ("Add a Collection Filter above the Applied Filters") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Applied Filters");
		}

		task ("Select the dynamic collection as Target Collection and Select the Category as Filter and Size vocabulary as Source") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Large,Medium,Small",
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Size");
		}

		task ("View the Applied Filters doesn't present when no applied filter at Preview mode") {
			Click(locator1 = "PageEditor#PREVIEW");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertElementNotPresent(locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_PLACEHOLDER");
		}

		task ("View applied category filter at Preview mode") {
			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Large",
				multipleSelection = "true",
				selectedName = "Large",
				title = "Size");

			AssertVisible(
				filterName = "Large",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 511']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name 1",
				siteName = "Test Site Name");
		}

		task ("View the Applied Filters doesn't present when no applied filter at Preview mode") {
			AssertElementNotPresent(locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_PLACEHOLDER");
		}

		task ("View applied category filter at View mode") {
			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Small",
				multipleSelection = "true",
				selectedName = "Small",
				title = "Size");

			AssertVisible(
				filterName = "Small",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 510']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}

		task ("Add the second collection page based on dynamic collection") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPublicCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name 2",
				tabName = "Collections");
		}

		task ("Select the Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listStyle = "Bordered List",
				selectedName = "Dynamic Collection");
		}

		task ("Add an Applied Filters above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Applied Filters",
				targetFragmentName = "Container");
		}

		task ("Select the dynamic collection as Target Collection") {
			PageEditor.editAppliedFilters(targetCollection = "Dynamic Collection");
		}

		task ("Add a Collection Filter above the Applied Filters") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Applied Filters");
		}

		task ("Select the dynamic collection as Target Collection and Select the Keywords as Filter") {
			PageEditor.editCollectionFilter(
				filter = "Keywords",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection");
		}

		task ("View applied category filter at Preview mode") {
			Click(locator1 = "PageEditor#PREVIEW");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "501");

			AssertVisible(
				filterName = "501",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 501']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name 2",
				siteName = "Test Site Name");
		}

		task ("View applied category filter at View mode") {
			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "510");

			AssertVisible(
				filterName = "510",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 510']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}
	}

}