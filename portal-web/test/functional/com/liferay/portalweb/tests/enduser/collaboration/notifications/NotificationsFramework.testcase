@component-name = "portal-collaboration"
definition {

	property custom.properties = "default.layout.template.id=1_column${line.separator}jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Notification";
	property testray.main.component.name = "Notifications";

	var pageName = "Blogs Page";
	var portletName = "Blogs";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Blogs.tearDownCP();

			NotificationsPortlet.tearDownUserDeliveries();

			Page.tearDownCP();

			JSONUser.tearDownNonAdminUsers();
		}
	}

	@priority = "4"
	@refactordone
	test CanDeleteNotifications {
		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		for (var entryCount : list "1,2") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry${entryCount} Content",
				entryTitle = "Blogs Entry${entryCount} Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "2");

		Notifications.gotoNotifications();

		for (var entryCount : list "1,2") {
			Notifications.viewNewContent(
				assetType = "Blogs Entry",
				contentBody = "Blogs Entry${entryCount} Title",
				user = "userfn userln");
		}

		for (var entryCount : list "1,2") {
			Notifications.deleteNotification(contentBody = "Blogs Entry${entryCount} Title");
		}

		Notifications.viewDefaultContent();

		Notifications.viewNoNotifications(activePanel = "Notifications");
	}

	@priority = "4"
	@refactordone
	test CanMarkAllNotificationsAsRead {
		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.subscribePG();

		Notifications.viewNoNotifications(activePanel = "Profile");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		for (var entryCount : list "1,2,3") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry${entryCount} Content",
				entryTitle = "Blogs Entry${entryCount} Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		Notifications.viewNoNotifications(activePanel = "Profile");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "3");

		Notifications.gotoNotifications();

		NotificationsPortlet.configureNotificationPG(menuItem = "Mark All Notifications as Read");

		Notifications.viewNoNotifications(activePanel = "Notifications");
	}

	@priority = "4"
	@refactordone
	test CanViewMultipleNotifications {
		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		for (var entryCount : list "1,2,3") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry${entryCount} Content",
				entryTitle = "Blogs Entry${entryCount} Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		Notifications.viewNoNotifications(activePanel = "Profile");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "3");

		Notifications.gotoNotifications();

		Notifications.navigateToContent(contentBody = "Blogs Entry1 Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.navigateToContent(contentBody = "Blogs Entry2 Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.navigateToContent(contentBody = "Blogs Entry3 Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "0");
	}

}