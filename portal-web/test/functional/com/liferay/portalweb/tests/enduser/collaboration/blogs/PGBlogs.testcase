@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Blogs";

	var pageName = "Blogs Page";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();

			Blogs.tearDownConfigurationDisplaySettingsPG(
				pageName = "Blogs Page",
				portletName = "Blogs");

			Blogs.tearDownConfigurationScopePG(
				pageName = "Blogs Page",
				portletName = "Blogs");

			Page.tearDownCP();

			Site.tearDownCP();

			Organization.tearDownCP();

			JSONUser.tearDownNonAdminUsers();

			ServerAdministration.tearDownMailServerSettings();
		}
	}

	@priority = "4"
	@refactorneeded
	test AddBlogsEntryContentNull {
		Blogs.addWithInvalidContent(
			entryInvalidContent = "",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactordone
	test AddScheduledBlogsEntry {
		BlogsNavigator.openToAddEntry(
			siteURLKey = "guest",
			layoutName = "Blogs Page");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.scheduleBlogEntry();

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactorneeded
	test AddBlogsEntryTitle256Characters {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "|||||||||1|||||||||2|||||||||3|||||||||4|||||||||5|||||||||6|||||||||7|||||||||8|||||||||9||||||||10||||||||11||||||||12||||||||13||||||||14||||||||15||||||||16||||||||17||||||||18||||||||19||||||||20||||||||21||||||||22||||||||23||||||||24||||||||25||||XX");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "|||||||||1|||||||||2|||||||||3|||||||||4|||||||||5|||||||||6|||||||||7|||||||||8|||||||||9||||||||10||||||||11||||||||12||||||||13||||||||14||||||||15||||||||16||||||||17||||||||18||||||||19||||||||20||||||||21||||||||22||||||||23||||||||24||||||||25||||X",
			siteURLKey = "guest",
			layoutName = "Blogs Page");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "|||||||||1|||||||||2|||||||||3|||||||||4|||||||||5|||||||||6|||||||||7|||||||||8|||||||||9||||||||10||||||||11||||||||12||||||||13||||||||14||||||||15||||||||16||||||||17||||||||18||||||||19||||||||20||||||||21||||||||22||||||||23||||||||24||||||||25||||X");
	}

	@description = "This checks that characters will not be escaped in the blog entry title."
	@priority = "4"
	@refactordone
	test AddBlogsEntryWithoutEscapingCharacters {
		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = '''&amp; &lt; &gt; &quot; > <''');
	}

	@priority = "4"
	@refactorneeded
	test AddBlogsEntryTitleNull {
		Blogs.addWithInvalidTitle(
			entryContent = "Blogs Entry Content",
			entryInvalidTitle = "");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "");
	}

	@priority = "4"
	@refactordone
	// The JSON API doesn't seem to support adding a blog entry to a specific page, but this could be investigated further to optimize this setup.
	test AddBlogsEntryWithSamePageScope {

		task ("Set up a blog widget on another page scoped to that page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Blogs Page2");

			JSONLayout.addWidgetToPublicLayout(
				column = "1",
				groupName = "Guest",
				layoutName = "Blogs Page2",
				widgetName = "Blogs");

			Navigator.gotoPage(pageName = "Blogs Page2");

			Portlet.selectScopePG(
				portletName = "Blogs",
				scope = "Blogs Page2");

			Navigator.gotoPage(pageName = "Blogs Page2");

			Blogs.addEntry(
				entryContent = "Blogs Entry2 Content",
				entryTitle = "Blogs Entry2 Title");
		}

		task ("Check that the blog entry added in the second page does not appear in the first page and vice-versa") {
			Navigator.gotoPage(pageName = "Blogs Page");

			BlogsEntry.viewNoPG(entryTitle = "Blogs Entry2 Title");

			Blogs.addEntry(
				entryContent = "Blogs Entry1 Content",
				entryTitle = "Blogs Entry1 Title");

			Portlet.viewTitle(portletName = "Blogs");

			Navigator.gotoPage(pageName = "Blogs Page2");

			BlogsEntry.viewNoPG(entryTitle = "Blogs Entry1 Title");

			BlogsNavigator.gotoEntryPG(
				entryContent = "Blogs Entry2 Content",
				entryTitle = "Blogs Entry2 Title");

			Portlet.viewTitle(portletName = "Blogs (Blogs Page2)");
		}

		task ("Check that the entry scoped to the second blog page disappears if the scope is changed to the site") {
			Navigator.gotoPage(pageName = "Blogs Page2");

			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			Portlet.selectScopePG(
				portletName = "Blogs",
				scope = "${siteName}");

			Navigator.gotoPage(pageName = "Blogs Page2");

			BlogsEntry.viewNoPG(entryTitle = "Blogs Entry2 Title");

			BlogsNavigator.gotoEntryPG(
				entryContent = "Blogs Entry1 Content",
				entryTitle = "Blogs Entry1 Title");

			Portlet.viewTitle(portletName = "Blogs");
		}
	}

	@description = "This checks that basic text can be inputted and displayed in the most common fields in a blog entry."
	@priority = "5"
	@refactordone
	@uitest
	test AddBlogsEntryWithSubtitle {
		property testray.component.names = "WYSIWYG";

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactorneeded
	test AddBlogsEntryWithTrackbackURL {
		property custom.properties = "blogs.trackback.enabled=true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		BlogsEntry.addWithTrackbackURLPG(
			entryContent = "Blogs Entry1 Content",
			entryContent2 = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry1 Title",
			entryTitle2 = "Blogs Entry2 Title",
			pageName = "Blogs Page");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewWithTrackbackURLPG(
			entryContent = "Blogs Entry1 Content",
			entryContent2 = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry1 Title",
			entryTitle2 = "Blogs Entry2 Title");
	}

	@description = "This is usecase 3 for LPS-69240"
	@priority = "4"
	@refactorneeded
	test AddCustomURL {
		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		AssertChecked(locator1 = "Radio#AUTOMATIC_URL");

		AssertTextEquals(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "blogs-entry-title");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url-here");

		PortletEntry.publish();

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/custom-url-here");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is usecase 4 for LPS-69240"
	@priority = "4"
	@refactorneeded
	test AddDuplicateCustomURL {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "blogs-entry-title");

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#ERROR");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_ENTER_A_UNIQUE_TITLE",
			value1 = "The URL title is already in use. Please enter a unique URL title.");
	}

	@description = "This is usecase 2 for LPS-69240"
	@priority = "4"
	@refactorneeded
	test AssertDuplicateAutomaticURLNormalizes {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		AssertChecked(locator1 = "Radio#AUTOMATIC_URL");

		AssertTextEquals(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "blogs-entry-title-1");
	}

	@description = "These are usecases 6-8 for LPS-69240"
	@priority = "4"
	@refactordone
	test CanSaveCustomURLAfterSwitchingBackFromAuto {
		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		AssertChecked(locator1 = "Radio#AUTOMATIC_URL");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url");

		Check(locator1 = "Radio#AUTOMATIC_URL");

		AssertTextEquals(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "blogs-entry-title");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		AssertTextEquals(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url");
	}

	@priority = "5"
	@refactorneeded
	test DeleteBlogsEntries {
		for (var entryCount : list "1,2") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry${entryCount} Content",
				entryTitle = "Blogs Entry${entryCount} Title");
		}

		for (var entryCount : list "2,1") {
			Navigator.gotoPage(pageName = "Blogs Page");

			BlogsEntry.moveToRecycleBinPG(
				assetType = "Blogs Entry",
				entryContent = "Blogs Entry${entryCount} Content",
				entryTitle = "Blogs Entry${entryCount} Title");
		}

		Navigator.gotoPage(pageName = "Blogs Page");

		for (var entryCount : list "1,2") {
			BlogsEntry.viewNoPG(
				entryContent = "Blogs Entry${entryCount} Content",
				entryTitle = "Blogs Entry${entryCount} Title");
		}
	}

	@priority = "4"
	@refactorneeded
	test DeleteBlogsEntryComment {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "Blogs Entry Comment");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.delete(entryComment = "Blogs Entry Comment");
	}

	@priority = "5"
	@refactorneeded
	test EditBlogsEntry {
		property portal.acceptance = "true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.editEntryPG(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");
	}

	@priority = "5"
	@refactorneeded
	test EditBlogsEntryComment {
		property portal.acceptance = "true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "Blogs Entry Comment");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.edit(
			entryComment = "Blogs Entry Comment",
			entryCommentEdit = "Blogs Entry Comment Edit");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "Blogs Entry Comment Edit",
			userFullName = "Test Test (You)");
	}

	@priority = "4"
	@refactorneeded
	test EditBlogsEntryComments {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "1st Blog Comment");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "2nd Blog Comment");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.edit(
			entryComment = "1st Blog Comment",
			entryCommentEdit = "1st Blog Comment Edit");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.edit(
			entryComment = "2nd Blog Comment",
			entryCommentEdit = "2nd Blog Comment Edit");
	}

	@description = "This is a usecase for LPS-75241"
	@priority = "5"
	@refactorneeded
	test EmbedVideo {
		property portal.acceptance = "true";
		property testray.component.names = "WYSIWYG";

		Blogs.addEntry(
			embedVideo = "https://www.youtube.com/watch?v=2EPZxIC5ogU",
			entryContent = "video",
			entryTitle = "Blogs Entry Title",
			navTab = "URL",
			videoService = "youtube");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			embedVideo = "true",
			entryContent = "video",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a usecase for LPS-83229. This is the only small image test for blogs."
	@priority = "5"
	@refactorneeded
	test RemoveSmallImage {
		property portal.acceptance = "true";
		property testray.component.names = "WYSIWYG";

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry with Small Image");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addSmallImage(
			navTab = "Documents and Media",
			uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry with Small Image",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry with Small Image");

		BlogsEntry.removeSmallImage(uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry with Small Image");

		AssertElementNotPresent(
			key_smallImage = "Document_1.jpg",
			locator1 = "BlogsEntry#SMALL_IMAGE");

		AssertTextEquals(
			locator1 = "Button#SELECT_FILE_SMALL_IMAGE",
			value1 = "Select File");
	}

	@priority = "5"
	@refactorneeded
	test SaveBlogsEntryDraft {
		property portal.acceptance = "true";

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(
			entryStatus = "Draft",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "5"
	@refactorneeded
	test SaveBlogsEntryDraftAuto {
		Blogs.addDraftViaAutoSave(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Blogs");

		BlogsNavigator.gotoEntryCP(
			entryStatus = "Draft",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactorneeded
	test SearchBlogsEntryContent {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Unique Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		for (var searchTerm : list "Unique,Content,Unique Content") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Blogs Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}
	}

	@priority = "4"
	@refactorneeded
	test SearchBlogsEntryContentQuotes {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		for (var searchTerm : list ""Blogs","Entry","Content","Blogs Entry Content"") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Blogs Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}

		for (var searchTerm : list ""Blogs1","Entry1","Content1","Blogs1 Entry1 Content1"") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewNoSearchResults(searchTerm = "${searchTerm}");
		}
	}

	@priority = "4"
	@refactorneeded
	test SearchBlogsEntryTitle {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		for (var searchTerm : list "Blogs,Entry,Title,Blogs Entry Title") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Blogs Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}
	}

	@priority = "4"
	@refactorneeded
	test SearchBlogsEntryTitleQuotes {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		for (var searchTerm : list ""Blogs","Entry","Title","Blogs Entry Title"") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Blogs Entry Title",
				searchAssetType = "Blogs Entry",
				searchTerm = "${searchTerm}");
		}

		for (var searchTerm : list ""Blogs1","Entry1","Title1","Blogs1","Entry1","Title1"") {
			Navigator.gotoPage(pageName = "Search Page");

			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewNoSearchResults(searchTerm = "${searchTerm}");
		}
	}

	@priority = "3"
	@refactorneeded
	test SubscribeToBlogsEntryComment {
		property test.name.skip.portal.instance = "PGBlogs#SubscribeToBlogsEntryComment";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.subscribePG();

		Comments.viewSubscribedPG();
	}

	@priority = "4"
	@refactorneeded
	test UserFlagsEntryAndAdminViewsNotificationInMockMock {
		property test.smtp.server.enabled = "true";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.flagPG(
			flagReason = "Spam",
			siteName = "${siteName}",
			userEmailAddress = "userea@liferay.com");

		MockMock.viewMail(
			asset = "Inappropriate Content Flagged in ${siteName}",
			content = "flagged as inappropriate by Test Test",
			recipient = "Test Test",
			sender = "Joe Bloggs",
			subject = "Inappropriate Content Flagged in ${siteName}");
	}

	@priority = "5"
	@refactorneeded
	test UserSubscribeToBlogsAndViewEntryEmails {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.smtp.server.enabled = "true";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.subscribePG();

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		MockMock.viewMail(
			asset = "Blogs Entry",
			content = "Blogs Entry Content",
			recipient = "userfn userln",
			sender = "Joe Bloggs",
			subject = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.editEntryPG(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit",
			sendEmailEntryUpdated = "true");

		MockMock.viewMail(
			asset = "Blogs Entry",
			content = "Blogs Entry Title Edit",
			recipient = "userfn userln",
			sender = "Joe Bloggs",
			subject = "Blogs Entry Title Edit");
	}

	@description = "This test covers LPS-106613. It ensures that the custom abstract field cannot be reset to empty after typing in the content field."
	@priority = "3"
	@refactorneeded
	test ViewAbstractDescriptionWithEntryContent {
		property test.name.skip.portal.instance = "PGBlogs#ViewAbstractDescriptionWithEntryContent";

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomAbstract(entryAbstractDescription = "Blogs Entry Abstract Description");

		Click.pauseClickAt(
			key_editor = "content",
			locator1 = "AlloyEditor#EDITOR");

		BlogsEntry.addContent(entryContent = "Blogs Entry Content");

		AssertTextEquals(
			locator1 = "TextInput#DESCRIPTION",
			value1 = "Blogs Entry Abstract Description");
	}

	@description = "This is a usecase for LPS-66970"
	test ViewBlogEntryViaEditedCustomURL {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "/web/guest/blogs-page/-/blogs/blogs-entry-title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomURL(customURL = "this-should-redirect-to-the-previous-entry");

		SelectFrameTop();

		PortletEntry.publish();

		User.logoutPG();

		Navigator.openSpecificURL(url = "/web/guest/blogs-page/-/blogs/this-should-redirect-to-the-previous-entry");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "/web/guest/blogs-page/-/blogs/blogs-entry-title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactorneeded
	test ViewBlogsEntryCommentAsGuest {
		property osgi.module.configuration.file.names = "com.liferay.portal.bundle.blacklist.internal.configuration.BundleBlacklistConfiguration.config";
		property osgi.module.configurations = "blacklistBundleSymbolicNames=&quot;com.liferay.saml.addon.keep.alive.web,com.liferay.saml.api,com.liferay.saml.impl,com.liferay.saml.opensaml.integration,com.liferay.saml.persistence.api,com.liferay.saml.persistence.service,com.liferay.saml.web,saml-hook&quot;";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		User.logoutPG();

		Navigator.gotoPage(pageName = "Blogs Page");

		Comments.addPGAsGuest(
			entryComment = "Guest Blogs Entry Comment",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "guest@liferay.com",
			userFirstName = "Guestfn",
			userLastName = "Guestln");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "Guest Blogs Entry Comment",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userFullName = "Guestfn Guestln");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		AssertElementPresent(locator1 = "CKEditor#BODY");

		SelectFrame(value1 = "relative=top");

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoBlogsEntryPermissionsPG(entryTitle = "Blogs Entry Title");

		Role.removePermissionPG(
			entryTitle = "Blogs Entry Title",
			pageName = "Blogs Page",
			permissionDefinitionKey = "CONTENT_PERMISSIONS_ADD_DISCUSSION_CHECKBOX",
			roleTitle = "Guest");

		Navigator.gotoPage(pageName = "Blogs Page");

		User.logoutPG();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "Guest Blogs Entry Comment",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			noAddPermissions = "true",
			userFullName = "Guestfn Guestln");

		AssertElementNotPresent(locator1 = "CKEditor#BODY");

		SelectFrame(value1 = "relative=top");

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "3"
	@refactorneeded
	test ViewBlogsEntryDraftNoAsUser {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry Title");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@description = "Basic test that ensures reading time displays when enabled."
	@priority = "5"
	@refactorneeded
	test ViewBlogsEntryReadingTime {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PGBlogs#ViewBlogsEntryReadingTime";

		BlogsConfiguration.enableReadingTime();

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			readingTime = "Less Than a Minute Read");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			readingTime = "Less Than a Minute Read");

		Navigator.gotoPage(pageName = "Blogs Page");
	}

	@ignore = "true"
	@priority = "4"
	@refactorneeded
	test ViewBlogsEntryRSS {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		Pause(locator1 = "3000");

		BlogsEntry.viewRSS(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			pageName = "Blogs Page",
			siteName = "${siteName}");
	}

	@priority = "3"
	@refactorneeded
	test ViewBlogsEntryViewCount {
		property test.name.skip.portal.instance = "PGBlogs#ViewBlogsEntryViewCount";

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		Check(locator1 = "Checkbox#SHOW_VIEW_COUNT");

		IFrame.saveConfiguration();

		Navigator.gotoPage(pageName = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewViewCountPG(
			entryTitle = "Blogs Entry Title",
			pageName = "Blogs Page");
	}

	@priority = "3"
	@refactorneeded
	test ViewBlogsEntryWithAbstractDisplayTemplate {
		property test.name.skip.portal.instance = "PGBlogs#ViewBlogsEntryWithAbstractDisplayTemplate";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.addCustomAbstract(entryAbstractDescription = "Blogs Entry Abstract Description");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsConfiguration.selectDisplayTemplate(displayTemplate = "Abstract");

		IFrame.saveConfiguration();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewWithAbstractDisplayTemplatePG(
			entryAbstract = "Blogs Entry Abstract Description",
			entryAbstractDescription = "Blogs Entry Abstract Description",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "3"
	@refactorneeded
	test ViewBlogsEntryWithDefaultScope {
		Portlet.selectScopePG(
			portletName = "Blogs",
			scope = "Blogs Page");

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.viewTitle(portletName = "Blogs (Blogs Page)");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsConfiguration.viewScopeDefaultNoEntryCP(contentScopeName = "Default Scope");

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.selectScopePG(
			portletName = "Blogs",
			scope = "Blogs Page");

		Navigator.openURL();

		ProductMenu.gotoScopedPortlet(
			category = "Content &amp; Data",
			portlet = "Blogs",
			scope = "Blogs Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		BlogsEntry.viewEntryTable(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryAuthorCP(
			entryAuthorFullName = "Test Test",
			entryTitle = "Blogs Entry Title");

		var key_entryTitle = "Blogs Entry Title";

		AssertClick(
			locator1 = "Blogs#ENTRY_TABLE_TITLE",
			value1 = "Blogs Entry Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactorneeded
	test ViewBlogsEntryWithFullContentDisplayTemplate {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsConfiguration.selectDisplayTemplate(displayTemplate = "Full Content");

		IFrame.saveConfiguration();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			entryContent = "${entryContent}",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactorneeded
	test ViewBlogsEntryWithGuestPermissionsRemoved {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.removeViewPermissionsPG(
			entryTitle = "Blogs Entry2 Title",
			roleTitle = "Guest");

		User.logoutPG();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry2 Content");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		User.firstLoginPG();
	}

	@priority = "3"
	@refactorneeded
	test ViewBlogsEntryWithTitleDisplayTemplate {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsConfiguration.selectDisplayTemplate(displayTemplate = "Title");

		IFrame.saveConfiguration();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewWithTitleDisplayTemplatePG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "3"
	@refactorneeded
	test ViewBlogsEntryWithUploadedCoverImage {
		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_1",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		Button.clickPublish();

		Pause(locator1 = "10000");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "4"
	@refactorneeded
	test ViewBlogsPortletWithNoPermissions {
		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Permissions");

		BlogsConfiguration.selectConfigurationIFrame();

		Role.removePermissionPG(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Site Member");

		for (var permissionDefinitionKeyValue : list "CONFIGURATION_PERMISSIONS_ADD_DISPLAY_TEMPLATE_CHECKBOX,CONFIGURATION_PERMISSIONS_ADD_TO_PAGE_CHECKBOX,CONFIGURATION_PERMISSIONS_CONFIGURATION_CHECKBOX,CONFIGURATION_PERMISSIONS_CONFIGURATION_CHECKBOX,CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX,CONFIGURATION_PERMISSIONS_PERMISSIONS_CHECKBOX") {
			Role.removePermissionPG(
				permissionDefinitionKey = "${permissionDefinitionKeyValue}",
				roleTitle = "Owner");
		}

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Permissions");

		BlogsConfiguration.selectConfigurationIFrame();

		PermissionsInline.viewPermissionsRemoved(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		PermissionsInline.viewPermissionsRemoved(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Site Member");

		for (var permissionDefinitionKeyValue : list "CONFIGURATION_PERMISSIONS_ADD_DISPLAY_TEMPLATE_CHECKBOX,CONFIGURATION_PERMISSIONS_ADD_TO_PAGE_CHECKBOX,CONFIGURATION_PERMISSIONS_CONFIGURATION_CHECKBOX,CONFIGURATION_PERMISSIONS_CONFIGURATION_CHECKBOX,CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX,CONFIGURATION_PERMISSIONS_PERMISSIONS_CHECKBOX") {
			PermissionsInline.viewPermissionsRemoved(
				permissionDefinitionKey = "${permissionDefinitionKeyValue}",
				roleTitle = "Owner");
		}
	}

	@priority = "4"
	@refactorneeded
	test ViewEntriesUsingCardADT {
		ApplicationDisplayTemplates.selectPortletADT(
			portletName = "Blogs",
			templateName = "Card");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.editContentViaCardViewPG(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edited",
			entryTitle = "Blogs Entry Title");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsEntry.viewPG(
			entryCardTitle = "Blogs Entry Title",
			entryContent = "Blogs Entry Content Edited");
	}

	@description = "This is a usecase for LPS-82025"
	@priority = "5"
	@refactorneeded
	test ViewUpdatedFriendlyURL {
		var portalURL = PropsUtil.get("portal.url");

		BlogsNavigator.openToAddEntry(
			layoutName = "Blogs Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Check(locator1 = "Radio#CUSTOM_URL");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url-1");

		PortletEntry.publish();

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Blogs Page");

		BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Configuration");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		Type(
			locator1 = "TextInput#BLOGS_ENTRY_URL",
			value1 = "custom-url-2");

		PortletEntry.publish();

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/custom-url-1");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/blogs-page/-/blogs/custom-url-2");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

}