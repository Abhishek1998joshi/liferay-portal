@component-name = "portal-categories"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Categories";
	property testray.main.component.name = "Categories";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add three categories in a vocabulary."
	@priority = "5"
	@uitest
	test AddCategories {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add three categories") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			for (var n : list "1,2,3") {
				Category.addCP(
					categoryName = "Category Name ${n}",
					vocabularyName = "Vocabulary Name");
			}
		}

		task ("View the three categories") {
			for (var n : list "1,2,3") {
				Category.viewCP(
					categoryName = "Category Name ${n}",
					vocabularyName = "Vocabulary Name");
			}
		}
	}

	@description = "Add one subcategory in each category."
	@priority = "5"
	@uitest
	test AddSubcategories {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add three categories") {
			for (var n : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "Category Name ${n}",
					vocabularyName = "Vocabulary Name");
			}
		}

		task ("Add one subcategory in each category") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			for (var n : list "1,2,3") {
				Subcategory.addCP(
					categoryName = "Category Name ${n}",
					subcategoryName = "Subcategory Name ${n}",
					vocabularyName = "Vocabulary Name");
			}
		}

		task ("View the new subcategories") {
			for (var n : list "1,2,3") {
				Subcategory.viewCP(
					categoryName = "Category Name ${n}",
					subcategoryName = "Subcategory Name ${n}",
					vocabularyName = "Vocabulary Name");
			}
		}
	}

	@description = "This is a test for LPS-131984. Add three vocabularies in Categories admin."
	@priority = "5"
	@uitest
	test AddVocabularies {
		property portal.acceptance = "true";

		task ("Navigate to Categories admin in Test Site Name") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Categorization",
				portlet = "Categories");
		}

		task ("Add three vocabularies") {
			for (var n : list "1,2,3") {
				Vocabulary.addCP(vocabularyName = "Vocabulary Name ${n}");
			}
		}

		task ("View the new vocabularies") {
			for (var n : list "1,2,3") {
				Navigator.gotoNavNested(navNested = "Vocabulary Name ${n}");

				AssertVisible(
					assetTitle = "Vocabulary Name ${n}",
					info = "Asset Types: All Asset Types",
					locator1 = "Message#ASSET_INFO");

				AssertElementNotPresent(
					assetTitle = "Vocabulary Name ${n}",
					info = "Description:",
					locator1 = "Message#ASSET_INFO");
			}
		}
	}

	@description = "Delete a category by icon."
	@priority = "5"
	@uitest
	test DeleteCategoryByIcon {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Delete the new category by icon") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.deleteByIconCP(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Delete a category by menu."
	@priority = "4"
	@uitest
	test DeleteCategoryByMenu {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Delete the new category by menu") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.deleteCategoryByMenuCP(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Delete a subcategory by icon."
	@priority = "4"
	@uitest
	test DeleteSubcategoryByIcon {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a subcategory") {
			JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Delete the new subcategory by icon") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Subcategory.deleteViaIconCP(
				categoryName = "Category Name",
				subcategoryName = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Delete a subcategory by menu."
	@priority = "5"
	@uitest
	test DeleteSubcategoryByMenu {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a subcategory") {
			JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Delete the new subcategory by menu") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Subcategory.deleteViaMenuCP(
				categoryName = "Category Name",
				subcategoryName = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Delete a vocabulary by icon."
	@priority = "5"
	@uitest
	test DeleteVocabularyByIcon {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Delete the vocabulary by icon") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.deleteByIconCP(vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Delete a vocabulary by menu."
	@priority = "4"
	@uitest
	test DeleteVocabularyByMenu {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Delete the vocabulary by menu") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.deleteByMenuCP(vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Edit a category."
	@priority = "5"
	@uitest
	test EditCategory {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Edit the new category") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.editCP(
				categoryName = "Category Name",
				categoryNameEdit = "Category Name Edit",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the edited category") {
			Category.viewCP(
				categoryName = "Category Name Edit",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Edit a subcategory."
	@priority = "5"
	@uitest
	test EditSubcategory {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a subcategory") {
			JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Edit the new subcategory") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Subcategory.editCP(
				categoryName = "Category Name",
				subcategoryName = "Subcategory Name",
				subcategoryNameEdit = "Subcategory Name Edit",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the edited subcategory") {
			Subcategory.viewCP(
				categoryName = "Category Name",
				subcategoryName = "Subcategory Name Edit",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Edit a vocabulary."
	@priority = "5"
	@uitest
	test EditVocabulary {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Edit the new vocabulary") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.editCP(
				vocabularyName = "Vocabulary Name",
				vocabularyNameEdit = "Vocabulary Name Edit");
		}

		task ("View the edited vocabulary") {
			Vocabulary.viewCP(vocabularyName = "Vocabulary Name Edit");
		}
	}

	@description = "When the user accesses to Categorization > Categories, he can navigate from one to another"
	@priority = "3"
	test MoveBetweenVocabularies {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Edit the new vocabulary") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.goToVocabulary(vocabularyName = "Audience");

			Vocabulary.goToVocabulary(vocabularyName = "Vocabulary Name");
		}
	}

	@description = "This is a test for LPS-118305. The maximum number of categories per vocabulary is 150 shown below vocabulary name in Categories admin by default."
	@priority = "5"
	@uitest
	test ViewDefaultMaximumNumberOfCategoriesPerVocabulary {
		task ("Navigate to the Categories admin") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");
		}

		task ("View the default Maximum Number of categories of existing vocabularies") {
			for (var vocabularyName : list "Topic,Audience,Stage") {
				Navigator.gotoNavNested(navNested = "${vocabularyName}");

				AssertVisible(
					assetTitle = "${vocabularyName}",
					info = "The maximum number of categories per vocabulary is 150.",
					locator1 = "Message#ASSET_INFO");
			}
		}

		task ("Add a new vocabulary") {
			Vocabulary.addCP(vocabularyName = "Vocabulary Name");
		}

		task ("View the default Maximum Number of categories of new vocabulary") {
			AssertVisible(
				assetTitle = "Vocabulary Name",
				info = "The maximum number of categories per vocabulary is 150.",
				locator1 = "Message#ASSET_INFO");
		}
	}

	@description = "This is a test for LPS-131984. The user could view the description of vocabulary in Categories admin."
	@priority = "5"
	@uitest
	test ViewDescriptionOfVocabulary {
		task ("Navigate to the Categories admin") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");
		}

		task ("Add the first vocabulary with a short description") {
			Vocabulary.addCP(
				vocabularyDescription = "2021 Camry",
				vocabularyName = "Vocabulary Name 1");
		}

		task ("View the short description of the first vocabulary in Categories admin") {
			AssertVisible(
				assetTitle = "Vocabulary Name 1",
				info = "Description: 2021 Camry",
				locator1 = "Message#ASSET_INFO");
		}

		task ("View the associated asset type of the first vocabulary in Categories admin") {
			AssertVisible(
				assetTitle = "Vocabulary Name 1",
				info = "Asset Types: All Asset Types",
				locator1 = "Message#ASSET_INFO");
		}

		task ("Add the second vocabulary with a long description more than 150 charactors") {
			Vocabulary.addCP(
				vocabularyDescription = "The powerful, stylish 2021 Camry Hybrid gives up nothing with its optimized fuel economy, advanced tech and stirring drive. We have expanded our hybrid battery warranty to reflect our confidence in the quality, dependability and reliability of our products. From the 2020 model year forward, every Toyota hybrid battery warranty will cover 10 years from date of first use or 150,000 miles, whichever comes first (previously 8 years or 100,000 miles).",
				vocabularyName = "Vocabulary Name 2");
		}

		task ("View the full description of the second vocabulary in Categories admin") {
			AssertVisible(
				assetTitle = "Vocabulary Name 2",
				info = "Description: The powerful, stylish 2021 Camry Hybrid gives up nothing with its optimized fuel economy, advanced tech and stirring drive. We have expanded our hybrid battery warranty to reflect our confidence in the quality, dependability and reliability of our products. From the 2020 model year forward, every Toyota hybrid battery warranty will cover 10 years from date of first use or 150,000 miles, whichever comes first (previously 8 years or 100,000 miles).",
				locator1 = "Message#ASSET_INFO");
		}

		task ("View the associated asset type of the second vocabulary in Categories admin") {
			AssertVisible(
				assetTitle = "Vocabulary Name 2",
				info = "Asset Types: All Asset Types",
				locator1 = "Message#ASSET_INFO");
		}
	}

}