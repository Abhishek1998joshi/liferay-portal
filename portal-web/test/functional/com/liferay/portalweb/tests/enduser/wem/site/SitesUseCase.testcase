@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			Site.tearDownCP();

			Organization.tearDownCP();

			Team.tearDownCP();

			Page.tearDownCP();

			UserGroup.tearDownCP();
		}
	}

	@description = "Export and import work in organization and add child site from imported site template."
	@priority = "5"
	test AddChildSiteFromImportedSiteTemplate {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "SitesUsecase#AddChildSiteFromImportedSiteTemplate";
		property testray.component.names = "Training";

		JSONOrganization.addOrganization(organizationName = "Space Program Academy of Continuing Education");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Suborganization.addCP(
			orgName = "Space Program Academy of Continuing Education",
			suborgName = "College of Agricultural Science");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		LAR.exportPortlet(larFileName = "organizations.lar");

		Suborganization.removeCP(
			orgName = "Space Program Academy of Continuing Education",
			subOrgName = "College of Agricultural Science");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.deleteCP(orgName = "Space Program Academy of Continuing Education");

		Organization.deleteCP(orgName = "College of Agricultural Science");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		LAR.importPortlet(
			larFileName = "organizations.lar",
			portletName = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.viewCP(
			orgName = "Space Program Academy of Continuing Education",
			orgType = "Organization");

		User.openUsersAdmin();

		Organization.addSiteCP(orgName = "College of Agricultural Science");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		SiteTemplates.addCP(siteTemplateName = "Digital Class Room");

		for (var pageName : list "Courses,Student Boards,Materials") {
			SiteTemplates.addSitePageViaSiteTemplateCP(
				pageName = "${pageName}",
				siteTemplateName = "Digital Class Room");
		}

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LAR.exportPortlet(larFileName = "class-site-template.lar");

		SiteTemplates.deleteCP(siteTemplateName = "Digital Class Room");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LAR.importPortlet(
			larFileName = "class-site-template.lar",
			portletName = "Site Templates",
			siteTemplateName = "Digital Class Room");

		Site.openSitesAdmin();

		Site.addBlankCP(
			membershipType = "Private",
			parentSiteName = "College of Agricultural Science",
			siteName = "Moon Rocks 101",
			siteType = "Blank");

		Navigator.gotoBack();

		Site.selectPageType(
			selectPrivatePages = "true",
			siteTemplate = "Digital Class Room");

		Site.openSitesAdmin();

		Site.addBlankCP(
			membershipType = "Private",
			parentSiteName = "College of Agricultural Science",
			siteName = "Moon Rocks 202",
			siteType = "Blank");

		Navigator.gotoBack();

		Site.selectPageType(
			checkPrivatePagesPropagation = "true",
			selectPrivatePages = "true",
			siteTemplate = "Digital Class Room");

		Navigator.openPrivateSiteURL(siteName = "Moon Rocks 101");

		for (var pageName : list "Courses,Student Boards,Materials") {
			Navigator.gotoPrivateSitePage(
				pageName = "${pageName}",
				siteName = "Moon Rocks 101");
		}

		Navigator.openPrivateSiteURL(siteName = "Moon Rocks 202");

		for (var pageName : list "Courses,Student Boards,Materials") {
			Navigator.gotoPrivateSitePage(
				pageName = "${pageName}",
				siteName = "Moon Rocks 202");
		}
	}

	@description = "Add 2 organization sites and deactive organization site using new created user."
	@priority = "5"
	test AddOrganizationSitesAndDeactivate {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SitesUseCase#AddOrganizationSitesAndDeactivate";
		property testray.component.names = "Site Administration,Training,Users and Organizations";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Inactive Request Handler",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "Show Inactive Request Message");

		SystemSettings.saveConfiguration();

		SiteTemplates.addCP(siteTemplateName = "Site Template Name 1");

		SiteTemplates.addCP(siteTemplateName = "Site Template Name 2");

		JSONOrganization.addOrganization(organizationName = "Organization Name 1");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(
			orgName = "Organization Name 1",
			siteTemplateName = "Site Template Name 1");

		Site.openSiteSettingsAdmin(siteURLKey = "organization-name-1");

		Site.manageMembershipOptions(
			allowManualMembershipManagement = "true",
			membershipType = "Open",
			selectMembershipType = "true");

		Site.openSitesAdmin();

		Site.viewCP(
			siteMember = "Organization",
			siteName = "Organization Name 1");

		JSONOrganization.addOrganization(organizationName = "Organization Name 2");

		User.openUsersAdmin();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.addSiteCP(
			orgName = "Organization Name 2",
			siteTemplateName = "Site Template Name 2");

		Site.openSiteSettingsAdmin(siteURLKey = "organization-name-2");

		Site.manageMembershipOptions(
			allowManualMembershipManagement = "true",
			membershipType = "Open",
			selectMembershipType = "true");

		Site.openSitesAdmin();

		Site.viewCP(
			siteMember = "Organization",
			siteName = "Organization Name 2");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		Site.assignUserSitesCP(
			siteName = "Organization Name 1",
			userScreenName = "usersn");

		User.openUsersAdmin();

		Site.assignUserSitesCP(
			siteName = "Organization Name 2",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		User.firstLoginPG(userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Organization Name 1");

		Page.viewDefaultSiteTemplatePagesPG(
			pageName = "Home",
			siteName = "Organization Name 1");

		Navigator.openSiteURL(siteName = "Organization Name 2");

		Page.viewDefaultSiteTemplatePagesPG(
			pageName = "Home",
			siteName = "Organization Name 2");

		Navigator.openSiteURL(siteName = "Organization Name 2");

		Site.openSitesAdmin();

		Site.deactivateCP(
			siteName = "Organization Name 2",
			successMessage = "true");

		var baseURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${baseURL}/web/organization-name-2");

		Page.viewInactiveRequestMessage(resource = "site");
	}

	@description = "Assert user can't assign user group with regular role with assign memebers."
	@priority = "3"
	test OnlySiteOwnersCanAssignSiteRolesToUserGroups {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration,User Groups";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(userGroupName = "UG UserGroup Name");

		Site.openSiteMembershipsAdmin(siteURLKey = "guest");

		Site.assignUserGroupAsMemberCP(userGroupName = "UG UserGroup Name");

		JSONRole.addRegularRole(
			roleKey = "Roles Regrole Name",
			roleTitle = "Roles Regrole Name");

		for (var resourceActionIndex : list "ASSIGN_MEMBERS,ASSIGN_USER_ROLES,VIEW_MEMBERS,VIEW_SITE_ADMINISTRATION") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Roles Regrole Name");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Roles Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ASSIGN_MEMBERS",
			resourceName = "com.liferay.portal.kernel.model.Role",
			roleTitle = "Roles Regrole Name");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Roles Regrole Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Site.openSiteMembershipsAdmin(siteURLKey = "guest");

		Site.assignSiteRoleCP(
			resourceName = "userfn userln",
			roleTitle = "Roles Siterole Name");

		Site.openSiteMembershipsAdmin(siteURLKey = "guest");

		NavItem.gotoUserGroups();

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");
	}

	@description = "Private virtual hosts redirects to private page."
	@priority = "4"
	test PrivateVirtualHostUrlDoesNotRedirectUserToLoginPage {
		property custom.properties = "auth.login.prompt.enabled=true${line.separator}jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Site.openSiteSettingsAdmin(siteURLKey = "guest");

		Site.addVirtualHostsURLCP(
			privatePageVirtualHostURL = "www.able.com",
			privateVirtualHosts = "true");

		JSONLayout.addPrivateLayout(
			groupName = "Guest",
			layoutName = "Test Private Page");

		User.logoutPG();

		Navigator.openSpecificURL(url = "http://www.able.com:8080/test-private-page");

		Site.viewPrivateVirtualHostURLUserLoginRedirect(userEmailAddress = "@liferay.com");

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		User.firstLoginUI(
			specificURL = "http://www.able.com:8080/test-private-page",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		Navigator.openSpecificURL(url = "http://www.able.com:8080/test-private-page");

		AssertLocation(value1 = "http://www.able.com:8080/test-private-page");
	}

	@description = "Assert user can't assign user group with regular role with assign memebers."
	@priority = "3"
	test ReturnWrongLayoutForSignedInUserWithVirtualHostsConfigured {
		property custom.properties = "layout.default.template.id=2_columns_iii${line.separator}layout.user.private.layouts.enabled=false${line.separator}layout.user.private.layouts.auto.create=false${line.separator}layout.user.private.layouts.power.user.required=true${line.separator}layout.user.public.layouts.enabled=false${line.separator}layout.user.public.layouts.auto.create=false${line.separator}layout.user.public.layouts.power.user.required=true";
		property test.smtp.server.enabled = "true";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Site Page Name");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Instance Configuration",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.editVirtualHostCP(virtualHostName = "www.able.com");

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.editConfigurationAuthenticationGeneral(enableRequireStrangers = "true");

		PortalSettings.editConfigurationUsersEmailNotificationsCP(
			configurationName = "Email Verification Notification",
			notificationsBody = "[$EMAIL_VERIFICATION_CODE$]");

		Site.openSiteSettingsAdmin(siteURLKey = "site-name");

		Site.addVirtualHostsURLCP(
			publicPageVirtualHostURL = "www.baker.com",
			publicVirtualHosts = "true");

		User.firstLoginUI(specificURL = "http://www.baker.com:8080");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "user1@liferay.com",
			userFirstName = "user1",
			userLastName = "user1",
			userScreenName = "user1");

		User.editPassword(requirePasswordReset = "true");

		UserBar.signOut();

		User.firstLoginUI(
			password = "password",
			specificURL = "http://www.baker.com:8080",
			userEmailAddress = "user1@liferay.com");

		Button.click(button = "Send New Verification Code");

		var emailVerification = MockMock.getHTMLBodyFormattedText(
			newTab = "true",
			recipient = "user1@",
			sender = "Joe Bloggs",
			subject = "http://www.baker.com:8080: Email Address Verification");

		Close.closeWindow();

		Type(
			locator1 = "SignInCreateAccount#EMAIL_VERIFICATION_CODE_FIELD",
			value1 = "${emailVerification}");

		Button.clickVerifyButton();

		User.resetPassword();

		User.answerPasswordReminder();

		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");

		UserBar.signOut();

		MockMock.deleteMail(
			asset = "http://www.baker.com:8080: Email Address Verification",
			newTab = "true");

		Close.closeWindow();

		User.firstLoginUI(specificURL = "http://www.able.com:8080");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Email Verification Notification",
			configurationScope = "Virtual Instance Scope");

		Type.typeCKEditor(
			locator1 = "CKEditor#BODY_FIELD",
			value1 = "[$EMAIL_VERIFICATION_URL$]");

		PortletEntry.save();

		UserBar.signOut();

		User.firstLoginUI(
			specificURL = "http://www.baker.com:8080",
			userEmailAddress = "user1@liferay.com");

		Navigator.gotoAccountSettings();

		User.editUserInformation(userEmailAddressEdit = "user2@liferay.com");

		var emailAddressVerificationURL = MockMock.getHTMLBodyFormattedText(
			newTab = "true",
			recipient = "user2@",
			sender = "Joe Bloggs",
			subject = "http://www.baker.com:8080: Email Address Verification");

		Close.closeWindow();

		Navigator.openSpecificURL(url = "${emailAddressVerificationURL}");

		Button.clickVerifyButton();

		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");

		MockMock.deleteMail(asset = "http://www.baker.com:8080: Email Address Verification");
	}

	@description = "This test is based on LPS-14245 and it is designed to have the User test if the LayouImporter checks when the Page Names are different but the Friendly URL is the same. The User will assert no errors display when a User is assigned to a User Group with the same Friendly URL. The User will also assert that they can enter a Friendly URL through the Site Manager with adding a slash."
	@priority = "3"
	test SiteFriendlyURLLayoutImporter {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration";

		var portalURL = PropsUtil.get("portal.url");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(userGroupName = "User Group Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.gotoAddPageCP(userGroupName = "User Group Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		SitePages.addPublicPage(pageName = "site Page Name");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		UserGroup.openUserGroupsAdmin();

		UserGroup.assignMemberCP(
			userGroupName = "User Group Name",
			userScreenName = "usersn");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

		AssertLocation(value1 = "${portalURL}/user/usersn");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Site Page Name");

		Site.openSiteSettingsAdmin(siteURLKey = "guest");

		Site.editFriendlyURLCP(siteFriendlyURLEdit = "/liferay");

		Navigator.openSpecificURL(url = "${portalURL}/web/liferay/site-page-name");

		AssertLocation(value1 = "${portalURL}/web/liferay/site-page-name");

		Site.openSiteSettingsAdmin(siteURLKey = "liferay");

		Site.editFriendlyURLCP(siteFriendlyURLEdit = "/guest");
	}

	@description = "In one coummuty site and one edited site with page template, can deactive Community site."
	@priority = "3"
	test SitesDeactivated {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "SitesUsecase#SitesDeactivated";
		property testray.component.names = "Site Administration";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Inactive Request Handler",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "Show Inactive Request Message");

		SystemSettings.saveConfiguration();

		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		JSONGroup.addGroup(groupName = "Site1 Name");

		Site.openSiteSettingsAdmin(siteURLKey = "site1-name");

		Site.selectPageType(
			selectPublicPages = "true",
			siteTemplate = "Site Template Name");

		JSONGroup.addGroup(groupName = "Site2 Name");

		Site.openSiteSettingsAdmin(siteURLKey = "site2-name");

		Site.editCP(
			siteName = "Site2 Name",
			siteNameEdit = "Site2 Name Edit");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		User.editUserSiteCP(
			siteName = "Site1 Name",
			userScreenName = "usersn");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.openSiteURL(siteName = "Site1 Name");

		Page.viewDefaultSiteTemplatePagesPG(
			pageName = "Home",
			siteName = "Site1 Name",
			siteTemplate = "Community");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Site.openSiteSettingsAdmin(siteURLKey = "site1-name");

		Site.inactivateCP(siteName = "Site1 Name");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		var baseURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${baseURL}/web/site1-name");

		Page.viewInactiveRequestMessage(resource = "site");
	}

	@description = "Manage demo site virtual URL, friendly URL and logo, add JS to page, export and import page with child pages."
	@priority = "4"
	test SitesDemoSiteManagement {
		property custom.properties = "auth.login.prompt.enabled=true${line.separator}jsonws.web.service.paths.excludes=";
		property portal.release = "true";
		property test.name.skip.portal.instance = "SitesUsecase#SitesDemoSiteManagement";
		property testray.component.names = "Site Administration,Site Pages Administration";

		var portalURL = PropsUtil.get("portal.url");

		Site.openSitesAdmin();

		Site.addBlankCP(
			membershipTypeOption = "Open",
			siteDescription = "This is the site description test",
			siteDetails = "true",
			siteName = "World Cup - Russia 2018");

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Site Settings");

		for (var tagName : list "World Cup,Russia,2018") {
			Tag.addViaSiteCP(tagName = "${tagName}");
		}

		Site.addVirtualHostsURLCP(
			privatePageVirtualHostURL = "www.baker.com",
			privateVirtualHosts = "true",
			publicPageVirtualHostURL = "www.able.com",
			publicVirtualHosts = "true");

		Navigator.gotoBack();

		Site.editFriendlyURLCP(siteFriendlyURLEdit = "/russia2018");

		for (var publicPageName : list "Home,Arenas") {
			JSONLayout.addPublicLayout(
				groupName = "World Cup - Russia 2018",
				layoutName = "${publicPageName}");
		}

		for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
			JSONLayout.addPublicLayout(
				groupName = "World Cup - Russia 2018",
				layoutName = "${childPageName}",
				parentLayoutName = "Arenas");
		}

		for (var privatePageName : list "Accomodations,Maps") {
			JSONLayout.addPrivateLayout(
				groupName = "World Cup - Russia 2018",
				layoutName = "${privatePageName}");
		}

		SitePages.openPagesAdmin(siteURLKey = "russia2018");

		Site.changeSiteLogo(
			logoFile = "Document_3.png",
			pageName = "Public Pages");

		SitePages.openPagesAdmin(siteURLKey = "russia2018");

		Page.addJavaScript(
			javaScript = "alert(&apos;Welcome to Russia.&apos;);",
			pageName = "Arenas");

		Open.openNoError(locator1 = "${portalURL}/web/russia2018/Arenas");

		AssertConfirm(value1 = "Welcome to Russia.");

		User.logoutPG();

		Open.openNoError(locator1 = "${portalURL}/web/russia2018/Arenas");

		AssertConfirm(value1 = "Welcome to Russia.");

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Open.openNoError(locator1 = "${portalURL}/web/russia2018");

		Page.viewCustomLogoPG();

		for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
			Page.viewChildPageDropdown(
				childPageName = "${childPageName}",
				javaScriptPage = "Welcome to Russia.",
				pageName = "Arenas",
				viewChildPageDropdown = "PAGE_2");
		}

		Open.openNoError(locator1 = "${portalURL}/web/russia2018");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		Page.addJavaScript(
			javaScript = " ",
			pageName = "Arenas");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		Site.assignUserSitesCP(
			siteName = "World Cup - Russia 2018",
			userScreenName = "usersn");

		User.openUsersAdmin();

		User.assignSiteRoleCP(
			siteRoleName = "Site Administrator",
			userScreenName = "usersn");

		User.logoutPG();

		User.viewLoggedOutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.baker.com:8080/group/russia2018",
			userEmailAddress = "userea@liferay.com");

		Page.viewSpecificPG(pageNameList = "Accomodations,Maps");

		User.firstLoginUI(
			password = "test",
			specificURL = "${portalURL}/web/russia2018",
			userEmailAddress = "userea@liferay.com");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Export");

		LexiconEntry.gotoAdd();

		LAR.exportWithAssertionOnSuccess();

		var larFileName = LAR.getLarFileName();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Click(locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_DOWNLOAD");

		DownloadTempFile();

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
			Navigator.gotoSitePage(
				pageName = "Home",
				siteName = "Site Name");

			Page.viewChildPageDropdown(
				childPageName = "${childPageName}",
				pageName = "Arenas",
				viewChildPageDropdown = "PAGE_2");
		}
	}

	@description = "This is a test for LPS-102711. The changes of site scope configuration in Instance Settings should be applied to the site."
	@priority = "4"
	test ViewChangesOfSiteScopeConfigurationDefinedInInstanceSettings {
		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Navigate to Site Settings admin in new site") {
			Site.openSiteSettingsAdmin(siteURLKey = "Test Site Name");
		}

		task ("Navigate to Message Boards configuration") {
			Click(
				key_itemName = "Message Boards",
				locator1 = "ListGroupItem#ITEM_TEXT");
		}

		task ("View the checkbox of Message Boards is unchecked") {
			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = "Enable Message Boards Moderation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Navigate to Message Boards configuration in Instance Settings") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Message Boards",
				configurationName = "Message Boards Moderation Workflow",
				configurationScope = "Site Scope");
		}

		task ("Check the Enable Message Boards Moderation") {
			Check.checkNotVisible(
				checkboxName = "Enable Message Boards Moderation",
				locator1 = "Checkbox#ANY_CHECKBOX");

			SystemSettings.saveConfiguration();
		}

		task ("Navigate to Site Settings admin in new site") {
			Site.openSiteSettingsAdmin(siteURLKey = "Test Site Name");
		}

		task ("Navigate to Message Boards configuration") {
			Click(
				key_itemName = "Message Boards",
				locator1 = "ListGroupItem#ITEM_TEXT");
		}

		task ("View the checkbox of Message Boards is checked") {
			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Enable Message Boards Moderation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@description = "This ensures that the custom site logo can be viewed in cards and list views."
	@priority = "4"
	test ViewSiteLogo {
		property portal.upstream = "true";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Site Page");

		JSONGroup.addChildGroup(
			groupName = "Child SiteName",
			parentGroupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Child SiteName",
			layoutName = "Site Page",
			parentGroupName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Site.changeSiteLogo(
			logoFile = "Document_2.png",
			pageName = "Public Pages");

		Navigator.openSiteURL(siteName = "Child SiteName");

		Site.changeSiteLogo(
			logoFile = "Document_3.png",
			pageName = "Public Pages");

		Site.viewCustomSiteLogoInDifferentViews(site = "Site Name");

		IFrame.closeFrame();

		Site.viewCustomSiteLogoInDifferentViews(site = "Child SiteName");
	}

}