@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONFragment.addFragmentCollection(
			groupName = "Test Site Name",
			name = "Collection Name");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-97184. Invalid fragment configuration cannot be published and offers useful advice."
	@priority = "4"
	test AddInvalidConfiguration {
		FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

		FragmentsEditor.gotoConfigurationTab();

		Pause(locator1 = "3000");

		FragmentsEditor.typeFileContent(fileName = "fragment_configuration_invalid.json");

		FragmentsEditor.gotoCodeTab();

		task ("Publish the fragment and assert there is an error message") {
			Button.clickPublish();

			Alert.viewErrorMessage(errorMessage = "Please provide a valid configuration for the fragment.");
		}
	}

	@description = "This is a test for LPS-97184. Valid fragment configuration can be published."
	@priority = "4"
	test AddValidConfiguration {
		FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

		FragmentsEditor.gotoConfigurationTab();

		Pause(locator1 = "3000");

		FragmentsEditor.typeFileContent(fileName = "fragment_configuration.json");

		FragmentsEditor.gotoCodeTab();

		Pause(locator1 = "3000");

		FragmentsEditor.typeFileContent(fileName = "fragment_configuration.html");

		FragmentsEditor.publish();
	}

	@description = "This is a test for LPS-99377. User can change checkbox fragment configuration."
	@priority = "5"
	test ConfigureCheckboxConfigurationInContentPage {
		property portal.acceptance = "true";

		task ("Add a fragment with checkbox configuration") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "checkbox_configuration.html");
			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "checkbox_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Checkbox Fragment Example");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Checkbox Fragment Example");
		}

		task ("Configure the new fragment") {
			PageEditorConfiguration.checkConfigCheckbox(
				checkboxName = "Hide Body",
				fragmentName = "Checkbox Fragment Example");

			PageEditorConfiguration.checkConfigCheckbox(
				checkboxName = "Make Bold",
				fragmentName = "Checkbox Fragment Example");

			PageEditor.clickPublish();
		}

		task ("View the fragment configuration at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'fragment-configuration')]//h3[contains(.,'Body Present!!')]");

			AssertElementPresent(locator1 = "//div[contains(@class,'fragment-configuration')]//b[contains(.,'Bold Words')]");
		}
	}

	@description = "This is a test for LPS-97179. User can change colorPalette fragment configuration."
	@priority = "5"
	test ConfigureColorPaletteInContentPage {
		property portal.acceptance = "true";

		task ("Add a fragment with colorPalette configuration") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "colorPalette_configuration.html");
			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "colorPalette_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "ColorPalette Fragment Example");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "ColorPalette Fragment Example");
		}

		task ("Configure the new fragment") {
			PageEditorConfiguration.changeConfigColor(
				colorPalette = "danger",
				fragmentName = "ColorPalette Fragment Example");

			PageEditor.clickPublish();
		}

		task ("View the fragment configuration at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'fragment-configuration')]//h3[contains(.,'Example Color White')]");

			AssertElementPresent(locator1 = "//div[contains(@class,'fragment-configuration')]//h3[contains(.,'Example Color Red')]");
		}
	}

	@description = "This is a test for LPS-96685. User can change select fragment configuration."
	@priority = "5"
	test ConfigureSelectConfigurationInContentPage {
		property portal.acceptance = "true";

		task ("Add a fragment with select configuration") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "select_configuration.html");
			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "select_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Select Fragment Example");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Select Fragment Example");
		}

		task ("Configure the new fragment") {
			PageEditorConfiguration.changeConfigSelection(
				fragmentName = "Select Fragment Example",
				optionValue = "dark");

			PageEditor.clickPublish();
		}

		task ("View the fragment configuration at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(locator1 = "//div[contains(@class,'fragment-configuration')]/div[contains(@class,'dark')]");
		}
	}

	@description = "This is a test for LPS-99543. User can change text fragment configuration."
	@priority = "5"
	test ConfigureTextConfigurationInContentPage {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a fragment with text configuration") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "text_configuration.html");
			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "text_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Text Fragment Example");
		}

		task ("Add a new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Text Fragment Example");
		}

		task ("View the placeholder is shown in configuration field") {
			PageEditor.gotoConfiguration(fragmentName = "Text Fragment Example");

			AssertAttributeValue(
				attribute1 = "placeholder",
				key_fieldLabel = "Button Text",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Placeholder");
		}

		task ("Configure the new fragment") {
			PageEditorConfiguration.changeConfigText(
				editableText = "Updated fragment text",
				fragmentName = "Text Fragment Example",
				textConfigName = "buttonText");

			PageEditor.clickPublish();
		}

		task ("View the fragment configuration at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_content = "Updated fragment text",
				key_fragmentClass = "configuration",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-101326. View placeholder in fragment configuration without default value."
	@priority = "5"
	test ViewPlaceholderInConfigurationWithoutDefaultValue {
		property portal.acceptance = "true";

		task ("Add a fragment with text configuration without default value") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "text_configuration.html");
			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "placeholder_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Text Fragment Example");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Text Fragment Example");
		}

		task ("View the placeholder is shown in configuration field") {
			PageEditor.gotoConfiguration(fragmentName = "Text Fragment Example");

			AssertAttributeValue(
				attribute1 = "placeholder",
				key_fieldLabel = "Button Text",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Placeholder");
		}
	}

	@description = "This is a test for LPS-109138. When type email address in the configuration text field, the field can constraint min and max length."
	@priority = "4"
	test ViewValidationInTextFieldWithEmailConstraintRules {
		task ("Add a fragment with email constraint rules in configuration text field") {
			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

			FragmentsEditor.gotoConfigurationTab();

			var jsonSnippet = '''
{
	"fieldSets": [
		{
			"fields": [
				{
					"label": "Email Address",
					"name": "emailAddress",
					"type": "text",
					"typeOptions": {
						"placeholder": "test@liferay.com",
						"validation": {
						"errorMessage": "Please enter a email address with 14-30 characters",
						"type": "email",
						"minLength": 14,
						"maxLength": 30
						}
					}
				}
			]
		}
	]
}
			''';

			FragmentsEditor.typeConfigurationEditor(content = "${jsonSnippet}");

			Pause(locator1 = "3000");

			FragmentsEditor.gotoCodeTab();

			var htmlSnippet = '''
<div class="fragment_example">
	<div class="portlet-msg-info">Please enter info in configuration.</div>
</div>
			''';

			FragmentsEditor.typeHtmlEditor(content = "${htmlSnippet}");

			FragmentsEditor.publish();
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add the new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");

			AssertVisible(
				key_fragmentName = "Fragment Name",
				key_messageIfo = "Please enter info in configuration.",
				locator1 = "Fragment#MESSAGE_INFO");
		}

		task ("View alert message is shown when type t@liferay.com in Email Address field") {
			PageEditor.clickConfigurableField(fragmentName = "Fragment Name");

			Type(
				key_text = "Email Address",
				locator1 = "TextInput#ANY",
				value1 = "t@liferay.com");

			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Please enter a email address with 14-30 characters");
		}

		task ("View alert message is shown when type giannis.antetokounmpo@liferay.com in Email Address field") {
			PageEditor.clickManagementBar();

			PageEditor.clickConfigurableField(fragmentName = "Fragment Name");

			Type.sendKeys(
				key_text = "Email Address",
				locator1 = "TextInput#ANY",
				value1 = "giannis.antetokounmpo@liferay.com");

			AssertTextEquals(
				key_text = "Email Address",
				locator1 = "TextInput#ANY",
				value1 = "giannis.antetokounmpo@liferay.");

			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Please enter a email address with 14-30 characters");
		}

		task ("View alert message is not shown when type userea@liferay.com in Email Address field") {
			Type(
				key_text = "Email Address",
				locator1 = "TextInput#ANY",
				value1 = "userea@liferay.com");

			AssertElementNotPresent(locator1 = "Message#WARNING_FEEDBACK");
		}
	}

	@description = "This is a test for LPS-109138. When type integer in the configuration text field, the field can constraint min and max value."
	@priority = "4"
	test ViewValidationInTextFieldWithNumberConstraintRules {
		task ("Add a fragment with number constraint rules in configuration text field") {
			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

			FragmentsEditor.gotoConfigurationTab();

			var jsonSnippet = '''
{
	"fieldSets": [
		{
			"fields": [
				{
					"label": "Age",
					"name": "age",
					"type": "text",
					"typeOptions": {
						"placeholder": "25",
						"validation": {
							"errorMessage": "Please enter a valid age",
							"type": "number",
							"min": 18,
							"max": 65
						}
					}
				}
			]
		}
	]
}
			''';

			FragmentsEditor.typeConfigurationEditor(content = "${jsonSnippet}");

			Pause(locator1 = "3000");

			FragmentsEditor.gotoCodeTab();

			var htmlSnippet = '''
<div class="fragment_example">
	<div class="portlet-msg-info">Please enter info in configuration.</div>
</div>
			''';

			FragmentsEditor.typeHtmlEditor(content = "${htmlSnippet}");

			FragmentsEditor.publish();
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add the new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");

			AssertVisible(
				key_fragmentName = "Fragment Name",
				key_messageIfo = "Please enter info in configuration.",
				locator1 = "Fragment#MESSAGE_INFO");
		}

		task ("View alert message is shown when type 10 in Age field") {
			PageEditor.clickConfigurableField(fragmentName = "Fragment Name");

			Type(
				key_text = "Age",
				locator1 = "TextInput#ANY",
				value1 = "10");

			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Please enter a valid age");
		}

		task ("View alert message is shown when type 70 in Age field") {
			Type(
				key_text = "Age",
				locator1 = "TextInput#ANY",
				value1 = "70");

			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Please enter a valid age");
		}

		task ("View alert message is not shown when type 30 in Age field") {
			Type(
				key_text = "Age",
				locator1 = "TextInput#ANY",
				value1 = "30");

			AssertElementNotPresent(locator1 = "Message#WARNING_FEEDBACK");
		}
	}

	@description = "This is a test for LPS-109138. When type URL in the configuration text field, the field can constraint min and max length."
	@priority = "4"
	test ViewValidationInTextFieldWithURLConstraintRules {
		task ("Add a fragment with URL constraint rules in configuration text field") {
			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

			FragmentsEditor.gotoConfigurationTab();

			var jsonSnippet = '''
{
	"fieldSets": [
		{
			"fields": [
				{
					"label": "URL",
					"name": "url",
					"type": "text",
					"typeOptions": {
						"placeholder": "https://issues.liferay.com",
						"validation": {
							"errorMessage": "Please enter a valid URL with 22-35 characters",
							"type": "url",
							"minLength": 22,
							"maxLength": 35
						}
					}
				}
			]
		}
	]
}
			''';

			FragmentsEditor.typeConfigurationEditor(content = "${jsonSnippet}");

			Pause(locator1 = "3000");

			FragmentsEditor.gotoCodeTab();

			var htmlSnippet = '''
<div class="fragment_example">
	<div class="portlet-msg-info">Please enter info in configuration.</div>
</div>
			''';

			FragmentsEditor.typeHtmlEditor(content = "${htmlSnippet}");

			FragmentsEditor.publish();
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add the new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");

			AssertVisible(
				key_fragmentName = "Fragment Name",
				key_messageIfo = "Please enter info in configuration.",
				locator1 = "Fragment#MESSAGE_INFO");
		}

		task ("View alert message is shown when type https://w.liferay.com in URL field") {
			PageEditor.clickConfigurableField(fragmentName = "Fragment Name");

			Type(
				key_text = "URL",
				locator1 = "TextInput#ANY",
				value1 = "https://w.liferay.com");

			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Please enter a valid URL with 22-35 characters");
		}

		task ("View trimmed text when type https://giannisantetokounmpo.liferay.com in Email Address field") {
			PageEditor.clickManagementBar();

			PageEditor.clickConfigurableField(fragmentName = "Fragment Name");

			Type.sendKeys(
				key_text = "URL",
				locator1 = "TextInput#ANY",
				value1 = "https://giannisantetokounmpo.liferay.com");

			AssertTextEquals(
				key_text = "URL",
				locator1 = "TextInput#ANY",
				value1 = "https://giannisantetokounmpo.lifera");
		}

		task ("View alert message is not shown when type userea@liferay.com in Email Address field") {
			Type(
				key_text = "URL",
				locator1 = "TextInput#ANY",
				value1 = "https://testray.liferay.com");

			AssertElementNotPresent(locator1 = "Message#WARNING_FEEDBACK");
		}
	}
}