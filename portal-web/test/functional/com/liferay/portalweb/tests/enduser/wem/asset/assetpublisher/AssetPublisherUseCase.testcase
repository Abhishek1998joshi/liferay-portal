@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Asset Publisher";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Site.tearDownCP();

			JSONUser.tearDownNonAdminUsers();
		}
	}

	@description = "Add and edit web content via Asset Publisher in organization site with virtual host."
	@priority = "4"
	test AddAndEditWebContentViaAssetPublisherInOrganizationSiteWithVirtualHost {
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com,www.baker.com";
		property test.name.skip.portal.instance = "AssetPublisherUseCase#AddAndEditWebContentViaAssetPublisherInOrganizationSiteWithVirtualHost";

		task ("Add an organization with site") {
			JSONOrganization.addOrganization(
				organizationName = "Organization Name",
				organizationSite = "true");
		}

		task ("Add private pages in organization site") {
			for (var layoutName : list "Welcome,Documents and Media,News") {
				JSONLayout.addPrivateLayout(
					groupName = "Organization Name",
					layoutName = "${layoutName}");
			}
		}

		task ("Execute reindex all") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Search");

			SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");
		}

		task ("Assign user to organization") {
			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "test@liferay.com");
		}

		task ("Define public virtual host and private virtual host") {
			Site.openSiteSettingsAdmin(siteURLKey = "organization-name");

			Site.addVirtualHostsURLCP(
				publicPageVirtualHostURL = "www.able.com",
				publicVirtualHosts = "true");

			Site.openSiteSettingsAdmin(siteURLKey = "organization-name");

			Site.addVirtualHostsURLCP(
				privatePageVirtualHostURL = "www.baker.com",
				privateVirtualHosts = "true");
		}

		task ("Sign in the prviate virtual host") {
			User.logoutPG();

			User.firstLoginUI(specificURL = "http://www.baker.com:8080");
		}

		task ("View prviate pages") {
			for (var sitePageName : list "Welcome,Documents and Media,News") {
				AssertElementPresent(
					key_pageName = "${sitePageName}",
					locator1 = "Home#PAGE");
			}
		}

		task ("Sign in the public virtual host") {
			User.firstLoginUI(specificURL = "http://www.able.com:8080");
		}

		task ("View public pages not shown") {
			for (var sitePageName : list "Welcome,Documents and Media,News") {
				AssertElementNotPresent(
					key_pageName = "${sitePageName}",
					locator1 = "Home#PAGE");
			}
		}

		task ("Add a public page in organization site") {
			JSONLayout.addPublicLayout(
				groupName = "Organization Name",
				layoutName = "Web Content Page");
		}

		task ("Add an Asset Publisher to public page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Organization Name",
				layoutName = "Web Content Page",
				widgetName = "Asset Publisher");
		}

		task ("Add a web content via Asset Publisher") {
			Navigator.gotoSpecificURLPage(
				pageName = "Web Content Page",
				url = "http://www.able.com:8080");

			WebContent.addPGViaAP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			WebContent.viewPGViaAP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");
		}

		task ("Edit the web content via Asset Publisher") {
			Navigator.gotoSpecificURLPage(
				pageName = "Web Content Page",
				url = "http://www.able.com:8080");

			AssetPublisherPortlet.gotoEditAssetPG(assetTitle = "WC WebContent Title");

			WebContent.addCP(
				webContentContent = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title Edit");

			PortletEntry.publish();
		}

		task ("View the edited web content in Asset Publisher") {
			Navigator.gotoSpecificURLPage(
				pageName = "Web Content Page",
				url = "http://www.able.com:8080");

			WebContent.viewPGViaAP(
				webContentContent = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title Edit");
		}

		task ("Sign in the localhost") {
			User.logoutPG();

			User.loginPG();
		}

		task ("View the edited web content in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Web Content Page",
				siteName = "Organization Name");

			WebContent.viewPGViaAP(
				webContentContent = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title Edit");
		}
	}

	@priority = "3"
	test AssetPublisherHasOpenOfficeFileTypeLinks {
		property test.name.skip.portal.instance = "AssetPublisherUseCase#AssetPublisherHasOpenOfficeFileTypeLinks";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Connectors",
			configurationName = "OpenOffice Integration",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "serverEnabled");

		SystemSettings.saveConfiguration();

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureDisplayConversionsPG(
			check = "true",
			documentTypes = "doc,odt,pdf,rtf,sxw,txt");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		WebContent.viewConversionLinksPGViaAP(
			documentTypes = "doc,odt,pdf,rtf,sxw,txt",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureDisplayConversionsPG(
			check = "true",
			documentTypes = "doc,pdf,txt");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureDisplayConversionsPG(
			documentTypes = "odt,rtf,sxw",
			uncheck = "true");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		WebContent.viewConversionLinksPGViaAP(
			documentTypes = "doc,pdf,txt",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		WebContent.viewNoConversionLinksPGViaAP(
			documentTypes = "odt,rtf,sxw",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureDisplayConversionsPG(
			documentTypes = "doc,odt,pdf,rtf,sxw,txt",
			uncheck = "true");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		WebContent.viewNoConversionLinksPGViaAP(
			documentTypes = "doc,odt,pdf,rtf,sxw,txt",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

	@description = "Configure the Asset Publisher as Site Administrator."
	@priority = "4"
	test ConfigureAssetPublisherAsSiteAdministrater {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the new user to site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the Site Administrator to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Site Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the Asset Publisher using Dynamic Selection") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewDynamicAssetSelectionConfigurationPG();
		}

		task ("Configure the Asset Publisher to Manual Selection") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureManualAssetSelectionPG();
		}

		task ("View the Asset Publisher using Manual Selection") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewManualAssetSelectionConfigurationPG();
		}
	}

	@description = "Disable Show Content Add Button."
	@priority = "5"
	@uitest
	test DisableShowContentAddButton {
		property portal.acceptance = "true";

		task ("Disable Show Add Content Button") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureAssetLinkBehaviorPG(disableConfiguration = "Show Add Content Button");
		}

		task ("View the plus icon is hidden in Asset Publisher topper") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewPlusIconNotPresentPG();
		}
	}

	@description = "Filter and order the displayed assets by field."
	@priority = "5"
	test FilterAndOrderAssetsByField {
		property portal.acceptance = "true";

		task ("Add a Language Selector to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page",
				widgetName = "Language Selector");
		}

		task ("Add a web content structure with multiple fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			ProductMenuHelper.closeProductMenu();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Date,Numeric,Rich Text,Image");

			DataEngine.addField(
				fieldFieldLabel = "Text Box",
				fieldLocation = "8",
				fieldName = "Text",
				fieldType = "Multiple Lines");

			DataEngine.addField(
				fieldFieldLabel = "Decimal",
				fieldLocation = "9",
				fieldName = "Numeric",
				numericType = "Decimal");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateFieldNames = "Text,Select from List,Single Selection,Date,Numeric,Rich Text,Image,Text Box,Decimal",
				templateName = "WC Template Name");
		}

		task ("Add the first web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentNumeric = "345",
				webContentTitle = "Web Content1 Title");
		}

		task ("Add the localized contents") {
			PortletEntry.changeLocale(locale = "de-DE");

			WebContent.addCP(webContentTitle = "Netz Inhalt1 Titel");

			WebContent.addWithStructureCP(webContentNumeric = "3");

			PortletEntry.publish();
		}

		task ("Add the second web content based on new structure") {
			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentNumeric = "123",
				webContentTitle = "Web Content2 Title");
		}

		task ("Add the localized contents") {
			PortletEntry.changeLocale(locale = "de-DE");

			WebContent.addCP(webContentTitle = "Netz Inhalt2 Titel");

			WebContent.addWithStructureCP(webContentNumeric = "8");

			PortletEntry.publish();
		}

		task ("Add the third web content based on new structure") {
			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentNumeric = "567",
				webContentTitle = "Web Content3 Title");
		}

		task ("Add the localized contents") {
			PortletEntry.changeLocale(locale = "de-DE");

			WebContent.addCP(webContentTitle = "Netz Inhalt3 Titel");

			WebContent.addWithStructureCP(webContentNumeric = "5");

			PortletEntry.publish();
		}

		task ("Add the fourth web content based on Basic Web Content") {
			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Web Content4 Content",
				webContentTitle = "Web Content4 Title");

			PortletEntry.publish();
		}

		task ("Add the second structure with Text field") {
			WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(structureName = "WC Structure1 Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a template for the second structure") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure1 Name",
				templateFieldNames = "Text",
				templateName = "WC Template11 Name");
		}

		task ("Add the fifth web content based on the second structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure1 Name");

			WebContent.addWithStructureCP(
				webContentText = "Web Content5 Text",
				webContentTitle = "Web Content5 Title");

			PortletEntry.publish();
		}

		task ("View available filter fields of the first structure") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewFilterAndFieldsPG(
				assetSubtype = "WC Structure Name",
				assetSubtypeFields = "Text,Select from List,Single Selection,Date,Numeric,Rich Text,Image,Text Box,Decimal",
				selectedAsset = "Web Content Article");
		}

		task ("Filter assets by Numeric field") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureFilterByFieldPG(
				assetSubtype = "WC Structure Name",
				fieldFilter = "Numeric",
				fieldValue = "",
				selectedAsset = "Web Content Article");
		}

		task ("Order assets by Numeric field") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureAssetDisplayOrderPG(
				fieldNameOrder = "Numeric",
				sortOrder = "Ascending");
		}

		task ("View the displayed assets in en-US") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Web Content2 Title,Web Content1 Title,Web Content3 Title") {
				AssetPublisherPortlet.viewDisplayOrderPG(
					assetTitle = "${title}",
					rowNumber = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("View the displayed assets in de-DE") {
			LanguagePortlet.selectLanguagePG(
				locale = "de-DE",
				textIcon = "deutsch-Deutschland");

			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Netz Inhalt1 Titel,Netz Inhalt3 Titel,Netz Inhalt2 Titel") {
				AssetPublisherPortlet.viewDisplayOrderPG(
					assetTitle = "${title}",
					rowNumber = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Change the locale back to en-US") {
			LanguagePortlet.selectLanguagePG(
				locale = "en-US",
				textIcon = "english-United States");
		}

		task ("Change the subtype to Any") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureAssetTypePG(
				assetSubtype = "Any",
				selectedAsset = "Web Content Article");
		}

		task ("View the displayed assets") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "345",
				assetTitle = "Web Content1 Title");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "123",
				assetTitle = "Web Content2 Title");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "567",
				assetTitle = "Web Content3 Title");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content4 Content",
				assetTitle = "Web Content4 Title");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content5 Text",
				assetTitle = "Web Content5 Title");
		}

		task ("Move the second structure to Available") {
			AssetPublisherPortlet.configureAssetTypePG(
				selectContent = "WC Structure1 Name",
				selectedAsset = "Web Content Article",
				selectMoreThanOneSubtype = "true");
		}

		task ("View the displayed assets") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "345",
				assetTitle = "Web Content1 Title");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "123",
				assetTitle = "Web Content2 Title");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "567",
				assetTitle = "Web Content3 Title");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content4 Content",
				assetTitle = "Web Content4 Title");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Web Content5 Text",
				assetTitle = "Web Content5 Title");
		}

		task ("Disable the Searchable of the first structure's fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

			for (var fieldFieldLabel : list "Text,Select from List,Single Selection,Date,Numeric,Rich Text,Image,Text Box,Decimal") {
				DataEngine.editFieldSearchable(
					fieldFieldLabel = "${fieldFieldLabel}",
					searchableType = "Disable");
			}

			WebContentStructures.saveCP();
		}

		task ("View no available filter fields of the first structure") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewFilterAndFieldsPG(
				assetSubtype = "WC Structure Name",
				noneIndexable = "true",
				selectedAsset = "Web Content Article");
		}
	}

	@description = "Filter the displayed assets by categories when enable pagination."
	@priority = "5"
	test FilterAssetsByCategoriesWithPagination {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Vocabulary1 Category",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add 5 web contents with category") {
			for (var i : list "1,2,3,4,5") {
				JSONWebcontent.addWebContent(
					assetCategoryIds = "${categoryId}",
					content = "WC WebContent${i} Content",
					groupName = "Test Site Name",
					title = "WC WebContent${i} Title");
			}
		}

		task ("Add a Categories Navigation to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page",
				widgetName = "Categories Navigation");
		}

		task ("Configure the pagination type to Regular") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configurePaginationPG(
				paginationNumber = "3",
				paginationType = "Regular");
		}

		task ("View the number of displayed assets in Page 1") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewPaginatedAssetsPG(
				nextPageClick = "true",
				pageMod = "1 - 3 of 5",
				pageNumber = "1 of 2",
				paginationNumber = "3",
				paginationType = "Regular");
		}

		task ("View the number of displayed assets in Page 2") {
			AssetPublisherPortlet.viewPaginatedAssetsPG(
				pageMod = "4 - 5 of 5",
				pageNumber = "2 of 2",
				paginationNumber = "3",
				paginationType = "Regular");
		}

		task ("Configure the ordering") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureAssetDisplayOrderPG(
				fieldNameOrder = "Modified Date",
				sortOrder = "Ascending");
		}

		task ("Filter assets by category") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			Category.viewFilterViaCategoriesNavigationPG(
				categoryName = "Vocabulary1 Category",
				vocabularyName = "Vocabulary Name");
		}

		task ("View displayed assets in Asset Publisher") {
			for (var n : list "1,2,3") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "WC WebContent${n} Content",
					assetTitle = "WC WebContent${n} Title");
			}

			for (var n : list "4,5") {
				AssetPublisherPortlet.viewAssetNotPresentPG(
					assetContent = "WC WebContent${n} Content",
					assetTitle = "WC WebContent${n} Title");
			}
		}

		task ("Remove the filter") {
			Category.viewRemoveFilterViaAP(
				categoryName = "Vocabulary1 Category",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the number of displayed assets in Page 1") {
			AssetPublisherPortlet.viewPaginatedAssetsPG(
				nextPageClick = "true",
				pageMod = "1 - 3 of 5",
				pageNumber = "1 of 2",
				paginationNumber = "3",
				paginationType = "Regular");
		}

		task ("View the number of displayed assets in Page 1") {
			AssetPublisherPortlet.viewPaginatedAssetsPG(
				pageMod = "4 - 5 of 5",
				pageNumber = "2 of 2",
				paginationNumber = "3",
				paginationType = "Regular");
		}
	}

	@description = "View assets filter by tag or category in Asset Publisher."
	@priority = "4"
	test ViewAssetsFilterByTagOrCategoryInAssetPublisher {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add the first wiki page with category") {
			JSONWiki.addWikiPage(
				assetCategoryIds = "${categoryId}",
				groupName = "Test Site Name",
				wikiNodeName = "Main",
				wikiPageContent = "Wiki Page Content 1",
				wikiPageName = "Wiki Page Name 1");
		}

		task ("Add the second wiki page with tag") {
			JSONWiki.addWikiPage(
				groupName = "Test Site Name",
				tagName = "tagname",
				wikiNodeName = "Main",
				wikiPageContent = "Wiki Page Content 2",
				wikiPageName = "Wiki Page Name 2");
		}

		task ("Add the first web content with category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content 1",
				groupName = "Test Site Name",
				title = "Web Content Title 1");
		}

		task ("Add the second web content with tag") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tagname",
				content = "Web Content Content 2",
				groupName = "Test Site Name",
				title = "Web Content Title 2");
		}

		task ("Filter assets by category in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureCategoriesFilterPG(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("View displayed content in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Wiki Page Content 2",
				assetTitle = "Wiki Page Name 2");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Web Content Content 2",
				assetTitle = "Web Content Title 2");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Wiki Page Content",
				assetTitle = "Wiki Page Name 1");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content Content",
				assetTitle = "Web Content Title 1");
		}

		task ("Filter assets by tag in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureTagsFilterPG(tagNameList = "tagname");
		}

		task ("View displayed content in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Wiki Page Content 2",
				assetTitle = "Wiki Page Name 2");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content Content 2",
				assetTitle = "Web Content Title 2");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Wiki Page Content 1",
				assetTitle = "Wiki Page Name 1");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Web Content Content 1",
				assetTitle = "Web Content Title 1");
		}
	}

	@description = "View assets from defined site scope in Asset Publisher."
	@priority = "5"
	test ViewAssetsFromDefinedSiteScope {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Site Page");
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Site Page",
				widgetName = "Asset Publisher");
		}

		task ("Add web contents to different sites") {
			for (var siteName : list "Test Site Name,Site Name,Global") {
				JSONWebcontent.addWebContent(
					content = "${siteName} WC Content",
					groupName = "${siteName}",
					title = "${siteName} WC Title");
			}
		}

		task ("View displayed assets in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Site Name WC Content",
				assetTitle = "Site Name WC Title");

			for (var siteName : list "Test Site Name,Global") {
				AssetPublisherPortlet.viewAssetNotPresentPG(
					assetContent = "${siteName} WC Content",
					assetTitle = "${siteName} WC Title");
			}
		}

		task ("Add the Global site to Site Scope") {
			AssetPublisherPortlet.configureAddSiteScopes(globalSite = "Global");
		}

		task ("View displayed assets in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Site Name");

			for (var siteName : list "Site Name,Global") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "${siteName} WC Content",
					assetTitle = "${siteName} WC Title");
			}

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Test Site Name WC Content",
				assetTitle = "Test Site Name WC Title");
		}

		task ("Remove the Global site from Site Scope") {
			AssetPublisherPortlet.removeSiteScope(removeSiteScopes = "Site Name");
		}

		task ("View displayed assets in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Global WC Content",
				assetTitle = "Global WC Title");

			for (var siteName : list "Site Name,Test Site Name") {
				AssetPublisherPortlet.viewAssetNotPresentPG(
					assetContent = "${siteName} WC Content",
					assetTitle = "${siteName} WC Title");
			}
		}
	}

	@priority = "4"
	test ViewDeletedWCDArticleAsAdminAndGuestCP {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Display Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Display Page",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(
			portletName = "Web Content Display",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.deleteCP(
			siteURLKey = "test-site-name",
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.viewDeletedArticle();

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.viewNoContentAsGuestPGViaWCD(portletName = "Web Content Display");

		User.loginPG();
	}

	@description = "View localized web content with localized categories."
	@priority = "3"
	test ViewLocalizedWebContentWithLocalizedCategories {
		task ("Add a vocabulary with localized title") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				titleMap = "en_US:Vocabulary Name,de_DE:Vokabular Namen,fr_FR:Nom Vocabulaire");
		}

		task ("Add a category with localized title") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				titleMap = "en_US:Vocabulary1 Category,de_DE:Kategorienamen,fr_FR:Nom de la Categorie",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a localized web content with the category") {
			JSONWebcontent.addBasicWebContentLocalized(
				assetCategoryIds = "${categoryId}",
				contentMap = "en_US:Web Content1 Content,de_DE:Netz Content1 Inhalt,fr_FR:Contenu de Contenu Web1",
				groupName = "Test Site Name",
				titleMap = "en_US:Web Content1 Title,de_DE:Netz Content1 Titel,fr_FR:Titre de Contenu Web1");
		}

		task ("Add a Language Selector to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page",
				widgetName = "Language Selector");
		}

		task ("Configure Asset Publisher to show Categories") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureShowMetadataFieldsPG(
				addMetadata = "true",
				metadataFieldList = "Categories",
				portletName = "Asset Publisher",
				webContentContent = "Web Content1 Content",
				webContentTitle = "Web Content1 Title");
		}

		task ("View displayed content in en-US") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content1 Content",
				assetTitle = "Web Content1 Title");

			AssetPublisherPortlet.viewAssetMetadataPG(
				addMetadata = "true",
				categoryName = "Vocabulary1 Category",
				vocabularyName = "Vocabulary Name");
		}

		task ("View displayed content in de-DE") {
			LanguagePortlet.selectLanguagePG(
				locale = "de-DE",
				textIcon = "deutsch-Deutschland");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Netz Content1 Inhalt",
				assetTitle = "Netz Content1 Titel");

			AssetPublisherPortlet.viewAssetMetadataPG(
				addMetadata = "true",
				categoryName = "Kategorienamen",
				vocabularyName = "Vokabular Namen");
		}

		task ("View displayed content in fr-FR") {
			LanguagePortlet.selectLanguagePG(
				locale = "fr-FR",
				textIcon = "français-France");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Contenu de Contenu Web1",
				assetTitle = "Titre de Contenu Web1");

			AssetPublisherPortlet.viewAssetMetadataPG(
				addMetadata = "true",
				categoryName = "Nom de la Categorie",
				vocabularyName = "Nom Vocabulaire");
		}
	}

	@description = "View new asset types shown in manual selection."
	@priority = "4"
	test ViewNewAssetTypeShownInManualSelection {
		task ("Add a global document type") {
			DMDocument.openDocumentsAndMediaAdmin(siteURLKey = "global");

			DMNavigator.gotoDocumentType();

			DMDocumentType.add(
				dmDocumentTypeDescription = "Global Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "Global Document Type Name");
		}

		task ("Add a document type in normal site") {
			DMDocument.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMNavigator.gotoDocumentType();

			DMDocumentType.add(
				dmDocumentTypeDescription = "Local Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "Local Document Type Name");
		}

		task ("View new asset types shown in manual selection") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureManualAssetSelectionPG();

			AssetPublisherPortlet.viewManualAssetTypesPG(assetEntryTypes = "Global Document Type Name,Local Document Type Name");
		}
	}

	@description = "View no console error thrown when refresh page as Guest."
	@priority = "4"
	test ViewNoConsoleErrorWhenRefreshPageAsGuest {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Sign out") {
			User.logoutPG();
		}

		task ("View no console error thrown when refresh page") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			Refresh();

			AssertConsoleTextNotPresent(value1 = "NoSuchResourceActionException");
		}
	}

	@priority = "3"
	test ViewRelatedAssetsViaRelatedAssetsPortlet {
		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Related Assets");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Related Assets");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Display Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Web Content Display Page",
			widgetName = "Web Content Display");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Test Site Name");

		WebContent.addPGViaWCD(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content");

		Navigator.gotoSitePage(
			pageName = "Blogs Page",
			siteName = "Test Site Name");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Panel.expandPanel(panel = "Related Assets");

		RelatedAssets.selectAsset(
			assetTitle = "WC WebContent Title",
			assetType = "Basic Web Content");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		RelatedAssets.viewDefaultPG();

		AssetPublisherPortlet.viewPG(
			assetContent = "WC WebContent Content",
			assetTitle = "WC WebContent Title",
			relatedAssetTitle = "Blogs Entry Title");

		RelatedAssets.viewPG(relatedAssetTitle = "Blogs Entry Title");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		RelatedAssets.viewDefaultPG();

		AssetPublisherPortlet.viewPG(
			assetContent = "Blogs Entry Content",
			assetTitle = "Blogs Entry Title",
			relatedAssetTitle = "WC WebContent Title");

		RelatedAssets.viewPG(relatedAssetTitle = "WC WebContent Title");
	}

	@priority = "3"
	test ViewRelatedAssetViaDMPortlet {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Test Site Name");

		DMDocument.addPG(
			assetTitle = "Blogs Entry Title",
			assetType = "Blogs Entry",
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.docx",
			dmDocumentRelatedAsset = "true",
			dmDocumentTitle = "DM Document Title");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Test Site Name");

		DMDocument.viewPGDetails(
			assetTitle = "Blogs Entry Title",
			dmDocumentDescription = "DM Document Description",
			dmDocumentRelatedAsset = "true",
			dmDocumentSize = "12 KB",
			dmDocumentTitle = "DM Document Title",
			dmDocumentUploader = "Test Test",
			dmDocumentVersionNumber = "1.0",
			portletName = "Documents and Media",
			searchTerm = "DM Document Title",
			workflow = "APPROVED");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Test Site Name");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Test Site Name");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.editPG(
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileEdit = "Document_2.docx",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Test Site Name");

		DMDocument.viewPGDetails(
			assetTitle = "Blogs Entry Title",
			dmDocumentDescription = "DM Document Description Edit",
			dmDocumentRelatedAsset = "true",
			dmDocumentSize = "12 KB",
			dmDocumentTitle = "DM Document Title Edit",
			dmDocumentUploader = "Test Test",
			dmDocumentVersionNumber = "2.0",
			portletName = "Documents and Media",
			searchTerm = "DM Document Title",
			workflow = "APPROVED");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Test Site Name");

		DMNavigator.gotoRelatedAssetPG(
			assetTitle = "Blogs Entry Title",
			dmDocumentTitle = "DM Document Title Edit");

		BlogsEntry.viewAsRelatedAssetPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			relatedAssetTitle = "DM Document Title Edit");
	}

	@description = "View the web content author."
	@priority = "3"
	@uitest
	test ViewWebContentAuthor {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a new regular role") {
			JSONRole.addRegularRole(
				roleKey = "WC Author",
				roleTitle = "WC Author");
		}

		task ("Define permissions of the regular role") {
			for (var resourceActionIndex : list "ADD_FOLDER,ADD_FEED,ADD_ARTICLE,VIEW,UPDATE,SUBSCRIBE,PERMISSIONS,ADD_TEMPLATE,ADD_STRUCTURE") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.journal",
					roleTitle = "WC Author");
			}

			for (var resourceActionIndex : list "VIEW,UPDATE_DISCUSSION,UPDATE,SUBSCRIBE,PERMISSIONS,EXPIRE,DELETE_DISCUSSION,DELETE,ADD_DISCUSSION") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.journal.model.JournalArticle",
					roleTitle = "WC Author");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "WC Author");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.dynamic.data.mapping.model.DDMStructure-com.liferay.journal.model.JournalArticle",
				roleTitle = "WC Author");

			for (var resourceActionIndex : list "VIEW,PREFERENCES,PERMISSIONS,CONFIGURATION,ACCESS_IN_CONTROL_PANEL") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
					roleTitle = "WC Author");
			}
		}

		task ("Assign the regular roles to two new users") {
			for (var userScreenName : list "author1,author2") {
				JSONUser.addUser(
					userEmailAddress = "${userScreenName}ea@liferay.com",
					userFirstName = "${userScreenName}",
					userLastName = "${userScreenName}",
					userScreenName = "${userScreenName}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${userScreenName}ea@liferay.com");

				JSONUser.addUserToSite(
					groupName = "Test Site Name",
					userEmailAddress = "${userScreenName}ea@liferay.com");

				JSONRole.assignRoleToUser(
					roleTitle = "WC Author",
					userEmailAddress = "${userScreenName}ea@liferay.com");
			}
		}

		task ("Sign in as the first user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "author1ea@liferay.com",
				userLoginFullName = "author1 author1");
		}

		task ("Add a web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			PortletEntry.publish();
		}

		task ("View the web content author in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			WebContent.viewPGViaAP(
				author = "author1",
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");
		}

		task ("Sign in as the second user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "author2ea@liferay.com",
				userLoginFullName = "author2 author2");
		}

		task ("Modified the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.editCP(
				webContentContentEdit = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title",
				webContentTitleEdit = "WC WebContent Title Edit");
		}

		task ("View the web content author") {
			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			WebContent.viewPGViaAP(
				author = "author2",
				webContentContent = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title Edit");
		}
	}

	@priority = "4"
	test ViewWebContentWithConfiguredDisplayPageViaAP {
		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Asset Publisher Page 2");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Asset Publisher Page 2",
			widgetName = "Asset Publisher");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page 2",
			siteName = "Test Site Name");

		AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		WebContent.editDisplayPagePGViaAP(
			assetTitle = "WC WebContent Title",
			displayPageName = "Asset Publisher Page 2",
			pageType = "Public Pages");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Test Site Name");

		WebContent.viewLinkedAssetPGViaAP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

}