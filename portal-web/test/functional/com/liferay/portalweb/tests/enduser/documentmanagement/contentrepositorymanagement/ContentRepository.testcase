@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Repository Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a content repository can be edited."
	@priority = "5"
	test EditRepository {
		ProductMenu.gotoPortlet(
			category = "Repositories",
			panel = "Control Panel",
			portlet = "Repositories");

		ContentRepository.addRepository(
			repositoryDescription = "This is the description of a content repository",
			repositoryName = "Test Repository Name");

		ContentRepository.editRepository(
			repositoryDescriptionEdit = "This is an edited description of a content repository",
			repositoryName = "Test Repository Name",
			repositoryNameEdit = "Edited Test Repository Name");

		ContentRepositoryNavigator.gotoRepository(repositoryName = "Edited Test Repository Name");
	}

	@description = "This ensures that a content repository's description can be searched."
	@priority = "5"
	test SearchForRepositoryDescription {
		ProductMenu.gotoPortlet(
			category = "Repositories",
			panel = "Control Panel",
			portlet = "Repositories");

		ContentRepository.addRepository(
			repositoryDescription = "Description 1",
			repositoryName = "Repo 1");

		ContentRepository.addRepository(
			repositoryDescription = "Description 2",
			repositoryName = "Repo 2");

		ContentRepository.addRepository(
			repositoryDescription = "Description 3",
			repositoryName = "Repo 3");

		ContentRepository.addRepository(repositoryName = "Should be not returned in search");

		Search.searchCP(searchTerm = "Description");

		ContentRepository.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Repo 1,Repo 2,Repo 3",
			resultCount = "3",
			searchTerm = "Description");

		ContentRepositoryNavigator.gotoRepository(repositoryName = "Repo 1");
	}

	@description = "This ensures that a content repository's title can be searched."
	@priority = "5"
	test SearchForRepositoryTitle {
		ProductMenu.gotoPortlet(
			category = "Repositories",
			panel = "Control Panel",
			portlet = "Repositories");

		ContentRepository.addRepository(repositoryName = "Repo 1");

		ContentRepository.addRepository(repositoryName = "Repo 2");

		ContentRepository.addRepository(repositoryName = "Repo 3");

		ContentRepository.addRepository(repositoryName = "Should be not returned in search");

		Search.searchCP(searchTerm = "Repo");

		ContentRepository.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Repo 1,Repo 2,Repo 3",
			resultCount = "3",
			searchTerm = "Repo");

		ContentRepositoryNavigator.gotoRepository(repositoryName = "Repo 1");
	}

	@description = "This ensures that a content repository can be added."
	@priority = "5"
	test Smoke {
		ProductMenu.gotoPortlet(
			category = "Repositories",
			panel = "Control Panel",
			portlet = "Repositories");

		ContentRepository.addRepository(
			repositoryDescription = "This is the description of a content repository",
			repositoryName = "Test Repository Name");

		ContentRepositoryNavigator.gotoRepository(repositoryName = "Test Repository Name");
	}

}