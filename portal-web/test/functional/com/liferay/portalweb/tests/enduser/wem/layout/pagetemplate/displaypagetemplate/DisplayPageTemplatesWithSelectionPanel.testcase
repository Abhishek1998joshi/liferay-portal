@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a display page") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Test for LPS-130922. This is a test for View the mapped visual style of editable field node in Selection panel of display page template."
	@priority = "4"
	test ViewVisualStyleOfMappedEditableFieldItem {
		task ("Add a display page") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Web Content Article",
				displayPageName = "Display Page LPS-130922",
				subType = "Basic Web Content");
		}

		task ("Add Fragment Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Field edit Mapping and select Title to Field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Content");
		}

		task ("AssertElementPresent Field Title and AssertCssValue") {
			AssertElementPresent(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Content");

			AssertCssValue(
				id = "element-text",
				key_fragmentName = "Heading",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "boxShadow",
				value1 = "rgb(175, 120, 255) 0px 0px 0px 1px inset");
		}

		task ("Add Fragment Content Display") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				targetFragmentName = "Heading");
		}

		task ("Edit Collection Display adding Most Viewed Assets") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Most Viewed Assets");
		}

		task ("Add Button Fragment to Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Title",
				fragmentName = "Button");
		}

		task ("Edit Button Mapping Field and select Title to Field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Button",
				id = "link");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");
		}

		task ("AssertElementPresent Field Title and AssertCssValue") {
			AssertElementPresent(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			AssertCssValue(
				id = "link",
				key_fragmentName = "Button",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
				locator2 = "boxShadow",
				value1 = "rgb(175, 120, 255) 0px 0px 0px 1px inset");
		}
	}

}