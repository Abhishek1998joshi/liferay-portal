@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONUser.tearDownNonAdminUsers();
		}

		ACUtils.tearDownAC();
	}

	@description = "Total Individuals increase by one when a new individual is added via event"
	@priority = "5"
	test CanViewTotalIndividualsIncreaseByOne {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToIndividuals();

		ACIndividualsDashboard.viewTotalIndividualsCount(individualCount = "0");

		ACUtils.launchDXP();

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		Pause(locator1 = "5000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToIndividuals();

		ACIndividualsDashboard.viewTotalIndividualsCount(individualCount = "1");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8903 | Test Summary: As an Business User, I should be able to assert the cards on the Overview tab of the Individual's Dashboard page"
	@priority = "4"
	test ViewCardsInTheOverviewTabOfIndividualsDashBoard {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Navigate to the Overview on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToOverviewTab();
		}

		task ("View the cards in the Overview tab") {
			for (var cardTitle : list "Total Individuals,Known,Anonymous,Enriched Profiles,Active Individuals,Top Interests as of Today") {
				ACCards.viewCards(cardTitle = "${cardTitle}");
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8902 | Test Summary: As an Business User, I should be able to assert the cards on the Overview tab of an Individual's page"
	@priority = "4"
	test ViewCardsInTheOverviewTabOfIndividualsPage {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Navigate to the individuals page of new user") {
			ACUtils.searchBar(searchItem = "userfn userln");

			ACNavigation.openItem(itemName = "userfn userln");
		}

		task ("Navigate to the Overview tab") {
			ACIndividualsDashboard.goToOverviewTab();
		}

		task ("View the cards in the Overview tab") {
			for (var cardTitle : list "Individual Activities,Current Interests,Associated Segments") {
				ACCards.viewCards(cardTitle = "${cardTitle}");
			}
		}

		task ("View the individual details card") {
			ACIndividualsDashboard.viewIndividualDetailsCard(
				fullName = "userfn userln",
				userEmailAddress = "userea@liferay.com");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8904 | Test Summary: As a Business User, I should be able to view individuals name at top of page"
	@priority = "4"
	test ViewIndividualNameAtTheTopOfIndividualsPage {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Navigate to the individuals page of new user") {
			ACUtils.searchBar(searchItem = "userfn userln");

			ACNavigation.openItem(itemName = "userfn userln");
		}

		task ("View the individual name at the top of individuals page") {
			ACNavigation.assertPageHeader(headerTitle = "userfn userln");
		}
	}

}