@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Layout Page Templates";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
			groupName = "Test Site Name",
			layoutPageTemplateCollectionName = "Page Template Collection");

		JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
			groupName = "Test Site Name",
			layoutPageTemplateCollectionName = "Page Template Collection",
			layoutPageTemplateEntryName = "Page Template Name",
			layoutPageTemplateStatus = "Draft",
			layoutPageTemplateType = "Content Page Template");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-98031. Map manual URL to image fragment."
	@ignore = "true"
	@priority = "4"
	test MapManualURLToImageFragment {
		property portal.upstream = "false";

		// TODO LPS-98031 MapManualURLToImageFragment pending implementation

	}

	@description = "This is a test for LPS-98031."
	@priority = "5"
	test MapManualURLToLinkFragment {
		property portal.acceptance = "true";

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner Center");

		PageEditorEditableLink.gotoEditableFieldLink(
			fragmentName = "Banner Center",
			id = "link");

		PageEditorEditableLink.updateURL(url = "https://liferay.com");

		PageEditor.clickPublish();

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		task ("Assert editable has the specified URL mapped correctly") {
			AssertVisible(locator1 = "//a[contains(@class,'btn')][contains(@href,'https://liferay.com')]");
		}
	}

	@description = "This is a test for LPS-98031. Map manual URL to text fragment."
	@ignore = "true"
	@priority = "4"
	test MapManualURLToTextFragment {
		property portal.upstream = "false";

		// TODO LPS-98031 MapManualURLToTextFragment pending implementation
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to image editable field."
	@priority = "2"
	test MapWebContentFieldWithURLToImageFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentTitle = "Web Content Title",
				webContentText = "https://www.liferay.com");

			PortletEntry.publish();
		}

		task ("Add an Image fragment to content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map Text field with URL to Image") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Image",
				id = "image-square");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Text",
				navItem = "Web Content");

			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Add a content page based on content page template") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("Assert the mapped URL is shown in edit mode") {
			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to link editable field."
	@priority = "2"
	test MapWebContentFieldWithURLToLinkFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentTitle = "Web Content Title",
				webContentText = "https://www.liferay.com");

			PortletEntry.publish();
		}

		task ("Add a Button fragment to content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Map Text field with URL to Button") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Text",
				navItem = "Web Content");

			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Add a content page based on content page template") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("Assert the mapped URL is shown in edit mode") {
			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to text editable field."
	@priority = "2"
	test MapWebContentFieldWithURLToTextFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentTitle = "Web Content Title",
				webContentText = "https://www.liferay.com");

			PortletEntry.publish();
		}

		task ("Add a Heading fragment to content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map Text field with URL to Heading") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Text",
				navItem = "Web Content");

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Add a content page based on content page template") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("Assert the mapped URL is shown in edit mode") {
			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Heading Example']",
				key_URL = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "https://www.liferay.com");
		}
	}

	@description = "This is a test for LPS-98030. Can map the editable background image of a fragment to an existing image content in a content page template."
	@ignore = "true"
	@priority = "3"
	test MapWebContentImageToBackgroundImageOfBannerCenter {
		property portal.upstream = "false";

		// TODO LPS-98030 MapWebContentImageToBannerCenter pending implementation
	}

	@description = "This is a test for LPS-98030. Can map the layout of a fragment to an existing image content in a content page template."
	@ignore = "true"
	@priority = "3"
	test MapWebContentImageToBackgroundImageOfContainer {
		property portal.upstream = "false";

		// TODO LPS-98030 MapWebContentImageToContainer pending implementation
	}

}