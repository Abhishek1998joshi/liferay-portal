@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Layout Page Templates";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
			groupName = "Test Site Name",
			layoutPageTemplateCollectionName = "Page Template Collection");

		JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
			groupName = "Test Site Name",
			layoutPageTemplateCollectionName = "Page Template Collection",
			layoutPageTemplateEntryName = "Page Template Name",
			layoutPageTemplateStatus = "Draft",
			layoutPageTemplateType = "Content Page Template");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-98031. Map manual URL to image fragment."
	@ignore = "true"
	@priority = "4"
	test MapManualURLToImageFragment {
		property portal.upstream = "false";

		// TODO LPS-98031 MapManualURLToImageFragment pending implementation

	}

	@description = "This is a test for LPS-98031."
	@priority = "5"
	test MapManualURLToLinkFragment {
		property portal.acceptance = "true";

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.addFragment(
			collectionName = "Featured Content",
			fragmentName = "Banner Center");

		PageEditorEditableLink.gotoEditableFieldLink(
			fragmentName = "Banner Center",
			id = "link");

		PageEditorEditableLink.updateURL(url = "https://liferay.com");

		PageEditor.clickPublish();

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

		task ("Assert editable has the specified URL mapped correctly") {
			AssertVisible(locator1 = "//a[contains(@class,'btn')][contains(@href,'https://liferay.com')]");
		}
	}

	@description = "This is a test for LPS-98031. Map manual URL to text fragment."
	@ignore = "true"
	@priority = "4"
	test MapManualURLToTextFragment {
		property portal.upstream = "false";

		// TODO LPS-98031 MapManualURLToTextFragment pending implementation
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to image editable field."
	@ignore = "true"
	@priority = "2"
	test MapWebContentFieldWithURLToImageFragment {
		property portal.upstream = "false";

		// TODO LPS-98031 MapWebContentFieldWithURLToImageFragment pending implementation
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to link editable field."
	@ignore = "true"
	@priority = "2"
	test MapWebContentFieldWithURLToLinkFragment {
		property portal.upstream = "false";

		// TODO LPS-98031 MapWebContentFieldWithURLToLinkFragment pending implementation
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to text editable field."
	@ignore = "true"
	@priority = "2"
	test MapWebContentFieldWithURLToTextFragment {
		property portal.upstream = "false";

		// TODO LPS-98031 MapWebContentFieldWithURLToTextFragment pending implementation
	}

	@description = "This is a test for LPS-98030. Can map the editable background images of a fragment to an existing image content in a display page template."
	@ignore = "true"
	@priority = "2"
	test MapWebContentImageToBackgoundImageOfBannerCenter {
		property portal.upstream = "false";

		// TODO LPS-98030 MapWebContentImageToBannerCenter pending implementation
	}

	@description = "This is a test for LPS-98030. Can map the editable background image of a fragment to an existing image content in a content page template."
	@ignore = "true"
	@priority = "3"
	test MapWebContentImageToBackgroundImageOfBannerCenter {
		property portal.upstream = "false";

		// TODO LPS-98030 MapWebContentImageToBannerCenter pending implementation
	}

	@description = "This is a test for LPS-98030. Can map the layout of a fragment to an existing image content in a display page template."
	@ignore = "true"
	@priority = "2"
	test MapWebContentImageToBackgroundImageOfContainer {
		property portal.upstream = "false";

		// TODO LPS-98030 MapWebContentImageToContainer pending implementation
	}

	@description = "This is a test for LPS-98030. Can map the layout of a fragment to an existing image content in a content page template."
	@ignore = "true"
	@priority = "3"
	test MapWebContentImageToBackgroundImageOfContainer {
		property portal.upstream = "false";

		// TODO LPS-98030 MapWebContentImageToContainer pending implementation
	}

}