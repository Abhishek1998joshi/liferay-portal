@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given blog post is created") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				externalReferenceCode = "Erc",
				groupName = "Guest",
				title = "Blogs Title");
		}
	}

	tearDown {
		BlogPostingAPI.deleteAllBlogPostings();
	}

	@description = "Creates a comment in a blog posting with a custom external reference code"
	@priority = "4"
	test canCreateCommentWithCustomExternalReferenceCode {
		property portal.acceptance = "true";

		task ("When with POST request I create a comment with a custom external reference code") {
			var response = HeadlessBlog.getAllBlogsPostingId();

			var createBlogPostingComment = HeadlessComment.createBlogPostingComment(
				blogPostingId = "${response}",
				commentExternalReferenceCode = "ercComment",
				textComment = "CommentOne");
		}

		task ("Then I can see the custom external reference code in the body response") {
			var commentsFromBlogPosting = HeadlessComment.getBlogPostingComments(blogPostingId = "${response}");

			var ercComment = HeadlessCommentAPI._getFieldValueOfExistingBlogPostingComment(
				fieldName = "externalReferenceCode",
				response = "${commentsFromBlogPosting}");

			TestUtils.assertEquals(
				actual = "${ercComment}",
				expected = "ercComment");
		}
	}

	@description = "Can not creates two comments in a blog posting with same custom external reference code"
	@priority = "4"
	test canNotCreateTwoCommentsWithCustomExternalReferenceCode {
		property portal.acceptance = "true";

		task ("When with POST request I create a comment with a custom external reference code") {
			var response = HeadlessBlog.getAllBlogsPostingId();

			var response1 = HeadlessComment.createBlogPostingComment(
				blogPostingId = "${response}",
				commentExternalReferenceCode = "ercComment",
				textComment = "CommentOne");
		}

		task ("When with POST request I create a comment with an already existing custom external reference code") {
			var response2 = HeadlessComment.createBlogPostingComment(
				blogPostingId = "${response}",
				commentExternalReferenceCode = "ercComment",
				textComment = "CommentTwo");
		}

		task ("Then I receive an error code response about duplicate folder erc") {
			TestUtils.assertPartialEquals(
				actual = "${response2}",
				expected = "Duplicate message external reference code");
		}

		task ("And Then another comment with the same external reference code is not being created") {
			var commentsBlogPosting = HeadlessComment.getBlogPostingComments(blogPostingId = "${response}");

			HeadlessBlog.assertProperNumberOfItems(
				expectedTotalElement = "1",
				responseToParse = "${commentsBlogPosting}");
		}
	}

}