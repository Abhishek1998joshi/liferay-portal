@component-name = "portal-analytics-cloud"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9220 | Test Summary: Create a segment with behavior of commenting on a blog"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentCommentingBlog {

		// TODO LRAC-9220 CanCreateWebBehaviorSegmentCommentingBlog pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9221 | Test Summary: Create a Web Behavior criteria at least/at most times"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentCriteriaLeastMostTimes {

		// TODO LRAC-9221 CanCreateWebBehaviorSegmentCriteriaLeastMostTimes pending implementation

	}

	@description = "Create a segment with behavior of downloading a document"
	@priority = "5"
	test CanCreateWebBehaviorSegmentDownloadingDocument {
		ACUtils.createDMAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		DMDocument.downloadPG(dmDocumentTitle = "DM AC Title");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Downloaded Document & Media");

		ACSegments.selectDocument(
			documentTitle = "Document_1.jpg",
			indexField = "1");

		ACSegments.setOccurence(occurenceNumber = "4");

		ACSegments.saveSegment();

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");

		ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			DMDocument.downloadPG(dmDocumentTitle = "DM AC Title");
		}

		Pause(locator1 = "10000");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9222 | Test Summary: Create a Web Behavior since X days"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentSinceXdays {

		// TODO LRAC-9222 CanCreateWebBehaviorSegmentSinceXdays pending implementation

	}

	@description = "Create a Web Behavior Segment Submitting a Form"
	@priority = "5"
	test CanCreateWebBehaviorSegmentSubmittingForm {
		ACUtils.createFormAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewTextLabel(
			fieldLabel = "Text",
			fieldName = "Text");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test Segments");

		FormPortlet.submitLocalizedSuccessfully(buttonName = "Submit");

		Pause(locator1 = "10000");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Submitted Form");

		ACSegments.selectDocument(
			documentTitle = "Created Form Name",
			indexField = "1");

		ACSegments.setOccurence(occurenceNumber = "2");

		ACSegments.saveSegment();

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");

		ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewTextLabel(
			fieldLabel = "Text",
			fieldName = "Text");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test Segments");

		FormPortlet.submitLocalizedSuccessfully(buttonName = "Submit");

		Pause(locator1 = "10000");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9216 | Test Summary: Add segment using a web behavior 'after' some time"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentUsingAfter {

		// TODO LRAC-9216 CanCreateWebBehaviorSegmentUsingAfter pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9217 | Test Summary: Add segment using a web behavior 'before' some time"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentUsingBefore {

		// TODO LRAC-9217 CanCreateWebBehaviorSegmentUsingBefore pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9218 | Test Summary: Add segment using a web behavior 'between' some time"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentUsingBetween {

		// TODO LRAC-9218 CanCreateWebBehaviorSegmentUsingBetween pending implementation

	}

	@description = "Add segment using a web behavior 'ever' done"
	@priority = "5"
	test CanCreateWebBehaviorSegmentUsingEver {
		ACUtils.createFormAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Viewed Form");

		ACSegments.editWebBehaviorCriterion(
			indexField = "1",
			occurenceNumber = "4",
			searchTerm = "Created Form Name",
			timeOption = "ever");

		ACSegments.saveSegment();

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");

		ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			Pause(locator1 = "100");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Create a Web Behavior using 'has not' segment"
	@priority = "5"
	test CanCreateWebBehaviorSegmentUsingHasNot {
		ACUtils.createBlogsAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Viewed Blog");

		ACSegments.editWebBehaviorCriterion(
			activitiesOption = "has not",
			indexField = "1",
			occurenceNumber = "4",
			searchTerm = "Blogs AC Title");

		ACSegments.saveSegment();

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");

		ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9219 | Test Summary: Add segment using a web behavior 'on' some time"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentUsingOn {

		// TODO LRAC-9219 CanCreateWebBehaviorSegmentUsingOn pending implementation

	}

	@description = "Add segment using a web behavior 'since' some time"
	@priority = "5"
	test CanCreateWebBehaviorSegmentUsingSince {
		ACUtils.createBlogsAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Viewed Blog");

		ACSegments.editWebBehaviorCriterion(
			indexField = "1",
			occurenceNumber = "4",
			searchTerm = "Blogs AC Title",
			timeOption = "since",
			timePeriod = "Yesterday");

		ACSegments.saveSegment();

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");

		ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACSegments.viewSegmentCriteriaWebBehavior(
			occurenceNumber = "4",
			searchTerm = "'Blogs AC Title'",
			timeOption = "since",
			timePeriod = "Yesterday");

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9223 | Test Summary: Create a Web Behavior Segment of Viewing a Blog"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentViewingBlog {

		// TODO LRAC-9223 CanCreateWebBehaviorSegmentViewingBlog pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9224 | Test Summary: Create a Web Behavior Segment of Viewing Document & Media in a Topic"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentViewingDM {

		// TODO LRAC-9224 CanCreateWebBehaviorSegmentViewingDM pending implementation

	}

	@description = "Create a segment with behavior of viewing a form"
	@priority = "5"
	test CanCreateWebBehaviorSegmentViewingForm {
		ACUtils.createFormAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Viewed Form");

		ACSegments.selectDocument(
			documentTitle = "Created Form Name",
			indexField = "1");

		ACSegments.setOccurence(occurenceNumber = "4");

		ACSegments.saveSegment();

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");

		ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			Pause(locator1 = "100");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9225 | Test Summary: Create a Web Behavior Segment of Viewing a Page"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentViewingPage {

		// TODO LRAC-9225 CanCreateWebBehaviorSegmentViewingPage pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9226 | Test Summary: Create a Web Behavior Segment of Viewing a Web Content"
	@ignore = "true"
	@priority = "4"
	test CanCreateWebBehaviorSegmentViewingWC {

		// TODO LRAC-9226 CanCreateWebBehaviorSegmentViewingWC pending implementation

	}

}