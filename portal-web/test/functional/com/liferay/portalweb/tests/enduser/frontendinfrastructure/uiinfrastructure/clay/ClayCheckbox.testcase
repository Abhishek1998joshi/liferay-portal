@component-name = "portal-frontend-infrastructure"
definition {

	property osgi.modules.includes = "frontend-taglib-clay-sample-web";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Clay";
	property testray.main.component.name = "User Interface";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Clay Sample Test Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Clay Sample Test Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Clay Sample Test Page",
			widgetName = "Clay Sample");

		Navigator.gotoPage(pageName = "Clay Sample Test Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONLayout.deletePublicLayout(
				groupName = "Guest",
				layoutName = "Clay Sample Test Page");
		}
	}

	@description = "Verify clay checkbox API options can be configured"
	@priority = "5"
	@refactordone
	test CanBeConfigured {
		Navigator.gotoNavTab(navTab = "Form Elements");

		AssertChecked.assertCheckedNotVisible(
			key_definition = "On",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertNotChecked.assertNotCheckedNotVisible(
			key_definition = "Off",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertEditable.assertEditableNotVisible(locator1 = "ClaySamplePortlet#CHECKBOX_WITH_CUSTOM_CLASS_AND_ID");

		Check.checkNotVisible(
			checkboxName = "Checkbox with Label",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertNotEditable.assertNotEditableNotVisible(
			key_definition = "On disabled",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertChecked.assertCheckedNotVisible(
			key_definition = "On disabled",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertNotEditable.assertNotEditableNotVisible(
			key_definition = "Off disabled",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertNotChecked.assertNotCheckedNotVisible(
			key_definition = "Off disabled",
			locator1 = "ClaySamplePortlet#CHECKBOX");

		AssertEditable.assertEditableNotVisible(
			key_definition = "Indeterminate",
			locator1 = "ClaySamplePortlet#CHECKBOX");
	}

	@description = "LRQA-65496: Verify status checked in clay checkbox indeterminate"
	@priority = "3"
	test ParentMustBeCheckedIfAllChildrenAreChecked {
		task ("Given treeview with indeterminate state checkboxes") {
			Navigator.gotoNavTab(navTab = "Form Elements");
		}

		task ("And Given top most treeview checkbox state is indeterminate") {
			AssertAttributeValue(
				attribute1 = "indeterminate",
				key_label = "Liferay DXP",
				locator1 = "ClaySamplePortlet#CHECKBOX_NESTED",
				value1 = "true");
		}

		task ("When all children checkboxes states become checked") {
			Click.clickAtNotVisible(
				key_label = "Content & Data",
				locator1 = "ClaySamplePortlet#CHECKBOX_NESTED");

			Click.clickAtNotVisible(
				key_label = "Categorization",
				locator1 = "ClaySamplePortlet#CHECKBOX_NESTED");
		}

		task ("Then the top most treeview checkbox state is checked") {
			AssertChecked.assertCheckedNotVisible(
				key_label = "Liferay DXP",
				locator1 = "ClaySamplePortlet#CHECKBOX_NESTED");
		}
	}

	@description = "LRQA-65496: Verify status indeterminate in clay checkbox indeterminate"
	@priority = "3"
	test ParentMustBeIndeterminateIfNotAllChildrenCheckedOrUnChecked {
		task ("Given treeview with indeterminate state checkboxes") {
			Navigator.gotoNavTab(navTab = "Form Elements");
		}

		task ("Then the state of indeterminate checkbox is indeterminate") {
			AssertAttributeValue(
				attribute1 = "indeterminate",
				key_label = "Liferay DXP",
				locator1 = "ClaySamplePortlet#CHECKBOX_NESTED",
				value1 = "true");
		}
	}

	@description = "LRQA-65496: Verify status unchecked in clay checkbox indeterminate"
	@priority = "3"
	test ParentMustBeUncheckedIfAllChildrenUnchecked {
		task ("Given treeview with indeterminate state checkboxes") {
			Navigator.gotoNavTab(navTab = "Form Elements");
		}

		task ("When children checkboxes are unchecked") {
			Click.clickAtNotVisible(
				key_label = "Design",
				locator1 = "ClaySamplePortlet#CHECKBOX_NESTED");

			DoubleClick(
				key_label = "Content & Data",
				locator1 = "ClaySamplePortlet#CHECKBOX_NESTED");
		}

		task ("Then parent checkbox is unchecked") {
			Uncheck.uncheckNotVisible(
				key_label = "Liferay DXP",
				locator1 = "ClaySamplePortlet#CHECKBOX_NESTED");
		}
	}

	@description = "Verify clay checkbox UI looks ok"
	@priority = "5"
	@refactordone
	test VerifyDefaultUI {
		Navigator.gotoNavTab(navTab = "Form Elements");

		Check.checkNotVisible(
			checkboxName = "Checkbox with Label",
			locator1 = "Checkbox#ANY_CHECKBOX");

		takeScreenshot();

		// Temporarily remove sikuli assertion until fix in LRQA-65984

		//SikuliAssertElementPresent(locator1 = "ClaySamplePortlet#CHECKBOX_CHECKED");

		Uncheck.uncheckToggleSwitch(
			checkboxName = "Checkbox with Label",
			locator1 = "Checkbox#ANY_CHECKBOX");

		takeScreenshot();

		// Temporarily remove sikuli assertion until fix in LRQA-65984

		//SikuliAssertElementPresent(locator1 = "ClaySamplePortlet#CHECKBOX_UNCHECKED");

		SikuliAssertElementPresent(locator1 = "ClaySamplePortlet#CHECKBOX_INDETERMINATE_PNG");

		takeScreenshot();
	}

}