@component-name = "portal-analytics-cloud"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
            for (var username : list "ac1,ac2") {
			    JSONUser.addUser(
				    userEmailAddress = "${username}@liferay.com",
				    userFirstName = "${username}",
				    userLastName = "${username}",
				    userScreenName = "${username}");

			    JSONUser.setFirstPassword(
				    agreeToTermsAndAnswerReminderQuery = "true",
				    requireReset = "false",
				    userEmailAddress = "${username}@liferay.com");
            }
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac1@liferay.com",
				userLoginFullName = "ac1 ac1");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}


    @description = "Feature ID: LRAC-7536 | Automation ID: LRAC-10513 | Test Summary: Empty individual events state"
	@priority = "3"
	test AssertEmptyIndividualEvents {
		task ("Fill fields and create custom event") {
			var customEventName1 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName1}",
				timeToSendCustomEvent = "1");

            var customEventName2 = ACCustomEvents.generateCustomEventName();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

        task ("Navigate to the individuals page of new user") {
			ACUtils.searchBar(searchItem = "ac1 ac1");

			ACNavigation.openItem(itemName = "ac1 ac1");
		}

		task ("Assert empty state") {
            for (var textValue : list "No Events Found,Try a different date range or search term.") {
			    ACUtils.viewGenericText(textValue = "${textValue}");
            }
		}

        task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

        task ("Assert empty state") {
            ACUtils.searchBar(searchItem = "${customEventName2}");

            for (var textValue : list "No Events Found,Try a different date range or search term.") {
			    ACUtils.viewGenericText(textValue = "${textValue}");
            }
		}
	}


}