@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "false";
	property portal.upstream = "true";
	property slave.label = "slave-1";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8330 | Test Summary: Assert Chart ticks for pages Visitor Behavior standardized"
	@ignore = "true"
	@priority = "5"
	test AssertChartTicksPagesVisitorBehaviorStandardized {

		// TODO LRAC-8330 AssertChartTicksPagesVisitorBehaviorStandardized

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8329 | Test Summary: Assert Chart ticks for Site Metrics standardized"
	@ignore = "true"
	@priority = "5"
	test AssertChartTicksSiteMetricsStandardized {

		// TODO LRAC-8329 AssertChartTicksSiteMetricsStandardized

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8331 | Test Summary: Assert Site Metrics select Sessions/Visitor card tab"
	@priority = "5"
	test AssertSiteMetricsSelectSessionsPerVisitorCardTab {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign out and sign in as Test Test") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Navigate to the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Navigate to the Overview tab on Sites dashboard") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Overview");
		}

		task ("Navigate to the Sessions/Visitor tab") {
			ACNavigation.switchTabInCard(tabName = "Sessions/Visitor");
		}

		task ("View the Sessions/Visitor tab is active") {
			ACNavigation.viewActiveSwitchTabInCard(tabName = "Sessions/Visitor");
		}
	}

}