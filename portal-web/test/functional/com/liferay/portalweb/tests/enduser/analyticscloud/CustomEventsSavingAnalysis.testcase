@component-name = "portal-analytics-cloud"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10558 | Test Summary: Viewing newly created analysis report"
	@priority = "5"
	test CanCreateAnalysisReport {
		var attributeName = "category";
        var filterName = "like";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis by the all tab") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

        task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				optionValue = "True");
		}

        task ("Name the report") {
            ACUtils.fileName(fileName = "Save Analysis");
        }

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "wetsuit,1");
		}

        task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

        task ("Assert the analysis is saved and show up on event analysis list") {
			ACUtils.viewNameList(nameList = "Save Analysis");
		}

        task ("Click on newly created analysis") {
            ACNavigation.openItem(itemName = "Save Analysis");
        }

        task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeName = "${attributeName}",
				eventName = "${customEventName}",
				filterName = "${filterName}");
		}

        task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "wetsuit,1");
		}
	}

    @description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10559 | Test Summary: Edit an analysis report"
	@priority = "5"
	test CanEditAnalysisReport {
		var attributeName1 = "price";
        var attributeName2 = "like";
        var filterName = "birthdate";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis by the all tab") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName1}");
		}

        task ("Name the report") {
            ACUtils.fileName(fileName = "Save Analysis");
        }

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "260 - 269,1");
		}

        task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

        task ("Click on newly created analysis") {
            ACNavigation.openItem(itemName = "Save Analysis");
        }

        task ("Name the report") {
            ACUtils.fileName(fileName = "New Save Analysis");
        }

        task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName2}");
		}

        task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "25",
				month = "November",
				optionValue = "is",
				year = "2021");
		}

        task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "260 - 269,true,1");
		}

        task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

        task ("Click on newly created analysis") {
            ACNavigation.openItem(itemName = "New Save Analysis");
        }

        task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeName = "${attributeName1}",
				eventName = "${customEventName}",
				filterName = "${filterName}");

            ACEventAnalysis.viewAnalysisDashboard(
				attributeName = "${attributeName2}");
		}

        task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "260 - 269,true,1");
		}
	}

}