@component-name = "portal-analytics-cloud"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8548 | Test Summary: Add segment using an organization property 'date modified'"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyDateModified {
		property portal.upstream = "quarantine";

		// AC Refactor: Team not sure of which steps should be done to assert Date modified	
		// AC Refactor ticket: LRAC-9277

		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "userea@liferay.com");
		}	

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new segment using the organization property date modified") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Date Modified");

			ACSegments.saveSegment();
		}

		task ("Assert Date Modified is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Date Modified");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8550 | Test Summary: Add segment using an organization property 'hierarchy path'"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyHierarchyPath {
		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new segment using the organization property Hierarchy Path") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Hierarchy Path");

			ACSegments.addOrganizationName(organizationName = "Test Hierarchy Path");

			ACSegments.saveSegment();
		}

		task ("Assert Hierarchy Path is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Hierarchy Path");
		}

		task ("Assert Test Hierarchy Path is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Test Hierarchy Path");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8549 | Test Summary: Add segment using an organization property 'name'"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyName {
		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new segment using the organization property Name") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Name");

			ACSegments.addOrganizationName(organizationName = "Test Name");

			ACSegments.saveSegment();
		}

		task ("Assert Name is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Name");
		}

		task ("Assert Test Name is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Test Name");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8551 | Test Summary: Add segment using an organization property 'organization'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyOrganization {

		// TODO LRAC-8551 CanCreateSegmentUsingOrganizationPropertyOrganization pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8552 | Test Summary: Add segment using an organization property 'parent organization'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyParentOrganization {

		// TODO LRAC-8552 CanCreateSegmentUsingOrganizationPropertyParentOrganization pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8553 | Test Summary: Add segment using an organization property 'type'"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyType {
		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new segment using the organization property Type") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Type");

			ACSegments.addOrganizationName(organizationName = "Test Type");

			ACSegments.saveSegment();
		}

		task ("Assert Name is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Type");
		}

		task ("Assert Test Name is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Test Type");
		}
	}

}