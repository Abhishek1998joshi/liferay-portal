@component-name = "portal-analytics-cloud"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10264 | Test Summary: Event Analysis creation with Attribute ad Filter Attribute"
	@priority = "5"
	test AddAttributeAndAttributeFilterInEventsAnalysis {
		var attributeName = "pageTitle";

		var filterName = "url";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("After adding an event, assert there is no '+' under Analyze") {
			AssertElementNotPresent(locator1 = "ACEventAnalysis#ADD_EVENT_BUTTON");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "site",
				optionValue = "contains");
		}

		task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeName = "${attributeName}",
				eventName = "${customEventName}",
				filterName = "${filterName}");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10265 | Test Summary: Max of 3 breakdowns options are allowed"
	@priority = "4"
	test AddMaxOf3AttributesToEvent {
		var attributeNameList = "category,pageTitle,url";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the 3 breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeNameList}");
		}

		task ("Check that the analysis dashboard contains the 3 attributes") {
			for (var attributeName : list "${attributeNameList}") {
				ACEventAnalysis.viewAnalysisDashboard(attributeName = "${attributeName}");
			}
		}

		task ("Assert there is no “+” after having 3 breakdown") {
			AssertElementNotPresent(
				key_sectionType = "breakdown",
				locator1 = "ACEventAnalysis#ADD_ATTRIBUTE_BUTTON");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10266 | Test Summary: Event Analysis is reset when removing the event"
	@priority = "4"
	test AssertRemovedEventIsNotPresent {
		var attributeName = "pageTitle";

		var filterName = "url";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "site",
				optionValue = "contains");
		}

		task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeName = "${attributeName}",
				eventName = "${customEventName}",
				filterName = "${filterName}");
		}

		task ("Remove the attribute from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${customEventName}");
		}

		task ("Check that the analysis dashboard contains the event,attribute and filter") {
			AssertNotVisible(
				key_buttonName = "${customEventName}",
				locator1 = "ACUtils#GENERIC_BUTTON");

			for (var attributeName : list "${attributeName},${filterName}") {
				AssertElementNotPresent(
					key_attributeName = "${attributeName}",
					locator1 = "ACEventAnalysis#VIEW_DASHBOARD_INFORMATION");
			}
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10269 | Test Summary: Attribute breakdowns are sorted by the highest event count"
	@priority = "4"
	test AssertAttributeBreakdownsSortedByHighestEventCount {
		var attributeNameList = "pageTitle,url";

		var layoutNameList = "Custom 1,Custom 2";

		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "3");
		}

		task ("Create new pages and place custom event fields") {
			for (var layoutName : list "${layoutNameList}") {
				ACUtils.addPage(layoutName = "${layoutName}");

				ACCustomEvents.addWCWithCustomEventToPage(layoutName = "${layoutName}");
			}
		}

		task ("Fill fields and make new interactions with custom event") {
			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "2");
		}

		task ("Fill fields and make new interactions with custom event") {
			ACUtils.navigateToSitePage(
				pageName = "Custom 1",
				siteName = "Site Name");

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeNameList}");
		}

		task ("Check that the analysis is being ordered by the number of interactions by default") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformationInOrder(
				index = "1",
				commonInformation = "site name",
				informationValue = "ac page - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				index = "2",
				commonInformation = "site name",
				informationValue = "custom 2 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				index = "3",
				commonInformation = "site name",
				informationValue = "custom 1 - site name - ${dataSource}");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10270 | Test Summary: Sorting the analysis result ascending and descending"
	@priority = "4"
	test AssertTheAnalysisResultIsSorted {
		var attributeNameList = "pageTitle,url";

		var layoutNameList = "Custom 1,Custom 2";

		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "3");
		}

		task ("Create new pages and place custom event fields") {
			for (var layoutName : list "${layoutNameList}") {
				ACUtils.addPage(layoutName = "${layoutName}");

				ACCustomEvents.addWCWithCustomEventToPage(layoutName = "${layoutName}");
			}
		}

		task ("Fill fields and make new interactions with custom event") {
			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "2");
		}

		task ("Fill fields and make new interactions with custom event") {
			ACUtils.navigateToSitePage(
				pageName = "Custom 1",
				siteName = "Site Name");

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeNameList}");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Sort the analysis list and check the positions") {
			ACEventAnalysis.sortAnalysis(attributeName = "pageTitle");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				index = "1",
				commonInformation = "site name",
				informationValue = "custom 1 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				index = "2",
				commonInformation = "site name",
				informationValue = "custom 2 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				index = "3",
				commonInformation = "site name",
				informationValue = "ac page - site name - ${dataSource}");
		}

		task ("Sort the analysis list and check the positions") {
			ACEventAnalysis.sortAnalysis(attributeName = "pageTitle");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				index = "1",
				commonInformation = "site name",
				informationValue = "ac page - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				index = "2",
				commonInformation = "site name",
				informationValue = "custom 2 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				index = "3",
				commonInformation = "site name",
				informationValue = "custom 1 - site name - ${dataSource}");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10273 | Test Summary: Event Analysis creation with Filtered Attribute (String) and (Contains/Does not Contains) condition"
	@priority = "5"
	test CreateEventAnalysisWithStringAttributeFilterContainsAndNotContains {
		var attributeName = "pageTitle";

		var filterName = "category";

		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "w",
				optionValue = "contains");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - ${dataSource}");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "w",
				optionValue = "not contains");
		}

		task ("Check that the analysis result does not appear") {
			ACEventAnalysis.viewAnalysisInformationNotPresent(informationValueList = "ac page - site name - ${dataSource}");
		}
	}

}