@component-name = "portal-segmentation"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.uncheckStrangersVerifyEmailCheckbox();

		// Create site and content page

		JSONGroup.addGroup(groupName = "Test Site Name");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Experience Content Page");

		// Create segmentation

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Segments");

		LexiconEntry.gotoAdd();

		Segmentation.addProperties(propertyOption = "Email Address");

		Segmentation.fillTitle(titleField = "AddSegmentUserEmailAddressContains Test");

		Segmentation.changeCriterionInputEmailAddress(criterionInputOption = "Contains");

		Segmentation.fillProperty(PropertyField = "liferay");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Site.tearDownCP();
		}
	}

	@description = "When the user creates a new experience, it is always placed in the last position of the list, always below the default experience and always set as non-active"
	@priority = "5"
	test AddNewAnyoneExperience {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Default");

		Button.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addExperience(
			experienceName = "NewAnyoneExperience",
			segmentName = "Anyone");

		Refresh();

		PageEditor.changeExperience(newExperience = "NewAnyoneExperience");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Anyone1");

		Button.clickPublish();

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "Experience Content Page",
			siteName = "Test Site Name");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Default");

		User.firstLoginPG();
	}

	@description = "The Add new experience modals appears after click on cancel in the Edit experience modal"
	@priority = "5"
	test AddNewExperienceAfterCancelEdit {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addExperience(
			experienceName = "NewExp1",
			segmentName = "Anyone");

		Refresh();

		Click(locator1 = "PageEditor#EXPERIENCE_DEFAULT_BUTTON_NAME");

		Click(locator1 = "PageEditor#EXPERIENCE_EDIT_BUTTON");

		AssertClick(
			locator1 = "Button#CANCEL",
			value1 = "Cancel");

		Click(locator1 = "PageEditor#EXPERIENCE_DEFAULT_BUTTON_NAME");

		Click(
			key_text = "New Experience",
			locator1 = "Button#ANY");

		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "PageEditor#EXPERIENCE_NEW_EXPERIENCE_MODAL_TITLE",
			value1 = "New Experience");

		AssertTextEquals(
			locator1 = "PageEditor#EXPERIENCE_NAME",
			value1 = "");

		AssertClick(
			locator1 = "Button#CANCEL",
			value1 = "Cancel");

		PageEditor.clickPublish();
	}

	@description = "This is a test for LPS-130293."
	@ignore = "true"
	@priority = "5"
	test AddNewExperienceUserDateModifiedSegment {
  		property portal.acceptance = "false";

  		// TODO LPS-130293 AddNewExperienceUserDateModifiedSegment pending implementation
	}

	@description = "This is a test for LPS-130294."
	@ignore = "true"
	@priority = "5"
	test AddNewExperienceUserDateOfBirthSegment {
  		property portal.acceptance = "false";

  		// TODO LPS-130294 AddNewExperienceUserDateOfBirthSegment pending implementation
	}

	@description = "This is a test for LPS-130301."
	@ignore = "true"
	@priority = "5"
	test AddNewExperienceUserEmailAddressSegment {
  		property portal.acceptance = "false";

  		// TODO LPS-130301 AddNewExperienceUserEmailAddressSegment pending implementation
	}
	
	@description = "This is a test for LPS-130295."
	@ignore = "true"
	@priority = "5"
	test AddNewExperienceUserFirstNameSegment {
  		property portal.acceptance = "false";

  		// TODO LPS-130295 AddNewExperienceUserFirstNameSegment pending implementation
	}

	@description = "This is a test for LPS-130296."
	@ignore = "true"
	@priority = "5"
	test AddNewExperienceUserJobTitleSegment {
  		property portal.acceptance = "false";

  		// TODO LPS-130296 AddNewExperienceUserJobTitleSegment pending implementation
	}

	@description = "This is a test for LPS-130297."
	@ignore = "true"
	@priority = "5"
	test AddNewExperienceUserLastNameSegment {
  		property portal.acceptance = "false";

  		// TODO LPS-130297 AddNewExperienceUserLastNameSegment pending implementation
	}

	@description = "This is a test for LPS-130298."
	@ignore = "true"
	@priority = "5"
	test AddNewExperienceUserNameSegment {
  		property portal.acceptance = "false";

  		// TODO LPS-130298 AddNewExperienceUserNameSegment pending implementation
	}

	@description = "This is a test for LPS-130299."
	@ignore = "true"
	@priority = "5"
	test AddNewExperienceUserRoleSegment {
  		property portal.acceptance = "false";

  		// TODO LPS-130299 AddNewExperienceUserRoleSegment pending implementation
	}

	@description = "This is a test for LPS-130300."
	@ignore = "true"
	@priority = "5"
	test AddNewExperienceUserScreenNameSegment {
  		property portal.acceptance = "false";

  		// TODO LPS-130300 AddNewExperienceUserScreenNameSegment pending implementation
	}

	@description = "When the user opens the experiences selection modal and select a different locale for an experience, the experience version for that language is shown"
	@priority = "5"
	test AddNewExperienceWithLanguage {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Text in english");

		Button.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addExperienceWithLanguage(
			experienceName = "NewAnyoneExperience",
			language = "Spanish",
			segmentName = "Anyone");

		Refresh();

		PageEditor.changeExperienceLanguage(
			language = "es-ES",
			newExperience = "NewAnyoneExperience");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Texto en espa単ol");

		Button.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.changeExperience(newExperience = "NewAnyoneExperience");

		PageEditor.prioritizeExperience(experienceName = "NewAnyoneExperience");

		Button.clickPublish();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			requirePasswordReset = "true",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editDisplaySettingsCP(
			languageName = "espa単ol (Espa単a)",
			userScreenName = "usersn");

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "Experience Content Page",
			siteName = "Test Site Name");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Text in english");

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Experience Content Page",
			siteName = "Test Site Name");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Texto en espa単ol");

		User.firstLoginPG();
	}

	@description = "When the user clicks on the Duplicate option of an experience, a new experience with [the same name] + Copy and the same audience (Segment) appears in the last position of the list, always below the default experience"
	@priority = "5"
	test DuplicateExperience {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addExperience(
			experienceName = "NewExp1",
			segmentName = "AddSegmentUserEmailAddressContains Test");

		Refresh();

		PageEditor.changeExperience(newExperience = "NewExp1");

		PageEditor.duplicateExperience(experienceName = "NewExp1");

		PageEditor.clickPublish();
	}

	@description = "When the user duplicates an experience, the new experience has the same locales selected than the duplicated one"
	@priority = "5"
	test DuplicateExperienceWithLanguage {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Text in english");

		Button.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addExperienceWithLanguage(
			experienceName = "NewAnyoneExperience",
			language = "Spanish",
			segmentName = "Anyone");

		Refresh();

		PageEditor.changeExperienceLanguage(
			language = "es-ES",
			newExperience = "NewAnyoneExperience");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Texto en espa単ol");

		Button.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.changeExperience(newExperience = "NewAnyoneExperience");

		PageEditor.duplicateExperience(experienceName = "NewAnyoneExperience");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.changeExperienceLanguage(
			language = "es-ES",
			newExperience = "NewAnyoneExperience (Copy)");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "Texto en espa単ol");

		PageEditor.clickPublish();
	}

	@description = "Validate experience edition and deletion"
	@priority = "5"
	test EditAndDeleteExperience {
		property portal.acceptance = "true";

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

		ContentPages.clickPencil();

		PageEditor.addExperience(
			experienceName = "exp1",
			segmentName = "AddSegmentUserEmailAddressContains Test");

		Refresh();

		PageEditor.editExperience(newExperience = "exp1_edited");

		PageEditor.deleteExperience(experienceName = "exp1_edited");

		PageEditor.clickPublish();
	}

}