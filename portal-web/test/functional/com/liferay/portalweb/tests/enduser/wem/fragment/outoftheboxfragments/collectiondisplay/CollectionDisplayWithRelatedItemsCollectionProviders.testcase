@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-127024. The user can add a Collection Display with Categories for This Item into another Collection Display with a dynamic collection."
	@priority = "5"
	test AddCollectionDisplayWithCategoriesForThisItemToAnotherCollectionDisplayWithDynamicCollection {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add three categories in vocabulary") {
			var firstCategoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name 1",
				vocabularyName = "Vocabulary Name");

			var secondCategoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name 2",
				vocabularyName = "Vocabulary Name");

			var thirdCategoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name 3",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with the first category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${firstCategoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry with the first and second categories") {
			JSONBlog.addEntry(
				assetCategoryIds = "${firstCategoryId},${secondCategoryId}",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document entry with all three categories") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${firstCategoryId},${secondCategoryId},${thirdCategoryId}",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Display to the first module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "1",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				columnNumber = "1",
				fragmentName = "Collection Display");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Document Title",
				fragmentName = "Heading");
		}

		task ("Map Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Add a Collection Display to the second module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "2",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				columnNumber = "2",
				fragmentName = "Collection Display");
		}

		task ("Add a Collection Display fragment into the second module Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title",
				fragmentName = "Collection Display");
		}

		task ("Select the Categories for This Item in inner Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = "3",
				infoItemRelatedListProviderName = "Categories for This Item");
		}

		task ("Add a Button fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Category Name 1",
				fragmentName = "Button");
		}

		task ("Map Name of categories to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Name",
				fragmentName = "Button",
				id = "link");
		}

		task ("View the title of assets are shown in the first module") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("View the name of associated categories are shown in the second module") {
			var n = "1";

			for (var title : list "Category Name 1,Category Name 2,Category Name 3") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[@class='row'][${n}]//div[contains(@class,'page-editor__topper') and contains(.,'Button')]//*[contains(@data-lfr-editable-id,'link')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "1",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			var n = "1";

			for (var title : list "Category Name 1,Category Name 2") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[@class='row'][${n}]//div[contains(@class,'page-editor__topper') and contains(.,'Button')]//*[contains(@data-lfr-editable-id,'link')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "2",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			AssertTextEquals(
				key_colPosition = "1",
				key_element = "//div[@class='row']//div[contains(@class,'page-editor__topper') and contains(.,'Button')]//*[contains(@data-lfr-editable-id,'link')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "3",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
				value1 = "Category Name 1");

			PageEditor.clickPublish();
		}

		task ("Navigate to page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View the title of assets are shown in the first module") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					id = "element-text",
					key_position = "${n}",
					key_text = "${title}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("View the name of associated categories are shown in the second module") {
			var n = "1";

			for (var title : list "Category Name 1,Category Name 2,Category Name 3,Category Name 1,Category Name 2,Category Name 1") {
				AssertVisible(
					id = "link",
					key_position = "${n}",
					key_text = "${title}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-127024. The user can add a Collection Display with Items with This Category into another Collection Display with Categories for This Item."
	@priority = "4"
	test AddCollectionDisplayWithItemsWithThisCategoryToAnotherCollectionDisplayWithCategoriesForThisItem {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category in vocabulary") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry with the category") {
			JSONBlog.addEntry(
				assetCategoryIds = "${categoryId}",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document entry with category") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryId}",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Grid to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Display to the first module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "1",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the Categories for This Item in Collection Display") {
			PageEditor.editCollectionDisplay(
				columnNumber = "1",
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Categories for This Item");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Heading");
		}

		task ("Map Name of category to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Name",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Add a Collection Display to the second module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "2",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the Categories for This Item in Collection Display") {
			PageEditor.editCollectionDisplay(
				columnNumber = "2",
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Categories for This Item");
		}

		task ("Add a Collection Display fragment into the second module Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "",
				fragmentName = "Collection Display");
		}

		task ("Select the Items with This Category in inner Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = "3",
				infoItemRelatedListProviderName = "Items with This Category");
		}

		task ("Add a Button fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Button");
		}

		task ("Map Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Button",
				id = "link");

			PageEditor.clickPublish();
		}

		task ("Select the display page template in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Navigate to associated display page template via View Content") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");
		}

		task ("View the name of associated categories are shown in the first module") {
			AssertVisible(
				id = "element-text",
				key_position = "1",
				key_text = "Category Name",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");
		}

		task ("View the title of assets are shown in the second module") {
			var n = "1";

			for (var title : list "Web Content Title,Document Title,Blogs Entry Title") {
				AssertVisible(
					id = "link",
					key_position = "${n}",
					key_text = "${title}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-127024. The user can add a Collection Display with Related Assets into another Collection Display with the Highest Rated Assets."
	@priority = "5"
	test AddCollectionDisplayWithRelatedAssetsToAnotherCollectionDisplayWithHighestRatedAssets {
		property portal.acceptance = "true";

		task ("Add a web content,a blogs entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Select the web content as related assets in blogs entry") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

			RelatedAssets.selectAsset(
				assetTitle = "Web Content Title",
				assetType = "Basic Web Content");

			PortletEntry.publish();
		}

		task ("Select the web content and blogs entry as related assets in document") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Document Title");

			RelatedAssets.selectAsset(
				assetTitle = "Web Content Title",
				assetType = "Basic Web Content");

			RelatedAssets.selectAsset(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");

			PortletEntry.publish();
		}

		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Display to the first module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "1",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the Highest Rated Assets in Collection Display") {
			PageEditor.editCollectionDisplay(
				columnNumber = "1",
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Document Title",
				fragmentName = "Heading");
		}

		task ("Map Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Add a Collection Display to the second module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "2",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the Highest Rated Assets in Collection Display") {
			PageEditor.editCollectionDisplay(
				columnNumber = "2",
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets");
		}

		task ("Add a Collection Display fragment into the second module Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title",
				fragmentName = "Collection Display");
		}

		task ("Select the Related Assets in inner Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = "3",
				infoItemRelatedListProviderName = "Related Assets");
		}

		task ("Add a Button fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Document Title",
				fragmentName = "Button");
		}

		task ("Map Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Button",
				id = "link");
		}

		task ("View the title of assets are shown in the first module") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[contains(@class,'page-editor__topper') and contains(.,'Heading')]//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("View the title of related assets are shown in the second module") {
			var n = "1";

			for (var title : list "Blogs Entry Title,Web Content Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[@class='row'][${n}]//div[contains(@class,'page-editor__topper') and contains(.,'Button')]//*[contains(@data-lfr-editable-id,'link')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "1",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			var n = "1";

			for (var title : list "Document Title,Web Content Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[@class='row'][${n}]//div[contains(@class,'page-editor__topper') and contains(.,'Button')]//*[contains(@data-lfr-editable-id,'link')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "2",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[@class='row'][${n}]//div[contains(@class,'page-editor__topper') and contains(.,'Button')]//*[contains(@data-lfr-editable-id,'link')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "3",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			PageEditor.clickPublish();
		}

		task ("Navigate to page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View the title of assets are shown in the first module") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					id = "element-text",
					key_position = "${n}",
					key_text = "${title}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("View the title of related assets are shown in the second module") {
			var n = "1";

			for (var title : list "Blogs Entry Title,Web Content Title,Document Title,Web Content Title,Document Title,Blogs Entry Title") {
				AssertVisible(
					id = "link",
					key_position = "${n}",
					key_text = "${title}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-127024. The user can add a Collection Display with Related Assets into another Collection Display with Items with This Category."
	@priority = "4"
	test AddCollectionDisplayWithRelatedAssetsToAnotherCollectionDisplayWithItemsWithThisCategory {
		task ("Add a display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");
		}

		task ("Add a Grid to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Display to the first module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "1",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the Items with This Category in Collection Display") {
			PageEditor.editCollectionDisplay(
				columnNumber = "1",
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Items with This Category");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Heading");
		}

		task ("Map Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Add a Collection Display to the second module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "2",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the Items with This Category in Collection Display") {
			PageEditor.editCollectionDisplay(
				columnNumber = "2",
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Items with This Category");
		}

		task ("Add a Collection Display fragment into the second module Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "",
				fragmentName = "Collection Display");
		}

		task ("Select the Related Assets in inner Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = "3",
				infoItemRelatedListProviderName = "Related Assets");
		}

		task ("Add a Button fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Button");
		}

		task ("Map Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Button",
				id = "link");

			PageEditor.clickPublish();
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category in vocabulary") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document entry") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Select the display page template in category") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.editCP(
				categoryName = "Category Name",
				displayPageName = "Display Page Name",
				displayPageTemplateType = "Specific",
				vocabularyName = "Vocabulary Name");
		}

		task ("Select the web content as related assets in blogs entry") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

			RelatedAssets.selectAsset(
				assetTitle = "Web Content Title",
				assetType = "Basic Web Content");

			PortletEntry.publish();
		}

		task ("Select the web content as related assets in document") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Document Title");

			RelatedAssets.selectAsset(
				assetTitle = "Web Content Title",
				assetType = "Basic Web Content");

			PortletEntry.publish();
		}

		task ("Navigate to associated display page template via View Display Page") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View Display Page",
				rowEntry = "Category Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");
		}

		task ("View the title of web content is shown in the first module") {
			AssertVisible(
				id = "element-text",
				key_position = "1",
				key_text = "Web Content Title",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");
		}

		task ("View the title of related assets are shown in the second module") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title") {
				AssertVisible(
					id = "link",
					key_position = "${n}",
					key_text = "${title}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-127025. The DPT author can use Basic Web Content related item collection provider in DPT for Category."
	@priority = "5"
	test ViewCollectionItemsBasedOnBasicWebContentOnDisplayPageTemplateForCategory {
		property test.name.skip.portal.instance = "CollectionDisplayWithRelatedItemsCollectionProviders#ViewCollectionItemsBasedOnBasicWebContentOnDisplayPageTemplateForCategory";

		task ("Enable the DDMStructure feature via gogo shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.journal.web.internal.instance.lifecycle.DDMStructureModelListener");

			GogoShell.viewOutput(outputContent = "true");
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry with category") {
			JSONBlog.addEntry(
				assetCategoryIds = "${categoryId}",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document with category") {
			JSONDocument.addFile(
				assetCategoryIds = "${categoryId}",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name");
		}

		task ("Add a display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");
		}

		task ("Add a Collection display fragment to display Page Template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Basic Web Content related items collection provider and Select the Bordered List") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Basic Web Content",
				listStyle = "Bordered List");

			PageEditor.clickPublish();
		}

		task ("Associate the display page template to category") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.editCP(
				categoryName = "Category Name",
				displayPageName = "Display Page Name",
				displayPageTemplateType = "Specific",
				vocabularyName = "Vocabulary Name");
		}

		task ("View only the title of web content shown in display page template") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View Display Page",
				rowEntry = "Category Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");

			AssertVisible(
				key_entryContent = "[normalize-space()='Web Content Title']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}

		task ("Disable the DDMStructure feature via gogo shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:disable com.liferay.journal.web.internal.instance.lifecycle.DDMStructureModelListener");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	@description = "This is a use case for LPS-127023. The related assets should be in Collection Display when select Related Assets from Related Items Collection Provider."
	@priority = "5"
	test ViewRelatedAssetsInCollectionDisplay {
		property testray.main.component.name = "Display Pages";

		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Web Content DPT",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a display page template for Blogs Entry") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Blogs Entry DPT",
				groupName = "Test Site Name");
		}

		task ("Add a display page template for Document and Basic Document") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Document DPT",
				groupName = "Test Site Name",
				subType = "Basic Document");
		}

		task ("Add a Collection Display to Web Content DPT and Select Related Assets in Related Items Collection Providers") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Web Content DPT");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Related Assets");
		}

		task ("Add a Heading to Collection Display and Map the Title field to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.clickPublish();
		}

		task ("Add a Web Content Article, a Blogs Entry and a Document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Edit the web content, Select display page template and Select related assets") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Web Content DPT",
				pageType = "Display Page Templates");

			RelatedAssets.selectAsset(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");

			WaitForElementNotPresent(locator1 = "IFrame#DIALOG");

			RelatedAssets.selectAsset(
				assetTitle = "Document Title",
				assetType = "Basic Document");

			WaitForElementNotPresent(locator1 = "IFrame#DIALOG");

			PortletEntry.publish();
		}

		task ("Add a widget page and Add an Asset Publisher to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Assert related assets displayed in display page template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Web Content Title");

			ControlMenu.viewHeaderTitle(headerTitle = "Web Content DPT");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Collection Display to Blogs Entry DPT") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Blogs Entry DPT");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select Related Assets in Related Items Collection Providers and Bordered List style") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Related Assets",
				listStyle = "Bordered List");

			PageEditor.clickPublish();
		}

		task ("Edit the blogs entry, Select display page template and Select related assets") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

			WebContent.editDisplayPage(
				pageName = "Blogs Entry DPT",
				pageType = "Display Page Templates");

			RelatedAssets.selectAsset(
				assetTitle = "Document Title",
				assetType = "Basic Document");

			WaitForElementNotPresent(locator1 = "IFrame#DIALOG");

			PortletEntry.publish();
		}

		task ("Assert related assets displayed in display page template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Blogs Entry Title");

			ControlMenu.viewHeaderTitle(headerTitle = "Blogs Entry DPT");

			var n = "1";

			for (var title : list "Web Content Title,Document Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Add a Collection Display to Document DPT and Select Related Assets in Related Items Collection Providers") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Document DPT");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Related Assets");
		}

		task ("Add a Content Display to Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "",
				fragmentName = "Content Display");

			PageEditor.clickPublish();
		}

		task ("Edit the document, Select display page template") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Document Title");

			WebContent.editDisplayPage(
				pageName = "Document DPT",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Assert related assets displayed in display page template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Document Title");

			ControlMenu.viewHeaderTitle(headerTitle = "Document DPT");

			var n = "1";

			for (var content : list "Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_colPosition = "1",
					key_entryContent = "${content}",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTENT_DISPLAY_FRAGMENT_CONTENT");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-132081. View related categories shown in display page template for non-category assets when apply Categories for This Item to Collection Display."
	@priority = "5"
	test ViewRelatedCategoriesInCollectionDisplayWithCategoriesForThisItem {
		property portal.acceptance = "true";

		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Web Content DPT",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a display page template for Blogs Entry") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Blogs Entry DPT",
				groupName = "Test Site Name");
		}

		task ("Add a display page template for Document and Basic Document") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Document DPT",
				groupName = "Test Site Name",
				subType = "Basic Document");
		}

		task ("Add a Collection Display with Categories for This Item then map the Name field to Heading inside Collection Display in each display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			for (var displayPageName : list "Web Content DPT,Blogs Entry DPT,Document DPT") {
				DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "${displayPageName}");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Collection Display");

				PageEditor.editCollectionDisplay(
					fragmentName = "Collection Display",
					infoItemRelatedListProviderName = "Categories for This Item");

				PageEditor.addFragmentToCollectionDisplay(
					collectionName = "Basic Components",
					entryTitle = "",
					fragmentName = "Heading");

				PageEditorMapping.mapEditableFieldToCollectionItems(
					field = "Name",
					fragmentName = "Heading",
					id = "element-text");

				PageEditor.clickPublish();
			}
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add three categories in vocabulary") {
			var firstCategoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name 1",
				vocabularyName = "Vocabulary Name");

			var secondCategoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name 2",
				vocabularyName = "Vocabulary Name");

			var thirdCategoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name 3",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with all three categories") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${firstCategoryId},${secondCategoryId},${thirdCategoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select the display page template in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Web Content DPT",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Add a blogs entry with all three categories") {
			JSONBlog.addEntry(
				assetCategoryIds = "${firstCategoryId},${secondCategoryId},${thirdCategoryId}",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Select the display page template in blogs entry") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

			WebContent.editDisplayPage(
				pageName = "Blogs Entry DPT",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Add a document entry with all three categories") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${firstCategoryId},${secondCategoryId},${thirdCategoryId}",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Select the display page template in document") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Document Title");

			WebContent.editDisplayPage(
				pageName = "Document DPT",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Add a widget page then add an Asset Publisher to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Assert related categories displayed in display page template") {
			for (var assetType : list "Web Content,Blogs Entry,Document") {
				Navigator.gotoSitePage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				AssetPublisherPortlet.clickAssetTitle(assetTitle = "${assetType} Title");

				ControlMenu.viewHeaderTitle(headerTitle = "${assetType} DPT");

				for (var n : list "1,2,3") {
					AssertTextEquals(
						key_colPosition = "1",
						key_fragmentName = "heading",
						key_rowPosition = "${n}",
						locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
						value1 = "Category Name ${n}");
				}
			}
		}
	}

}