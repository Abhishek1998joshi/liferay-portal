@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-165791. Focus on experience selector when the window width is less than 990px."
	@priority = "3"
	test FocusOnExperienceSelectorWhenWindowWidthLessThan990 {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("When the page creator resize the window size less than 990px") {
			SetWindowSize(value1 = "900,1040");
		}

		task ("Then the page creator can focus on the Experience selector") {
			KeyPress(
				locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS",
				value1 = "\TAB");

			TestUtils.assertElementFocused(element = "//button[@aria-label='Experience']");
		}
	}

	@description = "This is a test for LPS-165356. The Skip to Product Menu link only be focusable when the Product Menu is open."
	@priority = "3"
	test FocusOnSkipToProductMenuWhenProductMenuOpen {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Page Name");
		}

		task ("When the page creator opens the Product Menu") {
			ProductMenuHelper.openProductMenu();
		}

		task ("Then the page creator can focus on the Skip to Product Menu link") {
			KeyPress(
				locator1 = "//body",
				value1 = "\TAB");

			KeyPress(
				locator1 = "ProductMenu#TOGGLE",
				value1 = "\TAB");

			TestUtils.assertElementFocused(element = "//a[contains(.,'Skip to Product Menu')]");
		}

		task ("When the page creator closes the Product Menu") {
			ProductMenuHelper.closeProductMenu();
		}

		task ("Then the page creator cannot focus on the Skip to Product Menu link") {
			KeyPress(
				locator1 = "//body",
				value1 = "\TAB");

			KeyPress(
				locator1 = "ProductMenu#TOGGLE",
				value1 = "\TAB");

			TestUtils.assertElementNotFocused(element = "//a[contains(.,'Skip to Product Menu')]");

			TestUtils.assertElementFocused(element = "//a[span//*[name()='svg'][contains(@class,'icon-angle-left')]]");
		}
	}

	@description = "This is a test for LPS-165485. The page creator could switch edit mode via keyboard."
	@priority = "3"
	test SwitchEditModeViaKeyboard {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("When the page creator opens the dropdown menu of edit mode selector via keyboard") {
			KeyPress(
				key_deviceType = "Portrait Phone",
				locator1 = "PageEditor#DEVICE_TYPE",
				value1 = "\TAB");

			KeyPress(
				locator1 = "PageEditor#EDIT_MODE_SELECTOR",
				value1 = "\ENTER");
		}

		task ("Then the page creator switchs to Content Editing via keyboard") {
			KeyPress(
				key_menuItem = "Page Design",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "\DOWN");

			KeyPress(
				key_menuItem = "Content Editing",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "\ENTER");

			AssertTextEquals(
				locator1 = "PageEditor#EDIT_MODE_SELECTOR",
				value1 = "Content Editing");

			TestUtils.assertElementFocused(element = "//button[contains(@class,'edit-mode-selector')]");
		}
	}

	@description = "This is a test for LPS-165824. The edit mode selector should have aria-label attribute."
	@priority = "3"
	test ViewAccessibilityOfEditModeSelector {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the edit mode selector should have correct aria-label") {
			AssertAttributeValue(
				attribute1 = "aria-label",
				locator1 = "PageEditor#EDIT_MODE_SELECTOR",
				value1 = "Page Edition Mode: Page Design");
		}
	}

	@description = "This is a test for LPS-165625. The Language Selector shouldn't have aria-pressed attribute."
	@priority = "2"
	test ViewAccessibilityOfLanguageSelector {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the Language Selector should have correct accessibility") {
			AssertElementNotPresent(locator1 = "//button[contains(@class,'dropdown-toggle')][@aria-pressed][*[name()='svg'][contains(@class,'lexicon-icon-en-us')]]");

			AssertElementPresent(locator1 = "//button[contains(@class,'dropdown-toggle')]//span[normalize-space()='Select a language, current language: en-US.']");
		}
	}

	@description = "This is a test for LPS-165296. The screen reader should be able to distinguish between view mode and edit mode."
	@priority = "3"
	test ViewPageTitleOfViewModeAndEditMode {
		task ("Given a page creator has a published content page") {
			Navigator.openURL();

			var siteName = selenium.getText("Home#SITE_NAME");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("When the page creator accesses to the content page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the page title doesn't have (Editing)") {
			var viewModeTitle = selenium.getTitle();

			TestUtils.assertEquals(
				actual = "${viewModeTitle}",
				expected = "Test Page Name - Test Site Name - ${siteName}");
		}

		task ("When the page creator accesses to the content page at edit mode") {
			ContentPages.gotoPageEditor();
		}

		task ("Then the title has (Editing)") {
			var editModeTitle = selenium.getTitle();

			TestUtils.assertEquals(
				actual = "${editModeTitle}",
				expected = "Test Page Name - Test Site Name - ${siteName} (Editing)");
		}
	}

	@description = "This is a test for LPS-165291. The aria-selected of unselected tab should be false on the Fragments and Widgets panel."
	@priority = "3"
	test ViewStateOfUnselectedTabOnFragmentsAndWidgetsPanel {
		task ("Given a page creator has a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("When the page creator accesses to the Fragments and Widgets panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the page creator sees the aria-selected of Widgets tab is false") {
			AssertElementNotPresent(
				key_tab = "Widgets",
				locator1 = "NavTab#ACTIVE_TAB_LINK");

			AssertAttributeValue(
				attribute1 = "aria-selected",
				key_tab = "Widgets",
				locator1 = "NavTab#TAB_LINK",
				value1 = "false");
		}
	}

}