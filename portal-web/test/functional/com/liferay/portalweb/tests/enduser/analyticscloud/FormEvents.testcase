@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Forms to page and display a form") {
			ACUtils.createFormAndAddToPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8684 | Test Summary: Check fieldBlurred is triggered when navigating the form hitting the tab key"
	@ignore = "true"
	@priority = "3"
	test CheckFieldBlurredTriggeredWhenNavigateFormHittingTabKey {

		// TODO LRAC-8684 CheckFieldBlurredTriggeredWhenNavigateFormHittingTabKey pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8683 | Test Summary: Check fieldBlurred triggers when a previously focused field loses focus and check its properties (see reference document in comments)"
	@ignore = "true"
	@priority = "5"
	test CheckFieldBlurredWhenFieldLosesFocusAndCheckProperties {

		// TODO LRAC-8683 CheckFieldBlurredWhenFieldLosesFocusAndCheckProperties pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8685 | Test Summary: Check fieldFocused is triggered when a field is focused (selected) and check its properties (see reference document in comments)"
	@ignore = "true"
	@priority = "3"
	test CheckFieldFocusedTriggeredWhenFieldIsFocused {

		// TODO LRAC-8685 CheckFieldFocusedTriggeredWhenFieldIsFocused pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8690 | Test Summary: Check fieldFocused is triggered when navigating the form hitting the tab key"
	@ignore = "true"
	@priority = "5"
	test CheckFieldFocusedWhenNavigatingForm {

		// TODO LRAC-8690 CheckFieldFocusedWhenNavigatingForm pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8691 | Test Summary: Check formSubmitted triggers after submitting a form and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckFormSubmittedAfterSubmittingForm {
		property proxy.server.enabled = "true";

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${propertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${propertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Navigate to the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Submit a record in form") {
			FormFields.editText(
				fieldName = "Text",
				fieldValue = "First Record");

			FormPortlet.submitSuccessfully();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("formSubmitted");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("View the formId of formSubmitted event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formSubmitted",
				property = "formId",
				value = "${formId}");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8682 | Test Summary: Check formViewed triggers and check its properties (see reference document in comments)"
	@ignore = "true"
	@priority = "5"
	test CheckFormViewedAndCheckProperties {

		// TODO LRAC-8682 CheckFormViewedAndCheckProperties pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8692 | Test Summary: Check pageViewed IS NOT triggered without formViewed"
	@ignore = "true"
	@priority = "4"
	test CheckPageViewedIsNotTriggeredWithoutFormViewed {

		// TODO LRAC-8692 CheckPageViewedIsNotTriggeredWithoutFormViewed pending implementation

	}

}