@component-name = "portal-ab-test"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "A/B Test";

	setUp {

		// Open Analytics Cloud, login and take the token to connect to DXP

		var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");
		Navigator.openURL(baseURL = "${analyticsCloudURL}");

		// Take token from Analytics Cloud

		AnalyticsCloud.loginAnalyticsCloud(
			emailAddress = "test@liferay.com",
			password = "test");

		AnalyticsCloud.takeTokenFromAnalyticsCloud();

		// Go to DXP portal

		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		Navigator.openURL();

		// Connect and synchronyze with Analytics Cloud

		AnalyticsCloud.syncAnalyticsCloud();

		// Create content page

		SitePages.openPagesAdmin(siteURLKey = "guest");

		ContentPages.addPage(pageName = "Content Page");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/guest/content-page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		Click(locator1 = "ABTest#AB_TEST_BUTTON");

		AnalyticsCloud.teardownAnalyticsCloud();

		SitePages.openPagesAdmin(siteURLKey = "guest");

		SitePages.deletePage(pageName = "Content Page");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Validate if the user can create an A/B Test"
	@priority = "5"
	test CreateABTestByBounceRate {
		property minimum.slave.ram = "32";

		ABTest.createABTest(
			goal = "Bounce Rate",
			testTitle = "AB test title");

		ABTest.createVariant(variantName = "Variant name");

		ABTest.runTest();

		ABTest.checkAnalyticsCloudInfo();

		if (IsElementNotPresent(locator1 = "ABTest#AB_TEST_TITLE_AC_SIDE")) {
			SelectWindow(locator1 = "title=Analytics Cloud");

			AnalyticsCloud.loginAnalyticsCloud(
				emailAddress = "test@liferay.com",
				password = "test");
		}
		SelectWindow(locator1 = "title=Tests - Analytics Cloud");

		AssertTextEquals(
			ABtestTitle = "AB test title",
			locator1 = "ABTest#AB_TEST_TITLE_AC_SIDE",
			value1 = "AB test title");

		SelectWindow(locator1 = "title=Content Page - Liferay DXP");

		Refresh();

		if (IsElementNotPresent(locator1 = "ABTest#TERMINATE_TEST_BUTTON")) {
			User.firstLoginPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/guest/content-page");
		}

		ABTest.terminateTest();
	}

	@description = "Validate if, in the AB Test by Click, the sidebar informs the user that the element id is mandatory"
	@priority = "5"
	test CreateABTestByClick {
		property minimum.slave.ram = "32";

		ContentPages.clickPencil();

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		Button.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/guest/content-page");

		ABTest.createABTest(
			goal = "Click",
			testTitle = "AB test title");

		ABTest.selectElementID();

		ABTest.createVariant(variantName = "Variant name");

		ABTest.runTest();

		ABTest.checkAnalyticsCloudInfo();

		if (IsElementNotPresent(locator1 = "ABTest#AB_TEST_TITLE_AC_SIDE")) {
			SelectWindow(locator1 = "title=Analytics Cloud");

			AnalyticsCloud.loginAnalyticsCloud(
				emailAddress = "test@liferay.com",
				password = "test");
		}
		SelectWindow(locator1 = "title=Tests - Analytics Cloud");

		AssertTextEquals(
			ABtestTitle = "AB test title",
			locator1 = "ABTest#AB_TEST_TITLE_AC_SIDE",
			value1 = "AB test title");

		SelectWindow(locator1 = "title=Content Page - Liferay DXP");

		Refresh();

		if (IsElementNotPresent(locator1 = "ABTest#TERMINATE_TEST_BUTTON")) {
			User.firstLoginPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/guest/content-page");
		}

		ABTest.terminateTest();
	}

	@description = "Validate if, in the AB Test by Click, the sidebar informs the user that the element id is mandatory"
	@priority = "5"
	test CreateABTestByClickInvalidId {
		property minimum.slave.ram = "32";

		ABTest.createABTest(
			goal = "Click",
			testTitle = "AB test title");

		ABTest.writeId(elementId = "invalidID");

		ABTest.runTest();

		AssertElementPresent(locator1 = "ABTest#INVALID_ID_MESSAGE");
	}

	@description = "Validate if, in the AB Test, the sidebar informs the user that minimum one variant is mandatory to test against Control if the user add variants and remove all variants"
	@priority = "5"
	test CreateABTestRunWithDeletedVariants {
		property minimum.slave.ram = "32";

		ABTest.createABTest(
			goal = "Bounce Rate",
			testTitle = "AB test title");

		ABTest.createVariant(variantName = "Variant name");

		ABTest.deleteVariant();

		ABTest.runTest();

		AssertTextEquals(
			locator1 = "ABTest#VARIANT_NEEDED_MESSAGE",
			value1 = "A variant needs to be created.");
	}

	@description = "Validate if, in the AB Test, the sidebar informs the user that minimum one variant is mandatory to test against Control"
	@priority = "5"
	test CreateABTestRunWithNoVariants {
		property minimum.slave.ram = "32";
		
		ABTest.createABTest(
			goal = "Bounce Rate",
			testTitle = "AB test title");

		ABTest.runTest();

		AssertTextEquals(
			locator1 = "ABTest#VARIANT_NEEDED_MESSAGE",
			value1 = "A variant needs to be created.");
	}

}