@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8483 | Test Summary: Add members from different pages"
	@ignore = "true"
	@priority = "3"
	test CanAddMembersFromDifferentPages {

		// TODO LRAC-8483 CanAddMembersFromDifferentPages

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8476 | Test Summary: Cancel Creating a Dynamic Segment"
	@priority = "3"
	test CanCancelCreatingDynamicSegment {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Add an email field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "email");

			ACSegments.editTextCriterion(textInput = "userea@liferay.com");
		}

		task ("Cancel the creation") {
			ACSegments.cancelSegment();

			Button.click(button = "Leave Page");
		}

		task ("View the empty info in Segments admin") {
			AssertTextPresent(
				locator1 = "//body",
				value1 = "No Segments Created");

			AssertVisible(locator1 = "ACSegments#CREATE_SEGMENT_BUTTON");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8477 | Test Summary: Cancel creating a static segment"
	@priority = "3"
	test CanCancelCreatingStaticSegment {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getSiteAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();

			ACSegments.nameSegment(segmentName = "Static Segment Test");
		}

		task ("Add the new user as member") {
			ACSegments.addStaticMember(tableMember = "userfn userln");
		}

		task ("Cancel the creation") {
			ACSegments.cancelSegment();

			Button.click(button = "Leave Page");
		}

		task ("View the empty info in Segments admin") {
			AssertTextPresent(
				locator1 = "//body",
				value1 = "No Segments Created");

			AssertVisible(locator1 = "ACSegments#CREATE_SEGMENT_BUTTON");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8478 | Test Summary: Create a Dynamic Individuals Segment By Date"
	@ignore = "true"
	@priority = "4"
	test CanCreateDynamicIndividualsSegmentByDate {

		// TODO LRAC-8478 CanCreateDynamicIndividualsSegmentByDate

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8480 | Test Summary: Create a Dynamic Individuals Segment with a criteria that uses is known and is not"
	@ignore = "true"
	@priority = "4"
	test CanCreateDynamicIndividualsSegmentWithCriteriaUsesIsAndIsNot {

		// TODO LRAC-8480 CanCreateDynamicIndividualsSegmentWithCriteriaUsesIsAndIsNot

	}

	@description = "Create a dynamic segment with individuals"
	@priority = "5"
	test CanCreateDynamicSegmentWithIndividuals {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "email");

		ACSegments.editTextCriterion(textInput = "userea@liferay.com");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "DYNAMIC SEGMENT");

		AssertElementPresent(
			key_userName = "userfn userln",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Create a Dynamic Individuals Segment with a criteria that uses is unknown"
	@priority = "5"
	test CanCreateDynamicSegmentWithIndividualsUseUnknown {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "fullName");

		ACSegments.editFormControlCriterion(
			criterionName = "fullName",
			option = "is unknown");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "DYNAMIC SEGMENT");

		AssertElementPresent(
			key_userName = "userfn userln",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8482 | Test Summary: Create a nested criteria"
	@ignore = "true"
	@priority = "3"
	test CanCreateNestedCriteria {

		// TODO LRAC-8482 CanCreateNestedCriteria

	}

	@description = "Create a segment that contains anonymous individuals"
	@priority = "5"
	test CanCreateSegmentWithAnonymousIndividuals {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		JSONUser.addUser(
			userEmailAddress = "liferay@liferay.com",
			userFirstName = "liferay",
			userLastName = "liferay",
			userScreenName = "liferay");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "liferay@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "liferay@liferay.com",
			userLoginFullName = "liferay liferay");

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.includeAnonymous();

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "fullName");

		ACSegments.editFormControlCriterion(
			criterionName = "fullName",
			option = "is unknown");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACSegments.viewSegmentMembershipLegendNumbers(
			anonymousNumber = "1",
			knownNumber = "1",
			totalNumber = "2");

		ACSegments.viewIncludeAnonymousLabel();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8479 | Test Summary: Create a Segment with a Number Property"
	@ignore = "true"
	@priority = "4"
	test CanCreateSegmentWithNumberProperty {

		// TODO LRAC-8479 CanCreateSegmentWithNumberProperty

	}

	@description = "Create a static segment with individual"
	@priority = "5"
	test CanCreateStaticSegmentWithIndividuals {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "userfn userln");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Static Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "STATIC SEGMENT");

		AssertElementPresent(
			key_userName = "userfn userln",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8474 | Test Summary: Duplicate a criteria"
	@priority = "3"
	test CanDuplicateCriteria {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Add a jobTitle field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "jobTitle");
		}

		task ("Duplicate the criteria") {
			ACSegments.duplicateSegmentCriteria(criteriaName = "jobTitle");
		}

		task ("View the both criterias") {
			ACSegments.viewDuplicatedCriteria(
				criteriaName = "jobTitle",
				totalCriteriaCount = "2");
		}

		task ("Define the first criteria") {
			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "web developer");
		}

		task ("Define the second criteria") {
			ACSegments.selectOperator(
				index = "2",
				operator = "contains");

			ACSegments.editTextCriterion(
				index = "2",
				textInput = "lawyer");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("View both criterias in Segment Criteria card") {
			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "jobTitle",
				attributeValue = '''"web developer"''',
				condition = "contains",
				conjunction = "AND");

			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "jobTitle",
				attributeValue = '''"lawyer"''',
				condition = "contains",
				index = "2");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8475 | Test Summary: Dynamic segment members preview in real time"
	@ignore = "true"
	@priority = "3"
	test CanDynamicSegmentMembersPreviewInRealTime {

		// TODO LRAC-8475 CanDynamicSegmentMembersPreviewInRealTime

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8473 | Test Summary: Filter the Segment 'Add Members' Modal"
	@ignore = "true"
	@priority = "3"
	test CanFilterSegmentByAddMembers {

		// TODO LRAC-8473 CanFilterSegmentByAddMembers

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8471 | Test Summary: Paginate Segment Profile in Membership List"
	@ignore = "true"
	@priority = "3"
	test CanPaginateSegmentProfileInMembershipList {

		// TODO LRAC-8471 CanPaginateSegmentProfileInMembershipList

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8472 | Test Summary: Paginate static segment 'Add Members' creation model"
	@ignore = "true"
	@priority = "3"
	test CanPaginateStaticSegmentAddMembers {

		// TODO LRAC-8472 CanPaginateStaticSegmentAddMembers

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8133 | Test Summary: Create button shows option to create static or dynamic"
	@priority = "5"
	test CanSeeOptionsToCreateStaticOrDynamicSegment {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		Click(locator1 = "ACSegments#CREATE_SEGMENT_BUTTON");

		for (var segmentType : list "Dynamic Segment,Static Segment") {
			getFirst = StringUtil.extractFirst("${segmentType}"," ");

			getFirst = StringUtil.upperCase("${getFirst}");

			AssertTextEquals(
				key_SegmentType = "${getFirst}",
				locator1 = "ACSegments#SELECT_SEGMENT_TYPE",
				value1 = "${segmentType}");
		}

		ACSegments.selectSegmentType(segmentType = "STATIC");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "STATIC SEGMENT");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "DYNAMIC SEGMENT");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8481 | Test Summary: Create a Dynamic Individuals Segment with a criteria that uses a boolean and a does not contain"
	@ignore = "true"
	@priority = "4"
	test CreateDynamicIndividualsSegmentWithCriteriaUsesBooleanAndDoesNotContain {

		// TODO LRAC-8481 CreateDynamicIndividualsSegmentWithCriteriaUsesBooleanAndDoesNotContain

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8484 | Test Summary: Segment Form Validation"
	@priority = "5"
	test ViewSegmentFormValidation {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("View the Create button is disabled when the Name field is empty") {
			AssertVisible(
				key_text = "Create",
				locator1 = "Button#ANY_DISABLED");
		}

		task ("Type the segment name") {
			ACSegments.nameSegment(segmentName = "Static Segment Test");
		}

		task ("View the Create button is still disabled when there are no individuals") {
			AssertTextEquals(
				locator1 = "ACSegments#NO_MEMBER_TITLE",
				value1 = "There are no Individuals found.");

			AssertVisible(
				key_text = "Create",
				locator1 = "Button#ANY_DISABLED");
		}

		task ("Cancel the creation") {
			ACSegments.cancelSegment();

			AssertTextPresent(
				locator1 = "//body",
				value1 = "No Segments Created");
		}

		task ("Add a new dynamic segment") {
			ACSegments.createDynamicSegment();
		}

		task ("View the Save Segment button is disabled when the Name field is empty") {
			AssertVisible(
				key_text = "Save Segment",
				locator1 = "Button#ANY_DISABLED");
		}

		task ("Type the segment name") {
			ACSegments.nameSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View the Save Segment button is still disabled when the form is empty") {
			ACSegments.viewDeletedCriteria();

			AssertTextPresent(
				locator1 = "//body",
				value1 = "Drag and drop over an existing criteria to form groups.");

			AssertVisible(
				key_text = "Save Segment",
				locator1 = "Button#ANY_DISABLED");
		}
	}

}