@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			SitePages.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(pageName = "Test Content Page Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-96795. Content author having permissions to create and update web content could see edit icon in the content page displaying the web contents and could edit web content in edit mode."
	@priority = "5"
	test EditContentWithCreateAndUpdateWebContentPermissions {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		for (var resourceActionIndex : list "VIEW,UPDATE_LAYOUT_CONTENT") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		for (var resourceActionIndex : list "ADD_ARTICLE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.journal",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.journal.model.JournalArticle",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		User.openUsersAdmin();

		User.assignSiteRoleCP(
			siteRoleName = "Roles Siterole Name",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAdd();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "${webContentTitle}");

			PortletEntry.publish();
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WC WebContent Title 1",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		SelectFrame(value1 = "relative=top");

		PageEditor.waitForAutoSave();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.addWidget(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			contentPage = "true",
			webContentTitle = "WC WebContent Title 2");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.addWidget(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC WebContent Title 3",
			assetType = "Basic Web Content",
			contentPage = "true");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.clickPublish();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			PageEditor.gotoTab(tabName = "Contents");

			LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
				menuItem = "Edit",
				rowEntry = "${webContentTitle}");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			Click(locator1 = "Button#BACK");
		}
	}

	@description = "This is a test for LPS-96795. Content author having permissions to update web content and Update Page Content could see edit icon in the content page displaying the web contents and could edit web content in editmode."
	@priority = "5"
	test EditContentWithUpdateWebContentAndUpdatePageContentPermissions {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Test Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addSiteRole(
			roleKey = "Roles Siterole Name",
			roleTitle = "Roles Siterole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		for (var resourceActionIndex : list "UPDATE_LAYOUT_CONTENT,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.journal",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.journal.model.JournalArticle",
			roleTitle = "Roles Siterole Name",
			roleType = "site");

		User.openUsersAdmin();

		User.assignSiteRoleCP(
			siteRoleName = "Roles Siterole Name",
			userScreenName = "usersn");

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "${webContentTitle}");

			PortletEntry.publish();
		}

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditorMapping.gotoEditableFieldMapping(
			fragmentName = "Heading",
			id = "text");

		PageEditorMapping.mapEditableFieldToAsset(
			entryTitle = "WC WebContent Title 1",
			navItem = "Web Content");

		Select(
			locator1 = "PageEditorEditableLink#FIELD",
			value1 = "Title");

		SelectFrame(value1 = "relative=top");

		PageEditor.waitForAutoSave();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.addWidget(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(
			contentPage = "true",
			webContentTitle = "WC WebContent Title 2");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.addWidget(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WC WebContent Title 3",
			assetType = "Basic Web Content",
			contentPage = "true");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.clickPencil();

		PageEditor.clickPublish();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		ContentPages.clickPencil();

		for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
			PageEditor.gotoTab(tabName = "Contents");

			LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
				menuItem = "Edit",
				rowEntry = "${webContentTitle}");

			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			Click(locator1 = "Button#BACK");
		}
	}

}