@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-109298. Each tab of Tabs fragment is able to contain any elements in content page."
	@priority = "5"
	test AddFragmentToIndividualTabOfTabsFragment {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		PageEditor.addElementToTab(
			collectionName = "Layout Elements",
			fragmentName = "Container",
			index = "2",
			navItem = "Tab 1",
			navTab = "Fragments",
			position = "1");

		var n = "2";

		for (var fragmentName : list "Heading,Tabs") {
			var index = ${n} + 1;

			PageEditor.addElementToTab(
				collectionName = "Basic Components",
				fragmentName = "${fragmentName}",
				index = "${index}",
				navItem = "Tab ${n}",
				navTab = "Fragments",
				position = "1");

			var n = ${n} + 1;
		}

		PageEditor.addElementToTab(
			index = "9",
			navItem = "Tab 4",
			navTab = "Widgets",
			portletName = "Asset Publisher",
			position = "5");

		PageEditor.clickPublish();

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@description = "This is a use case for LPS-109298. Can add elements above and below Tabs fragment to page."
	@priority = "4"
	test AddFragmentWithTabsFragmentInTheMiddle {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		DragAndDrop.javaScriptDragAndDropToUp(
			key_collectionName = "Basic Components",
			key_fragmentName = "Button",
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
			locator2 = "//*[contains(@class,'component-tabs')]",
			value1 = "");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading",
			targetFragmentName = "Tabs");

		PageEditor.viewFragmentOrder(
			fragmentName = "Button",
			position = "1");

		PageEditor.viewFragmentOrder(
			fragmentName = "Tabs",
			position = "2");

		PageEditor.viewFragmentOrder(
			fragmentName = "Heading",
			position = "3");
	}

	@description = "This is a use case for LPS-109298. Can add Tabs fragment to container of Layout elements."
	@priority = "3"
	test AddTabsFragmentToLayoutElements {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Grid",
			targetFragmentName = "Container");

		PageEditor.addElementToContainer(
			collectionName = "Basic Components",
			fragmentName = "Tabs",
			navTab = "Fragments");

		DragAndDrop.javaScriptDragAndDropToObject(
			key_collectionName = "Basic Components",
			key_columnNumber = "1",
			key_fragmentName = "Tabs",
			key_position = "1",
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
			locator2 = "PageEditor#GRID_COLUMN",
			value1 = "");

		PageEditor.waitForAutoSave();

		AssertElementPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Tabs')]//li[contains(@class,'title')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
	}

	@description = "This is a use case for LPS-111274. The selected Tabs fragment should always stay selected when click on the tabs of it."
	@priority = "5"
	test ClickTabsFragmentTabAndViewHeader {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		AssertElementPresent(
			key_fragmentName = "Tabs",
			locator1 = "Fragment#FRAGMENT_HEADER");

		for (var navItem : list "Tab 2,Tab 3,Tab 4") {
			PageEditor.gotoTabsFragmentNavItem(navItem = "${navItem}");

			AssertVisible(
				key_fragmentName = "Tabs",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}
	}

	@description = "This is a use case for LPS-111274. The light blue frame is shown when hover on unmapped editable field of selected fragments but the dark blue frame is shown when click on unmapped editable field of selected fragments."
	@priority = "5"
	test ClickUnmappedEditableFieldAndMouseOver {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.clickEditableField(
			contributed = "true",
			fragmentName = "Heading",
			id = "element-text");

		Pause(locator1 = "1000");

		AssertCssValue(
			id = "element-text",
			key_fragmentName = "Heading",
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
			locator2 = "boxShadow",
			value1 = "rgb(11, 95, 255) 0px 0px 0px 1px inset");

		Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

		Click.clickNoWaitForVisible(
			key_fragmentName = "Heading",
			locator1 = "Fragment#FRAGMENT_HEADER");

		MouseOver.mouseOverNotVisible(
			id = "element-text",
			key_fragmentName = "Heading",
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD");

		Pause(locator1 = "1000");

		AssertCssValue(
			id = "element-text",
			key_fragmentName = "Heading",
			locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD",
			locator2 = "boxShadow",
			value1 = "rgb(128, 172, 255) 0px 0px 0px 1px inset");
	}

	@description = "This is a test for LPS-101249. Can only select Documents and Media when set itemType to FileEntry."
	@priority = "3"
	test OnlySelectDocumentsAndMediaViaFragmentWhenItemTypeIsFileEntry {
		task ("Add a WC based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "Web Content Description",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blog") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document with an image") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "display-collection-name.zip");
		}

		task ("Add new fragment to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "imported",
				fragmentName = "Documents and Media");

			AssertElementPresent(
				key_fragmentName = "Documents and Media",
				key_messageIfo = "The selected content will be shown here.",
				locator1 = "Fragment#MESSAGE_INFO");
		}

		task ("Open select popup") {
			PageEditor.gotoSelectPanel(fragmentName = "Documents and Media");
		}

		task ("Assert only Documents and Media entry shown") {
			AssertElementPresent(
				key_card = "Document Title",
				locator1 = "Card#CARD");

			AssertElementNotPresent(
				key_navItem = "Web Content",
				locator1 = "NavBar#NAV_ITEM_LINK");

			AssertElementNotPresent(
				key_navItem = "Blogs",
				locator1 = "NavBar#NAV_ITEM_LINK");
		}

		task ("Assert fragment display correctly") {
			LexiconCard.clickCard(card = "Document Title");

			AssertTextEquals(
				locator1 = "//div[contains(@class,'fragment_dm')]",
				value1 = "Document Title");
		}
	}

	@description = "This is a test for LPS-101249. Can only select web content articles created with a specific structure when set itemSubtype."
	@priority = "3"
	test OnlySelectWebContentBasedOnCustomStructureViaFragmentWhenSetItemSubtype {
		property test.name.skip.portal.instance = "ContentPagesWithContributedFragments#OnlySelectWebContentBasedOnCustomStructureViaFragmentWhenSetItemSubtype";

		task ("Add a WC based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "Web Content Description",
				groupName = "Test Site Name",
				title = "Basic Web Content Title");
		}

		task ("Disable autogenerate structure key") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Web Content",
				configurationName = "Administration",
				configurationScope = "System Scope");

			FormFields.disableCheckbox(fieldName = "Autogenerate Structure Key");

			PortletEntry.save();
		}

		task ("Add a structure with Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureKey = "STRUCTURE-TEXT",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a WC based on structure with Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				description = "Web Content Description",
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentText = "Web Content Text",
				webContentTitle = "Web Content With Text Title");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "Web Content With Text Title");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "display-collection-name.zip");
		}

		task ("Add new fragment to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "imported",
				fragmentName = "Web Content With Text");

			AssertElementPresent(
				key_fragmentName = "Web Content With Text",
				key_messageIfo = "The selected content will be shown here.",
				locator1 = "Fragment#MESSAGE_INFO");
		}

		task ("Open select popup") {
			PageEditor.gotoSelectPanel(fragmentName = "Web Content With Text");
		}

		task ("Assert only WC with text field shown in popup") {
			AssertElementNotPresent(
				key_listEntry = "Basic Web Content Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE");

			AssertElementPresent(
				key_listEntry = "Web Content With Text Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE");
		}

		task ("Assert fragment display correctly") {
			AssertClick(
				key_listEntry = "Web Content With Text Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE",
				value1 = "Web Content With Text Title");

			AssertTextEquals(
				locator1 = "//div[contains(@class,'fragment_wctext')]",
				value1 = "Web Content With Text Title Web Content Description Web Content Text");
		}
	}

	@description = "This is a test for LPS-101249. Can only select web content articles when set itemType to JournalArticle"
	@priority = "5"
	test OnlySelectWebContentViaFragmentWhenItemTypeIsJournalArticle {
		property portal.acceptance = "true";

		task ("Add a WC based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "Web Content Description",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blog") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add a document") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "display-collection-name.zip");
		}

		task ("Add new fragment to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "imported",
				fragmentName = "Web Content");

			AssertElementPresent(
				key_fragmentName = "Web Content",
				key_messageIfo = "The selected content will be shown here.",
				locator1 = "Fragment#MESSAGE_INFO");
		}

		task ("Open select popup") {
			PageEditor.gotoSelectPanel(fragmentName = "Web Content");
		}

		task ("Assert only Web Content entry shown") {
			AssertElementPresent(
				key_listEntry = "Web Content Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE");

			AssertElementNotPresent(
				key_navItem = "Documents and Media",
				locator1 = "NavBar#NAV_ITEM_LINK");

			AssertElementNotPresent(
				key_navItem = "Blogs",
				locator1 = "NavBar#NAV_ITEM_LINK");
		}

		task ("Assert fragment display correctly") {
			AssertClick(
				key_listEntry = "Web Content Title",
				locator1 = "LexiconList#LIST_ENTRY_TITLE",
				value1 = "Web Content Title");

			AssertTextEquals(
				locator1 = "//div[contains(@class,'fragment_wc')]",
				value1 = "Web Content Title Web Content Description Web Content Content");
		}
	}

	@description = "This is a use case for LPS-116989. Can resize the item configuration panel."
	@priority = "4"
	test ResizeConfigurationPanelAndCheckRestore {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		PageEditor.resizeConfigurationPanel(
			fragmentName = "Button",
			position = "0,-100");

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		PageEditor.gotoTab(tabName = "Selection");

		AssertElementPresent(locator1 = "PageEditor#CONFIGURATION_PANEL_HANDLE");

		AssertElementNotPresent(locator1 = "PageEditor#CONFIGURATION_PANEL_RESIZE");
	}

	@description = "This is a test for LPS-100121. Given a fragment with an editable image when the page author selects an image specifying a URL in the item selector then the URL is shown in selector input."
	@priority = "4"
	test ViewImageFromURLInImageFragment {
		task ("Add an Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Select an image from URL") {
			PageEditor.editFragmentImage(
				fragmentName = "Image",
				id = "image-square",
				imageSourceURL = "https://raw.githubusercontent.com/liferay/liferay-portal/master/portal-web/test/functional/com/liferay/portalweb/dependencies/Document_1.jpg");
		}

		task ("Assert the selected image is shown in Image fragment") {
			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "Document_1.jpg");
		}

		task ("Assert the URL is shown in selector input") {
			AssertVisible(
				key_contentName = "https://raw.githubusercontent.com/liferay/liferay-portal/master/portal-web/test/functional/com/liferay/portalweb/dependencies/Document_1.jpg",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT");

			PageEditor.clickPublish();
		}

		task ("View the selected image in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "Document_1.jpg");
		}
	}

	@description = "This is a test for LPS-121223. View nested content when increase number of tabs."
	@priority = "4"
	test ViewNestedContentWhenIncreaseNumberOfTabs {
		task ("Add a Tabs fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Tabs");
		}

		task ("Edit text in editable field of nav buttons") {
			for (var n : list "1,2,3,4") {
				PageEditor.editFragmentText(
					fragmentName = "Tabs",
					id = "title${n}",
					text = "My Tab ${n}");
			}
		}

		task ("Add fragments to drop zone of each tab") {
			var n = "1";

			for (var fragmentName : list "Button,Card,Heading,HTML") {
				var index = ${n} + 1;

				PageEditor.addElementToTab(
					collectionName = "Basic Components",
					fragmentName = "${fragmentName}",
					index = "${index}",
					navItem = "My Tab ${n}",
					navTab = "Fragments",
					position = "1");

				var n = ${n} + 1;
			}
		}

		task ("Increase number of tabs") {
			PageEditor.gotoConfiguration(fragmentName = "Tabs");

			PageEditor.configureFragment(numberOfTabs = "6");
		}

		task ("View nested content in drop zone of each tab") {
			var n = "1";

			for (var fragmentName : list "Button,Card,Heading,HTML") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "My Tab ${n}");

				AssertElementPresent(
					key_fragmentName = "${fragmentName}",
					key_inFragmentName = "Tabs",
					locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");

				var n = ${n} + 1;
			}

			var position = "1";

			for (var n : list "5,6") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "Tab ${n}");

				AssertVisible(
					key_content = "Place fragments here.",
					key_fragmentClass = "content",
					key_position = "${position}",
					locator1 = "Fragment#PAGE_EDITOR_NO_FRAGMENTS_MESSAGE");

				var position = ${position} + 1;
			}
		}
	}

}