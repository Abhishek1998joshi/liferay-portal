@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-101330. A user should be able to add a video fragment and the video should play."
	@priority = "5"
	test AddContentPageWithVideoFragment {
		property portal.acceptance = "false";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Video");

		PageEditor.gotoConfiguration(fragmentName = "Video");

		PageEditor.addVideoFragmentURL(videoLink = "https://www.youtube.com/watch?v=2EPZxIC5ogU");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		YoutubePortlet.assertVideoTitle(videoTitle = "Life at Liferay - A Look into Liferay Culture");
	}

	@description = "This case ensures that a user can map a blogs content field to a fragment via the content display."
	@priority = "5"
	test MapBlogContentViaContentDisplay {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

		Blogs.addEntry(
			entryContent = "This content maps from blog content",
			entryTitle = "Blogs Entry Title");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Page Name");

		PageEditor.addContentDisplay(fragmentName = "Content");

		PageEditor.editContentDisplay(
			blogs = "true",
			entryContent = "This content maps from blog content",
			entryTitle = "Blogs Entry Title");

		Button.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertTextEquals(
			locator1 = "PageEditor#CONTENT_PAGE_TEXT_CONTENT",
			value1 = "This content maps from blog content");
	}

	@description = "This case ensures that a user can map an image to a fragment via the content display."
	@priority = "5"
	test MapImageViaContentDisplay {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg");

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Page Name");

		PageEditor.addContentDisplay(fragmentName = "Content");

		PageEditor.editContentDisplay(
			documentandmedia = "true",
			imageFileName = "Document_1.jpg");

		Button.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertVisible(
			key_imageFileName = "Document_1.jpg",
			locator1 = "PageEditor#CONTENT_PAGE_IMAGE_CONTENT");
	}

	@description = "This case ensures that a user can map the content field from web content to a fragment via the content display."
	@priority = "5"
	test MapWebContentContentViaContentDisplay {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "This content maps from web content",
			webContentTitle = "Webcontent Title");

		PortletEntry.publish();

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Page Name");

		PageEditor.addContentDisplay(fragmentName = "Content");

		PageEditor.editContentDisplay(
			webcontent = "true",
			webContentContent = "This content maps from web content",
			webContentTitle = "Webcontent Title");

		Button.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertTextEquals.assertPartialTextAceEditor(
			locator1 = "PageEditor#CONTENT_PAGE_TEXT_CONTENT",
			value1 = "This content maps from web content");
	}

	@description = "This is a test for LPS-101248. Can select any custom web content template as a "Template" for web content selected in content fragment."
	@priority = "5"
	test SelectCustomWebContentTemplateViaContentDisplay {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "This content maps from web content",
			webContentTitle = "Webcontent Title");

		PortletEntry.publish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			generalVariables = "Site ID",
			structureName = "Basic Web Content",
			templateDescription = "WC Template Description",
			templateName = "WC Template Name");

		var siteID = Site.getSiteId();

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(pageName = "Test Page Name");

		PageEditor.addContentDisplay(fragmentName = "Content");

		PageEditor.editContentDisplay(
			customWebcontenttemplate = "WC Template Name",
			webcontent = "true",
			webContentContent = "${siteID}",
			webContentTitle = "Webcontent Title");

		Button.clickPublish();

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Test Site Name");

		AssertTextEquals.assertPartialTextAceEditor(
			locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
			value1 = "${siteID}");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
			value1 = "This content maps from web content");
	}

}