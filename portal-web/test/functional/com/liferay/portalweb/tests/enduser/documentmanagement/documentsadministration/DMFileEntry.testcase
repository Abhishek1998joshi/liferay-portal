@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Document Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This test asserts that a major version can be created for a file."
	@priority = "4"
	@refactordone
	test CanAddMajorVersionIncrement {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit",
			revision = "Major",
			versioning = "true");

		DMDocument.viewEditCP(
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "2.0");
	}

	@description = "This test asserts that a major version can be created for a file."
	@priority = "4"
	@refactordone
	test CanAddMinorVersionIncrement {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_2.doc",
			dmDocumentTitle = "DM Document Title",
			revision = "Minor",
			versioning = "true");

		DMDocument.viewEditCP(
			dmDocumentTitleEdit = "DM Document Title",
			dmDocumentVersionNumber = "1.1");
	}

	@description = "This test covers LPS-124959. It ensures that a user can upload documents with a document type via multiple upload."
	@priority = "4"
	@refactordone
	test CanAddWithDocumentTypeViaMultipleUpload {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Date",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(
			dateValue = "01/01/2022",
			dmDocumentFileList = "Document_1.doc,Document_2.jpg",
			documentType = "DM Document Type Name");

		for (var dmDocumentTitle : list "Document_1,Document_2") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

			DMDocument.viewDocumentTypePG(dateValue = "01/01/2022");
		}
	}

	@description = "This test ensures that the document type of a published basic document can be changed."
	@priority = "4"
	@refactordone
	test CanChangeDocumentType {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMDocument.viewCP(
			dmDocumentTitle = "Document_1.txt",
			dmDocumentType = "Basic Document");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Document_1.txt",
			dmDocumentTypeEdit = "DM Document Type Name");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			dmDocumentTitle = "Document_1.txt",
			dmDocumentType = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Document_1.txt");

		DMDocument.viewFieldLabels(labels = "Text");
	}

	@description = "This test covers LPS-101908. It makes sure that all elements selected on different pages can be checked out and checked in."
	@priority = "3"
	@refactordone
	test CanCheckInAllDocumentsOnDifferentPagesAtOnce {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_2.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_3.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "Document_1.txt",
			dmDocumentTitle = "Document_1.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "Document_2.txt",
			dmDocumentTitle = "Document_2.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_2.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Pagination.changePagination(itemsPerPage = "4");

		PortletEntry.selectAll();

		Click(locator1 = "Pagination#NEXT_LINK");

		PortletEntry.selectAll();

		Click(
			key_text = "ellipsis",
			locator1 = "ManagementBar#ANY_ICON");

		MenuItem.click(menuItem = "Checkout");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		for (var dmDocumentFileList : list "Document_1.doc,Document_2.doc,Document_3.doc,Document_1.txt,Document_2.txt") {
			AssertElementPresent(
				key_dmDocumentTitle = "${dmDocumentFileList}",
				locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");
		}

		Pagination.changePagination(itemsPerPage = "4");

		PortletEntry.selectAll();

		Click(locator1 = "Pagination#NEXT_LINK");

		DMDocument.checkinManagementBar(allFiles = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		for (var dmDocumentFileList : list "Document_1.doc,Document_2.doc,Document_3.doc,Document_1.txt,Document_2.txt") {
			AssertElementNotPresent(
				key_dmDocumentTitle = "${dmDocumentFileList}",
				locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");
		}
	}

	@description = "This test covers LPS-88313 and LPS-92145. It ensures that a user can check in a document without changing versions."
	@priority = "5"
	@refactordone
	test CanCheckInAsCurrentVersion {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as current version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.editCP(
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Check in as current version",
			revision = "Current",
			versioning = "true",
			versionNotes = '''<!DOCTYPE html> <html class="ltr" dir="ltr" lang="en-US"> <head> <title>''');

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as current version");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in as current version",
			revision = "Current");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as current version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as current version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.0");
	}

	@description = "This test ensures that a user can check in a document as a major version."
	@priority = "5"
	@refactordone
	test CanCheckInAsMajorVersion {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as major version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as major version");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in as major version",
			revision = "Major");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as major version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as major version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "2.0");
	}

	@description = "This test ensures that a user can check in a document as a minor version."
	@priority = "5"
	@refactordone
	test CanCheckInAsMinorVersion {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as minor version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as minor version");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in as minor version",
			revision = "Minor");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as minor version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as minor version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.1");
	}

	@description = "This test covers LPS-82306. It ensures that a user can check in a document through the Management toolbar."
	@priority = "4"
	@refactordone
	test CanCheckInViaManagementBar {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as current version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as current version");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.checkinManagementBar(
			dmDocumentTitle = "Check in as current version",
			revision = "Current");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as current version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as current version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.0");
	}

	@description = "This test covers LPS-90736. It makes sure that all files are deleted when user selects all."
	@priority = "4"
	@refactordone
	test CanDeleteAllDocumentsAtOnce {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_2.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_3.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		PortletEntry.selectAll();

		AssertClick(
			locator1 = "Button#SELECT_ALL",
			value1 = "Select All");

		Click(locator1 = "Icon#DELETE");

		Alert.viewSuccessMessage();

		DMDocument.viewDefault();
	}

	@description = "This case covers LPS-110213. It ensures that a document file can be downloaded after moving it between folders."
	@priority = "5"
	@refactordone
	test CanDownloadDocumentMovedBetweenFolders {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		JSONDocument.addFolder(
			dmFolderDescription = "DM Folder 1 Description",
			dmFolderName = "DM Folder 1 Name",
			groupName = "Guest");

		JSONDocument.addFolder(
			dmFolderDescription = "DM Folder 2 Description",
			dmFolderName = "DM Folder 2 Name",
			groupName = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder 1 Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 1 Name");

		DMDocument.moveToFolderCP(
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder 2 Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 2 Name");

		DMDocument.downloadCP(dmDocumentTitle = "DM Document Title");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");
	}

	@description = "This ensures that multiple documents can be downloaded simultaneously."
	@priority = "5"
	@refactordone
	test CanDownloadMultipleFilesSimultaneously {
		JSONGroup.addGroup(groupName = "Site_1");

		for (var entryCount : list "1,2") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document_${entryCount}.jpg",
				groupName = "Site_1",
				mimeType = "image/jpeg",
				sourceFileName = "Document_${entryCount}.jpg");
		}

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site_1");

		DMDocument.downloadMultipleCP(dmDocumentTitleList = "Document_1.jpg,Document_2.jpg");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Site_1.zip");
	}

	@description = "This ensures that the document file can be downloaded through the document file name."
	@priority = "5"
	@refactordone
	test CanDownloadThroughURLWithFileName {
		var portalURL = PropsUtil.get("portal.url");
		var siteID = JSONGroupAPI._getGroupIdByName(groupName = "Guest", site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.mp4",
			groupName = "Guest",
			mimeType = "video/mp4",
			sourceFileName = "Document_1.mp4");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_1.mp4");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_1.mp4");
	}

	@description = "This ensures that the document file can be downloaded through the document title."
	@priority = "5"
	@refactordone
	test CanDownloadThroughURLWithTitle {
		var portalURL = PropsUtil.get("portal.url");
		var siteID = JSONGroupAPI._getGroupIdByName(groupName = "Guest", site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.mp4",
			groupName = "Guest",
			mimeType = "video/mp4",
			sourceFileName = "Document_1.mp4");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_1");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_1.mp4");
	}

	@description = "This ensures that the document file can be downloaded using the updated document file name."
	@priority = "5"
	@refactordone
	test CanDownloadThroughURLWithUpdatedFileName {
		var portalURL = PropsUtil.get("portal.url");
		var siteID = JSONGroupAPI._getGroupIdByName(groupName = "Guest", site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_3.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileName = "Document_3.doc",
			dmDocumentFileNameEdit = "Document_3Edit.doc",
			dmDocumentTitle = "Document_3");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_3Edit.doc");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_3Edit.doc");
	}

	@description = "This ensures that the document file can be downloaded through the document title."
	@priority = "5"
	@refactordone
	test CanDownloadThroughURLWithUpdatedTitle {
		var portalURL = PropsUtil.get("portal.url");
		var siteID = JSONGroupAPI._getGroupIdByName(groupName = "Guest", site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_3.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Document_3",
			dmDocumentTitleEdit = "Document_3Edit");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_3Edit");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "Document_3.doc");
	}

	@description = "This ensures that the document file name will be applied to the downloaded file name."
	@priority = "5"
	@refactordone
	test CanDownloadWithCustomFileName {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentFileName = "document_1_Edit.jpg",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.downloadCP(dmDocumentTitle = "DM Document Title");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(downloadedFileName = "document_1_Edit.jpg");
	}

	@description = "This test edits the title and description of a document. It asserts minor version increment because only its metadata was updated."
	@priority = "5"
	@refactordone
	@uitest
	test CanEditDocument {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(
			dmDocumentFileName = "Document_1.txt",
			dmDocumentSize = "259 B",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileName = "Document_1.txt",
			dmDocumentFileNameEdit = "Document_1_Edit.txt",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		DMDocument.viewEditCP(
			dmDocumentFileName = "Document_1_Edit.txt",
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "1.1");
	}

	@description = "This is a test for LPS-136825. It checks that a file entry can be imported with tags."
	@ignore = "true"
	@priority = "3"
	test CanImportWithTags {
		property portal.acceptance = "false";

		// TODO LPS-136825 CanImportWithTags pending implementation

	}

	@description = "This is a test for LPS-91751. It ensures that a user cannot preview a file with size that exceeds the preview limit."
	@priority = "4"
	@refactordone
	test CannotPreviewFileThatExceedsLimit {
		property test.name.skip.portal.instance = "DMFileEntry#CannotPreviewFileThatExceedsLimit";

		DMNavigator.openToConfigInSystemSettings(portlet = "File Entries");

		Type(
			key_fieldLabel = "Previewable Processor Maximum Size",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1024");

		SystemSettings.saveConfiguration();

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "high_resolution_photo.jpg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertVisible(
			key_title = "File too big to preview",
			locator1 = "Header#H3_TITLE");
	}

	@description = "This test ensures that a user cannot set a previous expiration date."
	@priority = "3"
	test CannotPublishInvalidExpirationDate {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";

		DMNavigator.openToAddEntry(
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.editDocument(
			dmDocumentFile = "Document_5.txt",
			dmDocumentTitle = "Document_5.txt");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			invalidExpirationDate = "true");
	}

	@description = "This test ensures that the guest cannot see an expired document."
	@priority = "4"
	test CannotViewExpiredDocumentAsGuest {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CannotViewExpiredDocumentAsGuest";

		var portalURL = PropsUtil.get("portal.url");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		DMDocument.updateCheckInterval(fieldValue = "2");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_3.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_3.txt");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_3.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			increaseMinutes = "2");

		Pause(locator1 = "120000");

		Navigator.openURL();

		Notifications.viewBadgeCount(notificationCount = "1");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.viewStatus(
			dmDocumentStatus = "Expired",
			dmDocumentTitle = "Document_3.txt");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/documents-and-media-page");

		DMDocument.viewDefault();
	}

	@description = "This ensures that the empty state displays when the preview file doesn't have anything previewable."
	@priority = "4"
	@refactordone
	test CanPreviewEmptyState {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			siteURLKey = "guest");

		for (var emptyStateInfo : list "No preview available,Hmm... looks like this item doesn't have a preview we can show you.") {
			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_EMPTY_STATE_PREVIEW",
				value1 = "${emptyStateInfo}");
		}
	}

	@description = "This ensures that an image can be previewed through the original URL."
	@priority = "5"
	@refactordone
	test CanPreviewImageThroughURL {
		var portalURL = PropsUtil.get("portal.url");
		var siteID = JSONGroupAPI._getGroupIdByName(groupName = "Guest", site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteID}/0/Document_1");

		var key_imageSourceURL = "${portalURL}/documents/${siteID}/0/Document_1";

		AssertElementPresent.pauseAssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");
	}

	@description = "This test covers LPS-104957. It ensures that the JPG file can be previewed."
	@priority = "5"
	@refactordone
	test CanPreviewJPG {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.jpg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.expandInfo();

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
	}

	@description = "This is a use case for LPS-88785."
	@priority = "5"
	@refactordone
	test CanPreviewPDF {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "large_file.pdf",
			groupName = "Guest",
			mimeType = "application/pdf",
			sourceFileName = "large_file.pdf");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "large_file.pdf",
			groupName = "Guest",
			siteURLKey = "guest");

		while (IsElementPresent(key_infoMessage = "Generating preview will take a few minutes.", locator1 = "Message#INFO")) {
			Pause(locator1 = "10000");

			Refresh();
		}

		AssertVisible(
			key_dmDocumentFileName = "large_file.pdf",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");
	}

	@description = "This test covers LPS-104957. It ensures that the PNG file can be previewed."
	@priority = "5"
	@refactordone
	test CanPreviewPNG {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.png",
			groupName = "Guest",
			mimeType = "image/png",
			sourceFileName = "Document_1.png");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.png",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.png",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.expandInfo();

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
	}

	@description = "This ensures that the SVG file can be previewed."
	@priority = "5"
	@refactordone
	test CanPreviewSVG {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.svg",
			groupName = "Guest",
			mimeType = "image/svg+xml",
			sourceFileName = "Document_1.svg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.svg",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.svg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.expandInfo();

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
	}

	@description = "This test ensures that the user can republish an expired document after disabling expiration date."
	@priority = "4"
	test CanRepublishDocumentAfterDisablingExpirationDate {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanRepublishDocumentAfterDisablingExpirationDate";

		DMDocument.updateCheckInterval(fieldValue = "2");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_5.txt");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			increaseMinutes = "2");

		Pause(locator1 = "120000");

		Navigator.openURL();

		Notifications.gotoNotifications();

		Notifications.navigateToContent(contentBody = "Document_5.txt");

		DMDocument.publishExpiredDocument(
			disableExpirationDate = "true",
			dmDocumentTitle = "Document_5.txt");

		DMDocument.viewStatus(
			dmDocumentStatus = "Approved",
			dmDocumentTitle = "Document_5.txt");
	}

	@description = "This test ensures that the user can review a document when the date is changed."
	@priority = "4"
	test CanReviewDocumentWhenDateIsChanged {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanReviewDocumentWhenDateIsChanged";

		DMDocument.updateCheckInterval(fieldValue = "2");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			increaseMinutes = "10",
			mimeType = "text/plain",
			reviewDate = "true",
			sourceFileName = "Document_5.txt");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.setReviewDate(increaseMinutes = "2");

		Navigator.openURL();

		Notifications.viewBadgeCount(notificationCount = "0");

		Pause(locator1 = "120000");

		Navigator.openURL();

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewReviewContent(
			contentBody = "Document_5.txt",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "Document_5.txt");

		DMDocument.reviewDocument(dmDocumentTitle = "Document_5.txt");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			dmDocumentTitle = "Document_5.txt",
			reviewDate = "true",
			user = "Test Test");
	}

	@description = "This test ensures that the user can review a document when the date is disabled."
	@priority = "4"
	test CanReviewDocumentWhenDateIsDisabled {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanReviewDocumentWhenDateIsDisabled";

		DMDocument.updateCheckInterval(fieldValue = "2");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_5.txt");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.setReviewDate(
			enableReviewDate = "true",
			increaseMinutes = "2");

		Pause(locator1 = "120000");

		Navigator.openURL();

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewReviewContent(
			contentBody = "Document_5.txt",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "Document_5.txt");

		DMDocument.reviewDocument(
			disableReviewDate = "true",
			dmDocumentTitle = "Document_5.txt");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			disabledReviewDate = "true",
			dmDocumentTitle = "Document_5.txt",
			reviewDate = "true");
	}

	@description = "This test ensures that the user can review a document when the date is set."
	@priority = "5"
	test CanReviewDocumentWhenDateIsSet {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanReviewDocumentWhenDateIsSet";

		DMDocument.updateCheckInterval(fieldValue = "1");

		DMNavigator.openToAddEntry(
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.editDocument(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.txt",
			dmDocumentTitle = "Document_2.txt");

		DMDocument.setReviewDate(
			enableReviewDate = "true",
			increaseMinutes = "2");

		Pause(locator1 = "120000");

		Navigator.openURL();

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewReviewContent(
			contentBody = "Document_2.txt",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "Document_2.txt");

		DMDocument.reviewDocument(dmDocumentTitle = "Document_2.txt");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_2.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			dmDocumentTitle = "Document_2.txt",
			reviewDate = "true",
			user = "Test Test");
	}

	@description = "This test covers LPS-130154. It ensures that the user can search for a document based on the content."
	@priority = "4"
	@refactordone
	test CanSearchForDocumentBasedOnContent {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_5.txt");

		AssertConsoleTextNotPresent(value1 = "WriteLimitReachedException");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Search.searchCP(searchTerm = "gJybWNXR76fTX0TlIu8mFP2dNVtTGdq");

		DMDocument.viewSearchResultsCP(dmDocumentTitle = "Document_5.txt");
	}

	@description = "This ensures that the user can search for document file name using partial text."
	@priority = "5"
	@refactordone
	test CanSearchForDocumentWithPartialText {
		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Search.searchCP(searchTerm = "DM");

		DMDocument.viewSearchResultsCP(dmDocumentTitle = "DM Document Title");
	}

	@description = "This test ensures that the user can view an expired document."
	@priority = "5"
	test CanViewExpiredDocument {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanViewExpiredDocument";

		DMDocument.updateCheckInterval(fieldValue = "2");

		DMNavigator.openToAddEntry(
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.editDocument(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Document_1.txt");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			increaseMinutes = "2");

		Pause(locator1 = "120000");

		Navigator.openURL();

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewExpiredContent(
			contentBody = "Document_1.txt",
			user = "Test Test");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.viewStatus(
			dmDocumentStatus = "Expired",
			dmDocumentTitle = "Document_1.txt");
	}

	@description = "This test ensures that a user who has content review permissions can see an expired document."
	@priority = "4"
	test CanViewExpiredDocumentAsContentReviewer {
		property custom.properties = "company.default.time.zone=America/Los_Angeles${line.separator}jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "DMFileEntry#CanViewExpiredDocumentAsContentReviewer";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Portal Content Reviewer",
			userEmailAddress = "userea@liferay.com");

		DMDocument.updateCheckInterval(fieldValue = "1");

		DMNavigator.openToAddEntry(
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.editDocument(
			dmDocumentFile = "Document_5.txt",
			dmDocumentTitle = "Document_5.txt");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			increaseMinutes = "2");

		Pause(locator1 = "120000");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewStatus(
			dmDocumentStatus = "Expired",
			dmDocumentTitle = "Document_5.txt");
	}

	@description = "This ensures that the document title can be displayed correctly in the different views."
	@priority = "5"
	@refactordone
	test CanViewInDifferentDisplayStyles {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_2",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "cards");

		LexiconCard.viewCardTitle(card = "Document_2");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		LexiconTable.viewTableEntryTitle(tableEntry = "Document_2");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		LexiconList.viewListEntryTitleLink(listEntry = "Document_2");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_2");

		DMDocument.viewCP(
			dmDocumentFileName = "Document_2.doc",
			dmDocumentTitle = "Document_2");
	}

}