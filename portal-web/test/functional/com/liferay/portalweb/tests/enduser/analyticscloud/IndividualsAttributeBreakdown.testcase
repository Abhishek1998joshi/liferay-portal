@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONUser.tearDownNonAdminUsers();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8657 | Test Summary: Add a new breakdown by an attribute and assert that correct results appear"
	@priority = "5"
	test AddNewBreakdownByAttributeAndAssertCorrectResultsAppear {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a CSV Data Source") {
			ACSettings.addCSVDataSource(
				dataSourceName = "CSV Country",
				sourceFileName = "contacts_country.csv");
		}

		task ("Exit Settings") {
			ACNavigation.exitSettings();
		}

		task ("Navigate to the Individuals dashboard") {
			ACNavigation.goToIndividuals();
		}

		task ("Add a new breakdown") {
			ACIndividualsDashboard.addBreakdown(
				attribute = "country",
				breakdownName = "Breakdown by Country");
		}

		task ("View the data in new breakdown") {
			ACIndividualsDashboard.clickBreakdownTab(breakdownName = "Breakdown by Country");

			ACIndividualsDashboard.viewBreakdownRecharts(
				fillColor = "#4B9BFF",
				tick = "china");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8658 | Test Summary: Delete a new breakdown"
	@priority = "5"
	test DeleteNewBreakdown {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a CSV Data Source") {
			ACSettings.addCSVDataSource(
				dataSourceName = "CSV Country",
				sourceFileName = "contacts_country.csv");
		}

		task ("Exit Settings") {
			ACNavigation.exitSettings();
		}

		task ("Navigate to the Individuals dashboard") {
			ACNavigation.goToIndividuals();
		}

		task ("Add a new breakdown") {
			ACIndividualsDashboard.addBreakdown(
				attribute = "country",
				breakdownName = "Breakdown by Country");
		}

		task ("Remove the new breakdown") {
			ACIndividualsDashboard.deleteBreakdown(breakdownName = "Breakdown by Country");
		}

		task ("View the breakdown is deleted") {
			ACIndividualsDashboard.viewBreakdownNotPresent(breakdownName = "Breakdown by Country");
		}
	}

}