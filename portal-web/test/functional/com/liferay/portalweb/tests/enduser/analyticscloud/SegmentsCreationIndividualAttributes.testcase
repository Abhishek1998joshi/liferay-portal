@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("View the page as the new added user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			Navigator.openSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Lauch DXP") {
			ACUtils.launchDXP();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8571 | Test Summary: Custom field does not appear in AC after it has been removed in DXP"
	@ignore = "true"
	@priority = "4"
	test AssertCustomFieldsNotAppearInACFilterWhenRemovedFromDXP {

		// TODO LRAC-8571 AssertCustomFieldsNotAppearInACFilterWhenRemovedFromDXP pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8565 | Test Summary: Add segment using an individual property 'role'"
	@ignore = "true"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertyRole {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Add a new regular role and assign to the user") {
			JSONRole.addRegularRole(
				roleKey = "AC Seg Reg Role",
				roleTitle = "AC Seg Reg Role");

			JSONRole.assignRoleToUser(
				roleTitle = "AC Seg Reg Role",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment using Individual Property Role") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Using Individual Property Role");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "Role");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectDocument(
				documentTitle = "AC Seg Reg Role",
				indexField = "1");
		}

		task ("View the user showns on the Preview mode") {
			Click(locator1 = "Icon#EYE_PREVIEW");

			ACAssets.viewAssets(assetName = "ac ac");

			Click.mouseDownMouseUp(locator1 = "Modal#CLOSE_BUTTON");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8564 | Test Summary: Add segment using an individual property 'site'"
	@ignore = "true"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertySite {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Assign the user to site") {
			JSONGroup.assignUserToGroup(
				groupName = "Site Name",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment using Individual Property Site") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Using Individual Property Site");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "Site Membership");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectDocument(
				documentTitle = "Site Name",
				indexField = "1");
		}

		task ("View the user showns on the Preview mode") {
			Click(locator1 = "Icon#EYE_PREVIEW");

			ACAssets.viewAssets(assetName = "ac ac");

			Click.mouseDownMouseUp(locator1 = "Modal#CLOSE_BUTTON");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8566 | Test Summary: Add segment using an individual property 'team'"
	@ignore = "true"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertyTeam {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Assign the site to user") {
			JSONGroup.assignUserToGroup(
				groupName = "Site Name",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Assign the user to Team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");

			Team.assignMembersCP(
				teamName = "Site Team Name",
				userScreenName = "ac");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment using Individual Property Team") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Using Individual Property Team");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "Team");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectDocument(
				documentTitle = "Site Team Name",
				indexField = "1");
		}

		task ("View the user showns on the Preview mode") {
			Click(locator1 = "Icon#EYE_PREVIEW");

			ACAssets.viewAssets(assetName = "ac ac");

			Click.mouseDownMouseUp(locator1 = "Modal#CLOSE_BUTTON");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8568 | Test Summary: Add segment using an individual property 'user'"
	@ignore = "true"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertyUser {

		// TODO LRAC-8568 CanAddSegmentUsingIndividualPropertyUser pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8567 | Test Summary: Add segment using an individual property 'user group'"
	@ignore = "true"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertyUserGroup {
		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.getAssignedPropertyName(siteName = "Site Name");
		}

		task ("Add a new user group and assign to the user") {
			JSONUserGroup.addUserGroup(
				userGroupDescription = "UG UserGroup Description",
				userGroupName = "UG UserGroup Name");

			UserGroup.openUserGroupsAdmin();

			UserGroup.assignMemberCP(
				userGroupName = "UG UserGroup Name",
				userScreenName = "ac");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment using Individual Property User Group") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACSegments.nameSegment(segmentName = "Dynamic Segment Using Individual Property User Group");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "User Group");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectDocument(
				documentTitle = "UG UserGroup Name",
				indexField = "1");
		}

		task ("View the user showns on the Preview mode") {
			Click(locator1 = "Icon#EYE_PREVIEW");

			ACAssets.viewAssets(assetName = "ac ac");

			Click.mouseDownMouseUp(locator1 = "Modal#CLOSE_BUTTON");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8569 | Test Summary: Add segment with custom field for individuals"
	@ignore = "true"
	@priority = "4"
	test CanAddSegmentWithCustomFieldsForIndividuals {

		// TODO LRAC-8569 CanAddSegmentWithCustomFieldsForIndividuals pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8570 | Test Summary: Add segment with custom fields for organizations"
	@ignore = "true"
	@priority = "4"
	test CanAddSegmentWithCustomFieldsForOrganizations {

		// TODO LRAC-8570 CanAddSegmentWithCustomFieldsForOrganizations pending implementation

	}

}