@component-name = "portal-headless-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless Frontend Infrastructure";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given an asset library is created") {
			JSONDepot.addDepot(depotName = "Test Depot Name");
		}

		task ("Given a content structure created in asset library") {
			var depotId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			WebContentNavigator.openWebContentStructuresAdminInAssetLibrary(depotId = "${depotId}");

			WebContentStructures.addCP(structureName = "content-structure");

			FormViewBuilder.addFieldByDoubleClick(fieldType = "Text");

			FormFields.editFieldReference(key_fieldReference = "Text");

			Button.clickSave();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");
		}
	}

	@description = "Structured Content is created in an asset library with custom erc"
	@priority = "5"
	test StructuredContentIsCreatedInAssetLibraryWithCustomErc {
		property portal.acceptance = "true";

		task ("When with POST request I create a structured Content with a custom erc in asset library") {
			var depotId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");
			var ddmStructureId = WebContentStructures.getDdmStructureId(structureName = "content-structure");

			var response = HeadlessWebcontentAPI.createStructuredContentInAssetLibrary(
				assetLibraryId = "${depotId}",
				data = "<p>My content</p>",
				ddmStructureId = "${ddmStructureId}",
				externalReferenceCode = "erc",
				label = "Text",
				name = "Text",
				title = "WC WebContent Title");
		}

		task ("Then structured Content is being createdAnd Then I can see the custom erc in the body response") {
			HeadlessWebcontentAPI.assertExternalReferenceCodeWithCorrectValue(
				expectedactualExternalReferenceCodeValueValue = "erc",
				responseToParse = "${response}");
		}
	}

}