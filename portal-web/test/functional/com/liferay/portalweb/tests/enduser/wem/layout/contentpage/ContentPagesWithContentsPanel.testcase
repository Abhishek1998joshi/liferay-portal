@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-122204. The Page Creater can access to edit the document via Page Content panel."
	@priority = "5"
	test EditDisplayedDocument {
		task ("Add an Image fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Directly select an image in editable field") {
			PageEditor.editFragmentImage(
				fileName = "Document_1.jpg",
				fragmentName = "Image",
				id = "image-square");
		}

		task ("View the selected image is shown in Image fragment") {
			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "Document_1.jpg");
		}

		task ("Access to the document editor via Page Content panel") {
			PageEditor.gotoEllipsisMenuItemInPageContentPanel(
				itemName = "Document_1.jpg",
				menuItem = "Edit");
		}

		task ("Edit the document title") {
			DMDocument.editCmd(dmDocumentTitleEdit = "Document Title");

			PortletEntry.publish();
		}

		task ("View the edited title is shown in Page Content panel") {
			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");

			AssertVisible(
				key_itemName = "Document Title",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");
		}
	}

	@description = "This is a test for LPS-97189. A user can edit displayed content in an Asset Publisher widget through Contents panel."
	@priority = "4"
	test EditDisplayedWebContentInAssetPublisher {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add an Asset Publisher") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("Select the web content as manual selection in Asset Publisher") {
			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title",
				assetType = "Basic Web Content");
		}

		task ("Edit the displayed web content via Contents panel") {
			Refresh();

			WebContent.editViaContentPanel(
				webContentContentEdit = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title",
				webContentTitleEdit = "WC WebContent Title Edit");
		}

		task ("View the edited web content shown in Asset Publisher") {
			AssertTextEquals(
				key_assetTitle = "WC WebContent Title Edit",
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "WC WebContent Title Edit");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "WC WebContent Title Edit",
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "WC WebContent Content Edit");

			PageEditor.clickPublish();
		}

		task ("View the edited web content in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContent.viewPGViaAP(
				webContentContent = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title Edit");
		}
	}

	@description = "This is a test for LPS-97189. A user can edit displayed content in a Web Content Display widget through Contents panel."
	@priority = "5"
	test EditDisplayedWebContentInWebContentDisplay {
		property portal.acceptance = "true";

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add a Web Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Web Content Display");
		}

		task ("Select the web content in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");
		}

		task ("Edit the displayed web content via Contents panel") {
			Refresh();

			WebContent.editViaContentPanel(
				webContentContentEdit = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title",
				webContentTitleEdit = "WC WebContent Title Edit");
		}

		task ("View the edited web content in Web Content Display") {
			AssertTextEquals(
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "WC WebContent Content Edit");

			PageEditor.clickPublish();
		}

		task ("View the edited web content in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContent.viewPGViaWCD(webContentContent = "WC WebContent Content Edit");
		}
	}

	@description = "This is a test for LPS-122204. The Page Creater can access to edit the inline text via Page Content panel."
	@priority = "5"
	test EditInlineText {
		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Access to the inline text editor of Heading via Page Content panel") {
			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");

			PageEditor.editFragmentTextViaPageContentPanel(
				itemName = "Heading Example",
				text = "Edited Text");
		}

		task ("View the edited inline text shown in Heading") {
			PageEditor.viewFragmentEditableText(
				editableText = "Edited Text",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("View the edited inline text of Heading shown in Page Content panel") {
			AssertVisible(
				key_itemName = "Edited Text",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");
		}

		task ("Add a Paragraph fragment below the Heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("Access to the inline text editor of Paragraph via Page Content panel") {
			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");

			PageEditor.editFragmentTextViaPageContentPanel(
				itemName = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.",
				text = "Edited Rich Text");
		}

		task ("View the edited inline text shown in Paragraph") {
			PageEditor.viewFragmentEditableText(
				editableText = "Edited Rich Text",
				fragmentName = "Paragraph",
				id = "element-text");
		}

		task ("View the edited inline text of Paragraph shown in Page Content panel") {
			AssertVisible(
				key_itemName = "Edited Rich Text",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");
		}
	}

	@description = "This is a test for LPS-96794. View permissions and usage of mapped web content in Contents panel."
	@priority = "4"
	test ViewPermissionsAndUsageOfMappedWebContent {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WebContent Title");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Title of web content to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WebContent Title",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.clickPublish();
		}

		task ("View permissions of mapped web content in Contents panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");

			LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
				menuItem = "Permissions",
				rowEntry = "WebContent Title");

			IFrame.selectPermissionsFrame();

			Role.viewPermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				permissionFlagged = "true",
				roleTitle = "Owner");
		}

		task ("View usage of mapped web content in Contents panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");

			LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
				menuItem = "View Usages",
				rowEntry = "WebContent Title");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertElementPresent(
				locator1 = "AssetLists#ASSET_LIST_USAGES",
				usageAmount = "2",
				usageType = "Pages");
		}
	}

	@description = "This is a test for LPS-96794. The status of mapped web contents will appear in Contents panel."
	@priority = "4"
	test ViewStatusOfMappedWebContent {
		for (var count : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content ${count}",
				groupName = "Test Site Name",
				title = "WebContent Title ${count}");
		}

		task ("Add a Banner Center to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner");
		}

		task ("Map Title of the first web content to link editable field") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "WebContent Title 1",
				field = "Title",
				navItem = "Web Content");
		}

		task ("Map Title of the second web content to title editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WebContent Title 2",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");
		}

		task ("Map Title of the third web content to subtitle editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "WebContent Title 3",
				navItem = "Web Content");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.clickPublish();
		}

		task ("Edit the second web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WebContent Title 2");

			WebContent.editCP(
				saveAsDraft = "true",
				webContentContentEdit = "WC WebContent Content 2 Edit",
				webContentTitle = "WebContent Title 2",
				webContentTitleEdit = "WebContent Title 2 Edit");
		}

		task ("Expire the third web content") {
			JSONWebcontent.updateStatus(
				groupName = "Test Site Name",
				statusKey = "EXPIRE",
				title = "WebContent Title 3");
		}

		task ("View status of web contents in Contents panel") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");

			AssertTextEquals(
				key_listEntry = "WebContent Title 1",
				locator1 = "LexiconList#LIST_ENTRY_INFO",
				value1 = "Approved");

			AssertTextEquals(
				key_listEntry = "WebContent Title 2",
				locator1 = "LexiconList#LIST_ENTRY_STATUS",
				value1 = "draft");

			AssertTextEquals(
				key_listEntry = "WebContent Title 3",
				locator1 = "LexiconList#LIST_ENTRY_INFO",
				value1 = "expired");
		}
	}

}