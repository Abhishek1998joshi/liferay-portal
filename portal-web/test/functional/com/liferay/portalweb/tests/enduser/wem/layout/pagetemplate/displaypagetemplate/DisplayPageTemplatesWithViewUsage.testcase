@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-122082. The user can view the usage of display page template."
	@priority = "5"
	test ViewUsageOfDisplayPageTemplate {
		task ("Add a display page template based on Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Web Content Display Page",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Web Content Display Page");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Add a display page template based on Document and Basic Document") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Document Display Page",
				groupName = "Test Site Name",
				subType = "Basic Document");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Document Display Page");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Add a display page template based on Blogs Entry") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Blogs Entry Display Page",
				groupName = "Test Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Blogs Entry Display Page");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Add a web content based on Basic Web Content and select the related display page template") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editDisplayPage(
				pageName = "Web Content Display Page",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Add a document based on Basic Document and select the related display page template") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			LexiconCard.clickEllipsisItem(
				card = "Document Title",
				item = "Edit");

			WebContent.editDisplayPage(
				pageName = "Document Display Page",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("Add a blogs entry and select the related display page template") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

			WebContent.editDisplayPage(
				pageName = "Blogs Entry Display Page",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View usage of display page templates") {
			for (var assetType : list "Web Content,Document,Blogs Entry") {
				DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

				DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
					displayPageName = "${assetType} Display Page",
					item = "View Usages");

				AssertTextEquals(
					locator1 = "ControlMenu#HEADING",
					value1 = "${assetType} Display Page");

				ManagementBar.viewFilterAndOrder(menuItem = "Modified Date");

				AssertElementNotPresent(locator1 = "TextInput#SEARCH");

				AssertTextEquals(
					key_columnName = "title",
					key_tableEntry = "${assetType} Title",
					locator1 = "LexiconTable#TABLE_ENTRY_INFO",
					value1 = "${assetType} Title");

				AssertTextEquals(
					key_columnName = "author",
					key_tableEntry = "${assetType} Title",
					locator1 = "LexiconTable#TABLE_ENTRY_INFO",
					value1 = "Test Test");

				AssertTextEquals.assertPartialText(
					key_columnName = "modified-date",
					key_tableEntry = "${assetType} Title",
					locator1 = "LexiconTable#TABLE_ENTRY_INFO",
					value1 = "Ago");
			}
		}
	}

}