@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Document Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This test edits the title and description of a document. It asserts minor version increment because only its metadata was updated."
	@priority = "5"
	@refactorneeded
	test EditDocument {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(
			dmDocumentFileName = "Document_1.txt",
			dmDocumentSize = "259 B",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileName = "Document_1.txt",
			dmDocumentFileNameEdit = "Document_1_Edit.txt",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		DMDocument.viewEditCP(
			dmDocumentFileName = "Document_1_Edit.txt",
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "1.1");
	}

	@description = "This test covers LPS-101667. It makes sure that the file size can be displayed correctly in the different versions after editing the document file."
	@priority = "3"
	@refactorneeded
	test FileSizeCanBeDisplayedCorrectlyInDifferentVersions {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_1.txt",
			dmDocumentFileNameEdit = "Document_1.txt",
			dmDocumentTitle = "Document_2",
			dmDocumentTitleEdit = "Document_1");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1");

		DMDocument.viewFileSizeByVersion(
			dmDocumentSize = "30 KB",
			dmDocumentVersionNumber = "1.0");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewFileSizeByVersion(
			dmDocumentSize = "259 B",
			dmDocumentVersionNumber = "2.0");
	}

	@description = "This test covers LPS-94820. This test ensures that only the last two checked in versions of a file are kept when the max version limit is set."
	@priority = "4"
	@refactorneeded
	test LimitCheckInMaxFileVersion {
		property test.name.skip.portal.instance = "CPDocumentsandmedia#LimitCheckInMaxFileVersion";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Documents and Media",
			configurationName = "Service",
			configurationScope = "System Scope");

		Type(
			key_fieldLabel = "Maximum Number Of Versions",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "2");

		ScrollWebElementIntoView(locator1 = "Button#SAVE");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Check in this document three times",
			groupName = "Guest");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in this document three times");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in this document three times",
			revision = "Major");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in this document three times");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in this document three times",
			revision = "Major");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in this document three times");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in this document three times",
			revision = "Major");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Check in this document three times",
			groupName = "Guest",
			siteURLKey = "guest");

		for (var versionNumber : list "3.0,4.0") {
			AssertElementPresent(
				key_dmDocumentVersionNumber = "${versionNumber}",
				locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
		}

		for (var versionNumber : list "1.0,2.0") {
			AssertElementNotPresent(
				key_dmDocumentVersionNumber = "${versionNumber}",
				locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
		}
	}

	@description = "This test ensures that only the last two versions of a file are kept when the max version limit is set."
	@priority = "5"
	@refactorneeded
	test LimitMaxFileVersion {
		property test.name.skip.portal.instance = "CPDocumentsandmedia#LimitMaxFileVersion";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Documents and Media",
			configurationName = "Service",
			configurationScope = "System Scope");

		Type(
			key_fieldLabel = "Maximum Number Of Versions",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "2");

		ScrollWebElementIntoView(locator1 = "Button#SAVE");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Edit this document two times",
			groupName = "Guest");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Edit this document two times",
			dmDocumentTitleEdit = "First edit");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "First edit",
			dmDocumentTitleEdit = "Second edit");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Second edit",
			groupName = "Guest",
			siteURLKey = "guest");

		for (var versionNumber : list "1.2,1.1") {
			AssertElementPresent(
				key_dmDocumentVersionNumber = "${versionNumber}",
				locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
		}

		AssertElementNotPresent(
			key_dmDocumentVersionNumber = "1.0",
			locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
	}

	@priority = "5"
	@refactorneeded
	test MoveToRecycleBinDocument {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.moveToRecycleBinCP(
			assetType = "Document",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This ensures that the user can create a document with edited display page template."
	@priority = "4"
	@refactorneeded
	test ViewDocumentWithEditedDisplayPageTemplate {
		JSONGroup.addGroup(groupName = "Test Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Document",
			displayPageName = "Display Page Template Name",
			subType = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Template Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		Button.clickPublish();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
			displayPageName = "Display Page Template Name",
			item = "Edit");

		PageEditor.removeFragment(fragmentName = "Container");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Display Page Content");

		Button.clickPublish();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTypeName = "DM Document Type Name",
			textField = "DM Document Text");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Document",
			entryTitle = "Document_1.jpg",
			groupName = "Test Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "test-site-name");

		var dmFileEntryID = JSONDocument.getFileEntryId(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Site Name");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/d/${dmFileEntryID}");

		AssertVisible(
			key_imageFileName = "Document_1.jpg",
			locator1 = "PageEditor#ENTRY_COVER_IMAGE");
	}

}