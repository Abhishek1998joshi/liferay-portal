@component-name = "portal-wcm"
definition {

	property custom.properties = "feature.flag.LPS-150277=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a company Object with a Long Integer, Integer, Precision Decimal and Decimal fields") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Purchase Order",
				objectName = "PurchaseOrder",
				pluralLabelName = "Purchase Orders");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "LongInteger",
				fieldLabelName = "Amount",
				fieldName = "amount",
				fieldType = "Long",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Ticket Number",
				fieldName = "ticketNumber",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "PrecisionDecimal",
				fieldLabelName = "Price",
				fieldName = "price",
				fieldType = "BigDecimal",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Decimal",
				fieldLabelName = "Tax",
				fieldName = "tax",
				fieldType = "Double",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");
		}

		task ("Enable Inputs Fragment collection in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.fragment.collection.contributor.inputs.InputsFragmentCollectionContributor");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			task ("Disable Inputs Fragment collection in Gogo Shell") {
				GogoShell.openGogoShellAdmin();

				GogoShell.executeCommand(commandName = "scr:disable com.liferay.fragment.collection.contributor.inputs.InputsFragmentCollectionContributor");

				GogoShell.viewOutput(outputContent = "true");
			}

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			ObjectAdmin.deleteObjectViaAPI(objectName = "PurchaseOrder");
		}
	}

	@description = "This is a test for LPS-155169. The page creator could configure the Numeric Input framgent."
	@priority = "4"
	test ConfigureNumericInput {
		property test.name.skip.portal.instance = "NumericInput#ConfigureNumericInput";

		task ("Given a page creator has a Form Container mapped to an entity with Integer field") {
			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Form Container to new Object") {
				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}
		}

		task ("When the page creator adds a Numeric Input fragment into the Form Container") {
			PageEditor.addFragmentToFormContainer(
				collectionName = "Form Components",
				fragmentName = "Numeric Input");
		}

		task ("Then the page creator could configure the Numeric Input fragment") {
			task ("Mark the Numeric Input as required") {
				PageEditor.editInput(
					field = "Ticket Number",
					fragmentName = "Numeric Input",
					markAsRequired = "true");

				PageEditor.viewInputStyle(
					label = "Ticket Number",
					markAsRequired = "true",
					type = "numeric-input");
			}

			task ("Rename the label") {
				PageEditor.editInput(
					fragmentName = "Numeric Input",
					label = "Purchase Ticket Number");

				PageEditor.viewInputStyle(
					label = "Purchase Ticket Number",
					showLabel = "true",
					type = "numeric-input");
			}

			task ("Hide the label") {
				PageEditor.editInput(
					fragmentName = "Numeric Input",
					hideLabel = "true");

				PageEditor.viewInputStyle(
					label = "Purchase Ticket Number",
					showLabel = "false",
					type = "numeric-input");
			}

			task ("Show the Help Text") {
				PageEditor.editInput(
					fragmentName = "Numeric Input",
					hideHelpText = "false");

				PageEditor.viewInputStyle(
					helpText = "Add your help text here.",
					showHelpText = "true",
					type = "numeric-input");
			}

			task ("Clear the Help Text") {
				PageEditor.editInput(
					fragmentName = "Numeric Input",
					helpText = "");

				PageEditor.viewInputStyle(
					showHelpText = "false",
					type = "numeric-input");
			}

			task ("Add a placeholder to Numeric Input") {
				PageEditor.editInput(
					fragmentName = "Numeric Input",
					placeholder = "Type your ticket number");

				PageEditor.viewInputStyle(
					placeholder = "Type your ticket number",
					type = "numeric-input");
			}
		}
	}

	@description = "This is a test for LPS-155169. The Numeric Input only allow numbers and some special characters."
	@priority = "5"
	test ViewAllowedCharacters {
		property test.name.skip.portal.instance = "NumericInput#ViewAllowedCharacters";

		task ("Given a user has a content page with a Numeric Input inside Form Container") {
			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Form Container to new Object") {
				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}

			task ("Add a Numeric Input fragment into the Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "Numeric Input");
			}

			task ("Map the Numeric Input fragment to the decimal field") {
				PageEditor.editInput(
					field = "Tax",
					fragmentName = "Numeric Input");

				PageEditor.publish();
			}
		}

		task ("When the user accesses to the content page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the user can only be allowed to type numbers and some special characters") {
			task ("Type -123.456789 in Numeric Input") {
				Type(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "-123.456789");

				AssertTextEquals(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "-123.456789");
			}

			task ("Type 10e5 in Numeric Input") {
				Type(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "10e5");

				AssertTextEquals(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "10e5");
			}

			task ("Type 3E2 in Numeric Input") {
				Type(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "3E2");

				AssertTextEquals(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "3E2");
			}

			task ("Type China#& in Numeric Input") {
				Refresh();

				Type.sendKeys(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "China#&");

				AssertTextEquals(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "");
			}

			task ("Type 12@12 in Numeric Input") {
				Refresh();

				Type.sendKeys(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "12@12");

				AssertTextEquals(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "1212");
			}

			task ("Type 1.2? in Numeric Input") {
				Refresh();

				Type.sendKeys(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "1.2?");

				AssertTextEquals(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "1.2");
			}

			task ("Type Ch1n4 in Numeric Input") {
				Refresh();

				Type.sendKeys(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "Ch1n4");

				AssertTextEquals(
					key_text = "Tax",
					locator1 = "TextInput#ANY",
					value1 = "14");
			}
		}
	}

	@description = "This is a test for LPS-155169. The Numeric Input could be mapped to Long Integer, Integer, Precision Decimal and Decimal fields."
	@priority = "5"
	test ViewMappableFields {
		property test.name.skip.portal.instance = "NumericInput#ViewMappableFields";

		task ("Given a page creator has a content page with a Numeric Input inside Form Container") {
			task ("Add a Form Container framgment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Form Container to new Object") {
				PageEditor.editFormContainer(
					contentType = "Purchase Order",
					panel = "General");
			}

			task ("Add a Numeric Input fragment into the Form Container") {
				PageEditor.addFragmentToFormContainer(
					collectionName = "Form Components",
					fragmentName = "Numeric Input");
			}
		}

		task ("When the page creator accesses to the General panel of Numeric Input") {
			PageEditor.gotoConfiguration(fragmentName = "Numeric Input");
		}

		task ("Then the page creator could see mappable fields in mapping field selector") {
			for (var fieldName : list "Amount,Ticket Number,Price,Tax") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_value = "${fieldName}",
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}
		}
	}

}