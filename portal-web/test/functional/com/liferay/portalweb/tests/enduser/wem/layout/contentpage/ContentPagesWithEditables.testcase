@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");

		FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

		FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add a content page and edit its fragment immediately. This is a variation of the steps from LPS-85872."
	@priority = "5"
	test AddContentPageWithEditedFragmentText {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Content");

		PageEditor.editFragmentText(
			contributed = "false",
			fragmentName = "Content",
			id = "content",
			text = "New editable fragment text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert the Content fragment has the updated editable text") {
			AssertVisible(
				key_content = "New editable fragment text",
				key_fragmentClass = "body",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-95045. A user should be able to add an image fragment and change the image in the fragment."
	@priority = "5"
	test AddContentPageWithImageFragment {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Collection Name",
			fragmentName = "Image");

		PageEditor.editFragmentImage(
			contributed = "false",
			fileName = "Document_1.png",
			fragmentName = "Image",
			id = "image");

		task ("Assert the Image fragment's image was changed") {
			AssertVisible(
				key_fragmentClass = "image",
				key_image = "Document_1.png",
				key_position = "1",
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT_IMAGE");
		}

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert the Image fragment appears with the image") {
			AssertVisible(
				key_fragmentClass = "image",
				key_image = "Document_1.png",
				key_position = "1",
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT_IMAGE");
		}

		ContentPages.clickPencil();

		task ("Assert the Image fragment's image has persisted") {
			AssertVisible(
				key_fragmentClass = "image",
				key_image = "Document_1.png",
				key_position = "1",
				locator1 = "Fragment#PAGE_EDITOR_FRAGMENT_IMAGE");
		}
	}

	@description = "This is a test for LPS-106776. Add a translation to editable text."
	@priority = "5"
	test AddTraslationtoRichText {
		property portal.acceptance = "true";

		task ("Add a Rich Text fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text");
		}

		task ("Edit Rich Text text") {
			PageEditor.editFragmentText(
				contributed = "false",
				fragmentName = "Rich Text",
				id = "rich-text",
				text = "New editable fragment en-US text");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "ca-ES");

			PageEditor.editFragmentText(
				contributed = "false",
				fragmentName = "Rich Text",
				id = "rich-text",
				text = "New editable fragment ca-ES text");

			PageEditor.clickPublish();
		}

		task ("Navigate to the content page in Edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert translation is added") {
			AssertVisible(
				key_content = "New editable fragment en-US text",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "ca-ES");

			AssertVisible(
				key_content = "New editable fragment ca-ES text",
				key_fragmentClass = "rich-text",
				locator1 = "Fragment#FRAGMENT");
		}
	}

	@description = "This is a test for LPS-101333. Freemarker code should not be executed in an html fragment."
	@priority = "5"
	test CannotExecuteFreemarkerCodeInHTMLFragment {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "HTML");

		PageEditor.editFragmentHTML(
			editableId = "element-html",
			fileName = "fragment_freemarker_basic.html",
			fragmentName = "HTML");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		task ("Assert the freemarker code was not executed") {
			AssertTextNotEquals(
				locator1 = "//div[contains(@class,'fragment-html-test')]",
				value1 = "Basic Test");
		}
	}

	@description = "This is a test for LPS-98553. Can edit created HTML lfr-editable fragment."
	@priority = "4"
	test EditInlineContentOfHTMLFragmentWithOldTag {
		task ("Add a new fragment with the following codes") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.addFragment(fragmentName = "Fragment Name");

			var htmlSnippet = '''
<div class="fragment-name">
	<lfr-editable class="component-html" id="element-html" type="html">

		<h1>HTML Example</h1>

		<p class="mb-0">
			A paragraph is a <strong>self-contained</strong> unit of a discourse in
			writing dealing with a particular point or <em>idea</em>. Paragraphs are
			usually an expected part of formal writing, used to organize longer
			prose.
		</p>
	</lfr-editable>
</div>
		''';

			var cssSnippet = '''
.component-html img {
	max-width: 100%;
}
		''';

			FragmentsEditor.typeHtmlEditor(content = "${htmlSnippet}");

			FragmentsEditor.typeCssEditor(content = "${cssSnippet}");

			FragmentsEditor.waitForAutoSave();

			FragmentsEditor.publish();
		}

		task ("Add a new fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");
		}

		task ("Edit the inline content of HTML fragment") {
			var htmlSnippet = '''
<h1>Edit HTML Title</h1>

<p class="mb-0">
	A paragraph is a <strong>self-contained</strong> unit of a discourse in
	writing dealing with a particular point or <em>idea</em>. Paragraphs are
	usually an expected part of formal writing, used to organize longer
	prose.
</p>
		''';

			PageEditor.editFragmentHTML(
				content = "${htmlSnippet}",
				contributed = "false",
				editableId = "element-html",
				fragmentName = "Fragment Name");
		}

		task ("View edited inline content in edit mode") {
			AssertTextEquals.assertPartialText(
				id = "element-html",
				key_fragmentName = "Fragment Name",
				locator1 = "Fragment#EDITABLE_FIELD",
				value1 = "Edit HTML Title");

			PageEditor.clickPublish();
		}

		task ("View edited inline content in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertTextEquals.assertPartialText(
				key_fragmentName = "html",
				locator1 = "Fragment#FRAGMENT_BASIC_COMPONENT",
				value1 = "Edit HTML Title");
		}
	}

}