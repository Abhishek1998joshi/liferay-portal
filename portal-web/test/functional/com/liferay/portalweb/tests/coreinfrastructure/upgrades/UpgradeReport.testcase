@component-name = "portal-upgrades"
definition {

	property app.server.types = "tomcat";
	property data.archive.type = "data-archive-portal";
	property database.types = "mysql";
	property portal.release = "true";
	property portal.upstream = "true";
	property portal.version = "7.4.13";
	property testray.main.component.name = "Database Upgrade Framework";
	property upgrade.reports.enabled = "true";

	@description = "LPS-154683: Upgrade Report provides the version of the database"
	@priority = "3"
	test DatabaseVersionLogged {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#DatabaseVersionProvided";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");

			echo("${fileContent}");
		}

		task ("Read the version is correct in the report") {
			var databaseVersion = Upgrade.getDatabaseVersion();

			if (contains("${fileContent}", "Final portal build number: ${databaseVersion}")) {
				fail("Database version is not present in upgrade report.");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report shows errors"
	@priority = "4"
	test ErrorsLogged {
		property portal.version = "6.0.12";
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#ErrorsProvided";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");

			echo("${fileContent}");
		}

		task ("Read the content. No errors expected") {
			if (contains("${fileContent}", "Errors thrown during upgrade")) {
				fail("Upgrade report does not contain expected errors.");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report is created when property is set to true"
	@priority = "4"
	test ReportGeneratedWhenEnabled {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#ReportGeneratedWhenEnabled";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var reportFileExists = FileUtil.exists("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Check if file exists") {
			if ("${reportFileExists}" != "true") {
				fail("Upgrade report not found in ${liferayHome}/tools/portal-tools-db-upgrade-client/reports/");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report is not created when property is not set to true"
	@priority = "4"
	test ReportNotGenerated {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#ReportNotGenerated";
		property testcase.url = "http://www.example.com";
		property upgrade.reports.enabled = "false";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var reportFileExists = FileUtil.exists("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Check file doesn't exist") {
			if ("${reportFileExists}" == "true") {
				fail("Upgrade report found in ${liferayHome}/tools/portal-tools-db-upgrade-client/reports/");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report shows warnings"
	@priority = "3"
	test WarningsLogged {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#WarningsProvided";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Read the content. Warnings expected") {
			if (!(contains("${fileContent}", "Warnings thrown during upgrade process"))) {
				fail("Upgrade report does not contain expected warnings.");
			}
		}
	}

}