@component-name = "portal-upgrades"
definition {

	property app.server.types = "tomcat";
	property data.archive.type = "data-archive-portal";
	property database.types = "mysql";
	property portal.release = "true";
	property portal.upstream = "true";
	property portal.version = "7.4.13";
	property testray.main.component.name = "Database Upgrade Framework";
	property upgrade.reports.enabled = "true";

	@description = "LPS-158741: Upgrade Report provides the initial, final, and expected portal build number"
	@priority = "3"
	test BuildNumberLogged {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#BuildNumberLogged";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");

			echo("${fileContent}");
		}

		task ("Read the intial portal build number") {
			if (!(contains("${fileContent}", "Initial portal build number: 7413"))) {
				fail("Inital portal build number is not present in upgrade report.");
			}
		}

		task ("Read the final portal build number") {
			var finalBuildVersion = Upgrade.getBuildNumber();

			if (!(contains("${fileContent}", "Final portal build number: ${finalBuildVersion}"))) {
				fail("Final portal build number is not present in upgrade report.");
			}
		}

		task ("Read the expected portal build number") {
			var expectedBuildVersion = Upgrade.getBuildNumber();

			if (!(contains("${fileContent}", "Expected portal build number: ${expectedBuildVersion}"))) {
				fail("Expected portal build number is not present in upgrade report.");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report provides the type and version of the database"
	@priority = "3"
	test DatabaseLogged {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#DatabaseLogged";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");

			echo("${fileContent}");
		}

		task ("Read the type and version is correct in the report") {
			var databaseType = PropsUtil.get("database.type");

			var databaseVersion = PropsUtil.get("database.${databaseType}.version");

			if (!(contains("${fileContent}", "Using ${databaseType} version ${databaseVersion}"))) {
				fail("Database type and version is not present in upgrade report.");
			}
		}
	}

	@description = "LPS-154683: The Upgrade Report Document Library Store and storage size."
	@priority = "4"
	test DocumentLibraryLogged {
		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Read which Document Library Store is being used") {
			if (!(contains("${fileContent}", "dl.store.impl=com.liferay.portal.store.file.system.FileSystemStore"))) {
				echo("${fileContent}");

				fail("Document Library Store is not present in upgrade report.");
			}
		}

		task ("Read the size of document library storage") {
			if (!(contains("${fileContent}", "The document library storage size is 750.03 KB"))) {
				echo("${fileContent}");

				fail("Size of document library storage is not present in upgrade report.");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report shows errors"
	@ignore = "true"
	@priority = "4"
	@refactorneeded
	test ErrorsLogged {
		property portal.version = "6.0.12";
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#ErrorsLogged";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");

			echo("${fileContent}");
		}

		task ("Read the content. No errors expected") {
			if (contains("${fileContent}", "Errors thrown during upgrade")) {
				fail("Upgrade report does not contain expected errors.");
			}
		}
	}

	@description = "LPS-154683: The Upgrade Report logs the longest running upgrade processes."
	@ignore = "Test Stub"
	@priority = "4"
	test LongestProcessesLogged {

		// TODO The Upgrade Report should list the 20 longest running upgrade process in the upgrade report in descending order

	}

	@description = "LPS-154683: Upgrade Report is created when property is set to true"
	@priority = "4"
	test ReportGeneratedWhenEnabled {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#ReportGeneratedWhenEnabled";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var reportFileExists = FileUtil.exists("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Check if file exists") {
			if ("${reportFileExists}" != "true") {
				fail("Upgrade report not found in ${liferayHome}/tools/portal-tools-db-upgrade-client/reports/");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report is not created when property is not set to true"
	@priority = "4"
	test ReportNotGenerated {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#ReportNotGenerated";
		property testcase.url = "http://www.example.com";
		property upgrade.reports.enabled = "false";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var reportFileExists = FileUtil.exists("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Check file doesn't exist") {
			if ("${reportFileExists}" == "true") {
				fail("Upgrade report found in ${liferayHome}/tools/portal-tools-db-upgrade-client/reports/");
			}
		}
	}

	@description = "LPS-154683: The Upgrade Report should not be deleted on additional upgrade runs."
	@ignore = "Test Stub"
	@priority = "4"
	test ReportPersistThroughAdditionalUpgradeRuns {

		// TODO Running the upgrade report more than once should not delete any old upgrade reports, they should be named based on time generated

	}

	@description = "LPS-154683: The Upgrade Report logs the row counts for each table."
	@ignore = "Test Stub"
	@priority = "3"
	test RowCountsLogged {

		// TODO The Upgrade Report should list the initial and final row counts for each database table sorted by initial row in descending order

	}

	@description = "LPS-158741: The Upgrade Report should list the initial, expected, and final schema versions."
	@priority = "4"
	test SchemaVersionsLogged {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#SchemaVersionsLogged";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");

			echo("${fileContent}");
		}

		task ("Read the intial schema version") {
			if (!(contains("${fileContent}", "Initial portal schema version: 13.1.1"))) {
				fail("Inital schema version is not present in upgrade report.");
			}
		}

		task ("Read the final schema version") {
			var finalSchemaVersion = Upgrade.getSchemaVersion();

			if (!(contains("${fileContent}", "Final portal schema version: ${finalSchemaVersion}"))) {
				fail("Final schema version is not present in upgrade report.");
			}
		}

		task ("Read the expected schema version") {
			var expectedSchemaVersion = Upgrade.getSchemaVersion();

			if (!(contains("${fileContent}", "Expected portal schema version: ${expectedSchemaVersion}"))) {
				fail("Expected schema version is not present in upgrade report.");
			}
		}
	}

	@description = "LPS-154683: The Upgrade Report logs total upgrade runtime."
	@ignore = "true"
	@priority = "4"
	test TotalRuntimeLogged {
		property test.name.skip.portal.instance = "UpgradeReport#TotalRuntimeLogged";

		task ("Look for the upgrade logs") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContentLog = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/logs/upgrade.log");
		}

		task ("Look for the upgrade report") {
			var fileContentReport = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Capture the upgrade runtime in upgrade logs") {
			var upgradeRunTimeLog = RegexUtil.replace("${fileContentLog}", "Completed Liferay core upgrade process i\"?n \"?(.*[0-9])", "1");

			echo("Upgrade runtime reported by upgrade.log is ${upgradeRunTimeLog}");
		}

		task ("Capture the upgrade runtime in upgrade Report") {
			var upgradeRunTimeReport = RegexUtil.replace("${fileContentReport}", "Upgrade completed i\"?n \"?(.*[0-9])", "1");

			echo("Upgrade runtime reported by upgrade_report.info is ${upgradeRunTimeReport}");
		}

		task ("Read the total runtime to see if it's present") {
			if (!(contains("${fileContentReport}", "Upgrade completed in ${upgradeRunTimeReport}"))) {
				echo("${fileContentReport}");

				fail("Total Runtime it's not present on the Report.");
			}
		}

		task ("Read the total runtime comparing with the one got in the logs") {
			if (!(contains("${fileContentReport}", "Upgrade completed in ${upgradeRunTimeLog}"))) {
				echo("${fileContentReport}");

				fail("Total Runtime on Report mismatch the runtime on upgrade.log file.");
			}
		}
	}

	@description = "LPS-154683: Upgrade Report shows warnings"
	@priority = "3"
	test WarningsLogged {
		property skip.start.app.server = "true";
		property test.name.skip.portal.instance = "UpgradeReport#WarningsLogged";
		property testcase.url = "http://www.example.com";

		task ("Look for the upgrade report") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var fileContent = FileUtil.read("${liferayHome}/tools/portal-tools-db-upgrade-client/reports/upgrade_report.info");
		}

		task ("Read the content. Warnings expected") {
			if (!(contains("${fileContent}", "Warnings thrown during upgrade process"))) {
				fail("Upgrade report does not contain expected warnings.");
			}
		}

		task ("Read the content. Check for class name and message") {
			if (!(contains("${fileContent}", "Class name:"))) {
				fail("Upgrade report does not contain the warning class name.");
			}

			if (!(contains("${fileContent}", "occurrences of the following warnings: "))) {
				fail("Upgrade report does not contain the warning message.");
			}
		}
	}

}