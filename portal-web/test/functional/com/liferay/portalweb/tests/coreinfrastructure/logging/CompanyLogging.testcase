@component-name = "portal-logging"
definition {

	property database.partition.enabled = "true";
	property database.types = "mysql";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Logging";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Any logs that would appear in specifically company A should never appear in the logs of company B"
	@ignore = "Test Stub"
	@priority = "3"
	test AssertCompanyLogsIsolated {

		// TODO LRQA-75859

	}

	@description = "If company.log.enabled=false, there should not be additional logging files created for each company and the UI access point should be unavailable"
	@priority = "4"
	test CompanyLoggingDisabled {
		property custom.properties = "company.log.enabled=false";

		task ("When the user tries navigating to the company logging UI access point with company logs disabled") {
			var baseURL = PropsUtil.get("portal.url");

			Open.openNoError(locator1 = "${baseURL}/o/company-log");
		}

		task ("Then the page cannot be accessed") {
			AssertElementNotPresent(
				key_virtualHost = "liferay.com",
				locator1 = "CompanyLogging#COMPANY_LOG_TITLE");

			AssertLocation.assertPartialLocation(value1 = "web/guest");
		}

		task ("When the user adds a virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Then additional company logging files should not be created") {
			var homeDir = PropsUtil.get("liferay.home.dir.name");

			var companiesFolderExists = FileUtil.exists("${homeDir}/logs/companies");

			if ("${companiesFolderExists}" == "true") {
				fail("logs/companies folder exists");
			}
		}
	}

	@description = "An Omniadmin can get log names from all companies and download logs from all companies though the UI"
	@priority = "4"
	test GetAllCompanyLogs {
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "CompanyLogging#GetAllCompanyLogs";

		task ("Given all company logs output unique logs") {
			ServerAdministration.openServerAdmin();

			ServerAdministration.addCategoryLogLevels(
				categoryLevel = "INFO",
				categoryName = "com.liferay.portal.background.task.internal.messaging.RemoveOnCompletionBackgroundTaskStatusMessageListener");
		}

		task ("And given two new virtual instances are created") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.baker.com",
				portalInstanceId = "www.baker.com",
				virtualHost = "www.baker.com");
		}

		task ("When the Omniadmin navigates to the company logging UI access point") {
			Navigator.openWithAppendToBaseURL(urlAppend = "o/company-log");
		}

		task ("Then log files are present for all companies") {
			var companyTitles = JSONCompany.getAllCompanyNames();

			for (var companyTitle : list "${companyTitles}") {
				AssertElementPresent(
					key_virtualHost = "${companyTitle}",
					locator1 = "CompanyLogging#COMPANY_LOG_TITLE");
			}
		}

		task ("And the log files can be downloaded and viewed for each company") {
			for (var companyTitle : list "${companyTitles}") {
				var logContent = CompanyLogging.downloadCompanyLog(portalInstanceName = "${companyTitle}");

				CompanyLogging.assertCompanyLogContent(
					logContent = "${logContent}",
					portalInstanceName = "${companyTitle}");
			}
		}
	}

	@description = "A company admin should only be able to see the logs from the company they are an admin of"
	@priority = "5"
	test GetCompanyAdminLogs {
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "CompanyLogging#GetCompanyAdminLogs";

		task ("Given a new instance is created") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("And given a company admin user is added for that virtual instance") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			JSONUser.addUser(
				creatorEmailAddress = "test@www.able.com",
				creatorPassword = "test",
				portalInstanceName = "www.able.com",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "userea@www.able.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			User.openUsersAdmin(baseURL = "http://www.able.com:8080");

			User.assignRegularRoleCP(
				roleTitle = "Administrator",
				userScreenName = "usersn");

			User.editPassword(newPassword = "test");
		}

		task ("And given the company admin logs in to the virtual instance") {
			User.logoutPG();

			SignIn._signIn(
				userEmailAddress = "userea@www.able.com",
				virtualHostsURL = "http://www.able.com:8080");
		}

		task ("When the company admin navigates to the company logging UI access point") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080/o/company-log");
		}

		task ("Then only logs for that instance are shown") {
			AssertElementPresent(
				key_virtualHost = "www.able.com",
				locator1 = "CompanyLogging#COMPANY_LOG_TITLE");

			AssertElementNotPresent(
				key_virtualHost = "liferay.com",
				locator1 = "CompanyLogging#COMPANY_LOG_TITLE");
		}
	}

	@description = "A company admin that tries to directly download the logs of a company they do not have access to should get a permissions error"
	@ignore = "Test Stub"
	@priority = "4"
	test GetCompanyAdminLogsFromDifferentCompany {

		// TODO LRQA-75856

	}

	@description = "A non-administrative user should get a permissions denied error when trying to access the UI to get company logging information"
	@ignore = "Test Stub"
	@priority = "4"
	test GetCompanyLogsAsGuest {

		// TODO LRQA-75857

	}

	@description = "If there are no logs available for a company, there should be some kind of message to notify the user when they try to check the available log names"
	@ignore = "Test Stub"
	@priority = "4"
	test GetEmptyCompanyLogs {

		// TODO LRQA-75858

	}

	@description = "If a user tries to download a logging file or company that doesnâ€™t exist it should fail and throw a suitable error message"
	@ignore = "Test Stub"
	@priority = "4"
	test GetInvalidCompanyLogs {

		// TODO LRQA-75860

	}

}